// Auto-generated by MAZE
package nl.uu.tests.maze.generated.benchmarks;

import java.lang.Exception;
import java.lang.StackOverflowError;
import nl.uu.maze.benchmarks.AckermannPeter;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class AckermannPeterTest {
  @Test
  public void testCompute1() throws Exception {
    long marg0 = 0L;
    long marg1 = 0L;
    long retval = AckermannPeter.compute(marg0, marg1);

    long expected = 1L;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCompute2() throws Exception {
    long marg0 = 1L;
    long marg1 = 0L;
    long retval = AckermannPeter.compute(marg0, marg1);

    long expected = 2L;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCompute3() throws Exception {
    long marg0 = 1L;
    long marg1 = 1L;
    long retval = AckermannPeter.compute(marg0, marg1);

    long expected = 3L;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCompute4() throws Exception {
    long marg0 = 2L;
    long marg1 = 0L;
    long retval = AckermannPeter.compute(marg0, marg1);

    long expected = 3L;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCompute5() throws Exception {
    long marg0 = 1L;
    long marg1 = 2L;
    long retval = AckermannPeter.compute(marg0, marg1);

    long expected = 4L;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCompute6() throws Exception {
    long marg0 = -1L;
    long marg1 = -2251799813685254L;
    Assertions.assertThrows(StackOverflowError.class, () -> AckermannPeter.compute(marg0, marg1));
  }

  @Test
  public void testCompute7() throws Exception {
    long marg0 = -16386L;
    long marg1 = 5L;
    Assertions.assertThrows(StackOverflowError.class, () -> AckermannPeter.compute(marg0, marg1));
  }

  @Test
  public void testCompute8() throws Exception {
    long marg0 = -42949672962L;
    long marg1 = 4L;
    Assertions.assertThrows(StackOverflowError.class, () -> AckermannPeter.compute(marg0, marg1));
  }

  @Test
  public void testCompute9() throws Exception {
    long marg0 = 1L;
    long marg1 = 5L;
    long retval = AckermannPeter.compute(marg0, marg1);

    long expected = 7L;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCompute10() throws Exception {
    long marg0 = -1152921504606846980L;
    long marg1 = 3L;
    Assertions.assertThrows(StackOverflowError.class, () -> AckermannPeter.compute(marg0, marg1));
  }

  @Test
  public void testCompute11() throws Exception {
    long marg0 = -1152921504606846980L;
    long marg1 = 2L;
    Assertions.assertThrows(StackOverflowError.class, () -> AckermannPeter.compute(marg0, marg1));
  }

  @Test
  public void testCompute12() throws Exception {
    long marg0 = -1152921504606846980L;
    long marg1 = 1L;
    Assertions.assertThrows(StackOverflowError.class, () -> AckermannPeter.compute(marg0, marg1));
  }

  @Test
  public void testCompute13() throws Exception {
    long marg0 = -1152921504606846980L;
    long marg1 = 0L;
    Assertions.assertThrows(StackOverflowError.class, () -> AckermannPeter.compute(marg0, marg1));
  }

  @Test
  public void testCompute14() throws Exception {
    long marg0 = 1L;
    long marg1 = 3L;
    long retval = AckermannPeter.compute(marg0, marg1);

    long expected = 5L;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCompute15() throws Exception {
    long marg0 = 1L;
    long marg1 = 4L;
    long retval = AckermannPeter.compute(marg0, marg1);

    long expected = 6L;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCompute16() throws Exception {
    long marg0 = 2L;
    long marg1 = 3L;
    long retval = AckermannPeter.compute(marg0, marg1);

    long expected = 9L;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCompute17() throws Exception {
    long marg0 = 2L;
    long marg1 = 2L;
    long retval = AckermannPeter.compute(marg0, marg1);

    long expected = 7L;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCompute18() throws Exception {
    long marg0 = 3L;
    long marg1 = 1L;
    long retval = AckermannPeter.compute(marg0, marg1);

    long expected = 13L;
    Assertions.assertEquals(expected, retval);
  }
}
