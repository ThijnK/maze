// Auto-generated by MAZE
package nl.uu.tests.maze.generated.benchmarks;

import java.lang.Exception;
import java.lang.NullPointerException;
import nl.uu.maze.benchmarks.BinarySearch;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class BinarySearchTest {
  @Test
  public void testBinarySearch1() throws Exception {
    int[] marg0 = null;
    int marg1 = 0;
    Assertions.assertThrows(NullPointerException.class, () -> BinarySearch.binarySearch(marg0, marg1));
  }

  @Test
  public void testBinarySearch2() throws Exception {
    int[] marg0 = {};
    int marg1 = 0;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch3() throws Exception {
    int[] marg0 = { 0 };
    int marg1 = 0;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = marg1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch4() throws Exception {
    int[] marg0 = { 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch5() throws Exception {
    int[] marg0 = { 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch6() throws Exception {
    int[] marg0 = { -2147483647, 0, -2147483647 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch7() throws Exception {
    int[] marg0 = { 1, 0, 1 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch8() throws Exception {
    int[] marg0 = { 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch9() throws Exception {
    int[] marg0 = { 0, 1073741824, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch10() throws Exception {
    int[] marg0 = { -2147483648, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch11() throws Exception {
    int[] marg0 = { 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch12() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, -2147483647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch13() throws Exception {
    int[] marg0 = { 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1073741824, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 12;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch14() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2147483648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2147483647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 57;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch15() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch16() throws Exception {
    int[] marg0 = { -1073741824, 0, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch17() throws Exception {
    int[] marg0 = { 0, 1073741824, 0, 0, 536870912, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch18() throws Exception {
    int[] marg0 = { 0, 0, 0, 1073741824, 0, 268435456, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch19() throws Exception {
    int[] marg0 = { -1073741824, -1073741824, -1073741824, -2147483648, 0, -1073741824, -1073741824, -1073741824 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch20() throws Exception {
    int[] marg0 = { 0, 0, 0, 67108864, 0, 0, 0, 0 };
    int marg1 = 2;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch21() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 1073741824, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch22() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, 0, -2147483648 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch23() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0 };
    int marg1 = 2;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch24() throws Exception {
    int[] marg0 = { 0, -2147483647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch25() throws Exception {
    int[] marg0 = { 1073741824, 1073741824, 1073741824, 0, 1073741824, 1, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 536870912, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch26() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, -2147483648, 0, -2147483647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch27() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, -2147483648, -2147483647, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch28() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 536870912, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 24;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch29() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 536870912, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch30() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1073741824, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 27;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch31() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 39;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch32() throws Exception {
    int[] marg0 = { 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch33() throws Exception {
    int[] marg0 = { 0, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch34() throws Exception {
    int[] marg0 = { 1073741824, 1073741824, -2147483648, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch35() throws Exception {
    int[] marg0 = { 0, 0, -2147483648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch36() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, -2147483648, -1073741824, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch37() throws Exception {
    int[] marg0 = { 0, 0, 1073741824, 0, 0, 150994944, 0, 0, 0, 0, 0 };
    int marg1 = 134217729;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch38() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, 0, -2147483648, -2147483648, 0, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch39() throws Exception {
    int[] marg0 = { 0, 0, 0, 1073741824, 536870912, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch40() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67108864, 0, 0, 1073741824, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch41() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -1073741824, -2147483648, 0, -2147483648, -2147483648, -2147483648, -2147483648 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch42() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, -2147483648, 0, 0, -2147483648, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch43() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 134217728, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch44() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch45() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch46() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, 0, -2147483648 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch47() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch48() throws Exception {
    int[] marg0 = { -2147483647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch49() throws Exception {
    int[] marg0 = { 536870912, 0, 268435457, 1073741824, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 402653184, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912 };
    int marg1 = 268435457;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch50() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, -2147483648, -2147483647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch51() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, -2147483648, -2147483647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch52() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2147483648, 0, -2147483647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch53() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1610612737, 0, 0, 1879048192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1879048192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1610612737;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 13;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch54() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 536870912, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 16;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch55() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, 1, -2147483648, 536870912, -2147483648, -2147483648, -2147483648, 1073741824, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 20;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch56() throws Exception {
    int[] marg0 = { 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 0, 1073741824, 1073741824, 0, 1073741824, 1, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch57() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1610612737, 0, 0, 1610613760, 0, 0, 0, 0, 0, 0, 1879048192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1610612737;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 64;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch58() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483647, 0, -2147483648, 0, -2147483648, -2147483648, -2147483648 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 21;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch59() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, -1073741824, 0, 0, 0, 0, 0, 0, 0, 0, -1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch60() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 19;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch61() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 55;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch62() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 68;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch63() throws Exception {
    int[] marg0 = {};
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 59;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch64() throws Exception {
    int[] marg0 = { 0, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch65() throws Exception {
    int[] marg0 = { 1073741824, 0, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 536870912, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch66() throws Exception {
    int[] marg0 = { -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -2147483648, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, 0, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -2113929216, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch67() throws Exception {
    int[] marg0 = { 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, -2147483648, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 8388608, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch68() throws Exception {
    int[] marg0 = { -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -2147483648, -1073741824, -1073741824, 0, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -2130706432, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch69() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch70() throws Exception {
    int[] marg0 = { 0, 0, 268435456, 0, 0, 1073741824, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch71() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 1073741824, 0, 0, 134217728, 0, 0, 0, 0, 0, 0, 0, 0, 33554432, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch72() throws Exception {
    int[] marg0 = { 0, 0, 0, -2147483648, 0, -2147483648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch73() throws Exception {
    int[] marg0 = { 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 0, 0, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 4194304, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch74() throws Exception {
    int[] marg0 = { 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 0, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 0, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 32769;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch75() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, -2147483648, 0, 0, 0, -2147483648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch76() throws Exception {
    int[] marg0 = { 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 0, 1073741824, 1073741824, 0, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch77() throws Exception {
    int[] marg0 = { -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -2147483648, -1073741824, -2147483648, 0, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch78() throws Exception {
    int[] marg0 = { 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, -2147483648, 1073741824, 1073741824, 1073741824, -2147483648, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch79() throws Exception {
    int[] marg0 = { 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, -2147483648, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, -2147483648, 1073741824, 1073741824, 402653184, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 268435457;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch80() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 201326592, 0, 0, 0, 0, 0, 0, 0, 0, 150994944, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 134217729;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch81() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch82() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch83() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, 0, -2147483648, -2147483648, -1073741824, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch84() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch85() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch86() throws Exception {
    int[] marg0 = {};
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch87() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch88() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch89() throws Exception {
    int[] marg0 = {};
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch90() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch91() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch92() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch93() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch94() throws Exception {
    int[] marg0 = {};
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch95() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }
}
