// Auto-generated by MAZE
package nl.uu.tests.maze.generated.benchmarks;

import java.lang.Exception;
import java.lang.NullPointerException;
import nl.uu.maze.benchmarks.BinarySearch;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class BinarySearchTest {
  @Test
  public void testBinarySearch1() throws Exception {
    int[] marg0 = null;
    int marg1 = 0;
    Assertions.assertThrows(NullPointerException.class, () -> BinarySearch.binarySearch(marg0, marg1));
  }

  @Test
  public void testBinarySearch2() throws Exception {
    int[] marg0 = {};
    int marg1 = 0;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch3() throws Exception {
    int[] marg0 = { 0 };
    int marg1 = 0;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch4() throws Exception {
    int[] marg0 = { 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch5() throws Exception {
    int[] marg0 = { 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch6() throws Exception {
    int[] marg0 = { -2147483647, 0, -2147483647 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch7() throws Exception {
    int[] marg0 = { 1, 0, 1 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch8() throws Exception {
    int[] marg0 = { -1073741824, 0, -1073741824 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch9() throws Exception {
    int[] marg0 = { 0, 1073741824, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch10() throws Exception {
    int[] marg0 = { -2147483648, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch11() throws Exception {
    int[] marg0 = { 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch12() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, -2147483647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch13() throws Exception {
    int[] marg0 = { 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1073741824, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 12;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch14() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2147483648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2147483647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 57;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch15() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 16;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch16() throws Exception {
    int[] marg0 = { -1073741824, 0, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch17() throws Exception {
    int[] marg0 = { 0, 1073741824, 0, 0, 536870912, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch18() throws Exception {
    int[] marg0 = { 0, -2147483648, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch19() throws Exception {
    int[] marg0 = { -1073741824, -1073741824, -1073741824, -2147483648, 0, -1073741824, -1073741824, -1073741824 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch20() throws Exception {
    int[] marg0 = { 0, 0, 1073741824, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch21() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 1073741824, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch22() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, 0, -2147483648 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch23() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch24() throws Exception {
    int[] marg0 = { 0, -2147483647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch25() throws Exception {
    int[] marg0 = { 1073741824, 1073741824, 1073741824, 0, 1073741824, 1, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch26() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, -2147483648, 0, -2147483647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 10;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch27() throws Exception {
    int[] marg0 = { 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 0, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 1073741824, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 872415232, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369 };
    int marg1 = 805306369;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 36;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch28() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 134217728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 12;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch29() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 9;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch30() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483647, -2147483648, -2147483648, 0, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch31() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 23;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch32() throws Exception {
    int[] marg0 = { 0, 0, -1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch33() throws Exception {
    int[] marg0 = { 0, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch34() throws Exception {
    int[] marg0 = { -2147483648, 0, -2013265920, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch35() throws Exception {
    int[] marg0 = { -1073741824, -1073741824, -2147483648, -1073741824, 0, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch36() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, -2147483648, -1073741824, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch37() throws Exception {
    int[] marg0 = { 0, 0, 0, 33554432, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch38() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 63635456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 63569921;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch39() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 1073741824, 134217728, 0, 0, 0, 0, 0 };
    int marg1 = 2048;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch40() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 536870912, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch41() throws Exception {
    int[] marg0 = { -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -2147483648, -1073741824, -2147483648, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch42() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, -2147483648, 0, 0, 0, -2147483648, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch43() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch44() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch45() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch46() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch47() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch48() throws Exception {
    int[] marg0 = { -2147483647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch49() throws Exception {
    int[] marg0 = { 1073741824, 0, 536870913, 805306368, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 671088640, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 536870913;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch50() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, -2147483648, 0, -2147483647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2080374784, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch51() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2147483648, -2147483647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 15;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch52() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2147483648, 0, 0, -2147483647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 51;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch53() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1610612737, 0, 0, 1879048192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1619001344, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1610612737;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 20;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch54() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1073741824, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 16;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch55() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483647, 0, -2147483648, 0, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 11;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch56() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2147483648, -2147483648, -2147483647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 16;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch57() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1577058305, 0, 1610645504, 0, 0, 0, 1581252608, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1577058305;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch58() throws Exception {
    int[] marg0 = {};
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 61;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch59() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 268435457, 335544320, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 268435457;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 11;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch60() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 536870912, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 56;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch61() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 536870912, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 66;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch62() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483647, -2147483648, 0, -2147483648, -2147483648, -2147483648, -2147483648 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 60;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch63() throws Exception {
    int[] marg0 = { 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch64() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 47;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch65() throws Exception {
    int[] marg0 = { 0, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch66() throws Exception {
    int[] marg0 = { 0, -2147483648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch67() throws Exception {
    int[] marg0 = { 0, 0, 0, -2147483648, 0, -1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2013265920, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch68() throws Exception {
    int[] marg0 = { 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 0, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch69() throws Exception {
    int[] marg0 = { 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 0, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch70() throws Exception {
    int[] marg0 = { 1073741824, 0, 0, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 528482304, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 520093697;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch71() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 1073741824, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch72() throws Exception {
    int[] marg0 = { 1073741824, 1073741824, 1073741824, 0, 1073741824, 0, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 268435456, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 257;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch73() throws Exception {
    int[] marg0 = { 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 0, 0, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch74() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, 0, -1879048192, -2147483648, -2147483648, 0, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch75() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, 0, 0, -2147483648, -2147483648, -1073741824, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch76() throws Exception {
    int[] marg0 = { 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 0, 0, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch77() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2147483648, 0, -2147483648, 0, 0, -1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch78() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2147483648, 0, 0, 0, -2147483648, 0, 0, 0, -1073741824, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch79() throws Exception {
    int[] marg0 = { -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -2147483648, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -2147483648, 0, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch80() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 134217729;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch81() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch82() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -1073741824, -2147483648, -2147483648, 0, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch83() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, 0, -2147483648, -2147483392, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch84() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch85() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, 0, -2147483648, 0, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch86() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, 0, -1073741824, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch87() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, 0, -2147483648, 0, -2147483648, -2147483648, -2147483648, -2147483648 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch88() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, 536870912, 1073741824, -2147483648, -2147483648, -2147483648, -2147483648 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch89() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, 1073741824, 1073741824, -2147483648, -2147483648 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch90() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch91() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch92() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch93() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, 0, -2147483648, -2147483648 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch94() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch95() throws Exception {
    int[] marg0 = { -2147450879, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147450879;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch96() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch97() throws Exception {
    int[] marg0 = { 1073741824, 0, 268435457, 1073741824, 1073741824, 1073741824, 1073741824, 402653184, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 268435457;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch98() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, -2147483648, -2147483647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch99() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, -2147483648, -2147483647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch100() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2147483648, -2147483647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 17;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch101() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2147483648, -2147483647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 40;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch102() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 872415233, 905969664, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 872415233;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch103() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1073741824, 0, 0, 0, 0, 268435456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 12;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch104() throws Exception {
    int[] marg0 = { 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 0, 1073741824, 1073741824, 1073741824, 0, 1, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 268435456, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 12;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch105() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2147483648, 0, -2147483648, -2147483647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 24;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch106() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 268435457, 0, 1073742848, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 335544320, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 268435457;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 31;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch107() throws Exception {
    int[] marg0 = { 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 0, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 0, 1, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 37;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch108() throws Exception {
    int[] marg0 = { 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 0, 1073741824, 0, 268435457, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 402653184, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 268435457;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 48;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch109() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2147483648, 0, 0, 0, 0, 0, -2147483648, -2147483647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 54;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch110() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 8, 0, 0, 536870912, 0, 0, 0, 0, 134217728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 51;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch111() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2147483648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2147483648, -2147483647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 50;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch112() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 22;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch113() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741825, 1610612736, 0, 0, 0, 0, 0, 0, 0, 1342177280, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1073741825;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 19;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch114() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4194304, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 30;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch115() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483647, 0, -2147483648, -2147483648, 0, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 29;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch116() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870913, 1073741824, 0, 0, 0, 0, 0, 0, 805306368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 536870913;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch117() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1073741824, 0, 0, 67108864, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 28;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch118() throws Exception {
    int[] marg0 = {};
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 45;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch119() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1610612737, 1619001344, 0, 0, 0, 1879048192, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1610612737;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 44;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch120() throws Exception {
    int[] marg0 = {};
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 67;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch121() throws Exception {
    int[] marg0 = {};
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 58;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch122() throws Exception {
    int[] marg0 = { 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch123() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 30;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch124() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1610612737, 1879048192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1610612737;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch125() throws Exception {
    int[] marg0 = {};
    int marg1 = 0;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 80;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch126() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 268435456, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 44;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch127() throws Exception {
    int[] marg0 = {};
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 63;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch128() throws Exception {
    int[] marg0 = { 0, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch129() throws Exception {
    int[] marg0 = { 0, 0, -2147483648, -1073741824, 0, -1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch130() throws Exception {
    int[] marg0 = { 1073741824, 1073741824, 1073741824, 0, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 63963136, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 268435456, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 62914561;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch131() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2147483648, 0, 0, -1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch132() throws Exception {
    int[] marg0 = { 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, -2147483648, 268435456, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch133() throws Exception {
    int[] marg0 = { 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 0, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch134() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 31;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch135() throws Exception {
    int[] marg0 = { 1073741824, 0, 0, 1073741824, 1073741824, 1073741824, 1073741824, 536870912, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch136() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 67108864, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8388608, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch137() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, -2147483648, 0, 0, -2147483648, 0, 0, -1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch138() throws Exception {
    int[] marg0 = { 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 0, 0, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch139() throws Exception {
    int[] marg0 = { -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -2147483648, -1073741824, -2147483648, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, 0, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, 0, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch140() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2147483648, 0, 0, 0, 0, 0, -2147483648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch141() throws Exception {
    int[] marg0 = { 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 0, 0, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch142() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, 0, 0, -2147483648, -2147483648, -2147483648, -2147483648, -1073741824, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -1073741824, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch143() throws Exception {
    int[] marg0 = { -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -2147483648, -1073741824, -1073741824, -1073741824, -2147483648, 0, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, 0, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch144() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, 0, -2147483648, -1073741824, -2147483648, -2147483648, 0, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -1073741824, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch145() throws Exception {
    int[] marg0 = { 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 0, 0, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch146() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2147483648, 0, -2147483648, -1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2130706431;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch147() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2147483648, 0, 0, 0, 0, 0, -2147483648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch148() throws Exception {
    int[] marg0 = { 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 0, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 0, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch149() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2147483648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2147483648, 0, -1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch150() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 25165824, 0, 0, 0, 0, 0, 0, 0, 16781312, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 16777217;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch151() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch152() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 4194304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16777216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch153() throws Exception {
    int[] marg0 = {};
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch154() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch155() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 268435456, 0, 0, 0, 0, 0, 0, 0, 0, 50331648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 33554433;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch156() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -1073741824, -2147483648, 0, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, 0, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch157() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, 0, -2147483648, 1073741824, -2147483648, -2147483648, -2147483648, -2147483648, 0, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch158() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, 1073741824, 1073741824, -2147483648, -2147483648, -2147483648, 1073741824, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch159() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, 0, 0, -2147483648, -2147483648, -2080374784, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch160() throws Exception {
    int[] marg0 = { 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 0, 1073741824, 0, 0, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch161() throws Exception {
    int[] marg0 = { 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 0, 1073741824, 1073741824, 1073741824, 0, 0, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch162() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2147483648, 0, 0, 0, 0, 0, -2147483648, 0, 0, -2147483648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch163() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 1073741824, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch164() throws Exception {
    int[] marg0 = { 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 0, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 0, 1073741824, 0, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch165() throws Exception {
    int[] marg0 = { 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, -2147483648, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, -2147483648, 1073741824, 1073741824, 1073741824, -2147483648, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch166() throws Exception {
    int[] marg0 = { 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 0, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 0, 0, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch167() throws Exception {
    int[] marg0 = {};
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch168() throws Exception {
    int[] marg0 = {};
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch169() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, 0, -1879048192, -2147483648, -2147483648, -1073741824, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch170() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134217728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch171() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch172() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch173() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch174() throws Exception {
    int[] marg0 = {};
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch175() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch176() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 201392304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 201392289;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch177() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch178() throws Exception {
    int[] marg0 = {};
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch179() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch180() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch181() throws Exception {
    int[] marg0 = {};
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch182() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 1073741824, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch183() throws Exception {
    int[] marg0 = {};
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch184() throws Exception {
    int[] marg0 = {};
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch185() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1610612736, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1073741825;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch186() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch187() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67108864, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch188() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch189() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch190() throws Exception {
    int[] marg0 = {};
    int marg1 = -1073741311;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch191() throws Exception {
    int[] marg0 = { 0, 1426063361, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1426128896, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1442840576, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736, 1610612736 };
    int marg1 = 1426063361;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch192() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch193() throws Exception {
    int[] marg0 = { 0, 0, 0, 1543503873, 1610612736, 0, 0, 0, 0, 1577058304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1610612736, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1577058304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1543503873;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch194() throws Exception {
    int[] marg0 = { 536870912, 536870912, 536870912, 536870912, 0, 0, 1, 1073741824, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912, 536870912 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch195() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1073741824, 0, 0, 536870912, 0, 0, 0, 0, 0, 0, 536870912, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134217728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 13;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch196() throws Exception {
    int[] marg0 = { 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 0, 0, 1, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 268435456, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 25;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch197() throws Exception {
    int[] marg0 = { 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 0, 0, 1045430273, 1073741824, 1073741824, 1073741824, 1045954560, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1048576000, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 1045430273;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 48;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch198() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 536870913, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 805306368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 536870913;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch199() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1073741824, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 12;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch200() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1073741824, 0, 0, 268435456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 17;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch201() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483647, 0, -2147483648, 0, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, 0, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 21;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch202() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 268435457, 1073741824, 0, 0, 0, 0, 402653184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 268435457;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 24;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch203() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 268435456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch204() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 243269633, 1073741824, 0, 0, 247463936, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 243269633;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 38;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch205() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 134217728, 0, 0, 0, 0, 536870912, 0, 0, 0, 0, 0, 0, 0, 0, 0, 268435456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 43;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch206() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12289, 1073741824, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12544, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 12289;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 49;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch207() throws Exception {
    int[] marg0 = {};
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 63;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch208() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 268435456, 0, 0, 1073741824, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 76;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch209() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch210() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1073741824, 0, 0, 262144, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = 84;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch211() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch212() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch213() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1073741824, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch214() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch215() throws Exception {
    int[] marg0 = { -2147483648, 0, -1073741824, 0, 0, -1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1073741824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int marg1 = -2147483647;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch216() throws Exception {
    int[] marg0 = { 0, 0, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 33554432, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 29360128, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 25165825;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch217() throws Exception {
    int[] marg0 = { 1073741824, 1073741824, 0, 0, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 4194304, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 1;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch218() throws Exception {
    int[] marg0 = { 1073741824, 0, 0, 0, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 8388609;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testBinarySearch219() throws Exception {
    int[] marg0 = { 1073741824, 1073741824, 1073741824, 1073741824, 0, 0, 1073741824, 1073741824, 1073741824, 1073741824, 268435456, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 134217728, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int marg1 = 16385;
    int retval = BinarySearch.binarySearch(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }
}
