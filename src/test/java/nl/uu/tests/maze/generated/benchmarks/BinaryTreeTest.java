// Auto-generated by MAZE
package nl.uu.tests.maze.generated.benchmarks;

import java.lang.Exception;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.lang.reflect.Field;
import nl.uu.maze.benchmarks.BinaryTree;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class BinaryTreeTest {
  @Test
  public void testSize1() throws Exception {
    BinaryTree.Node marg0 = null;
    int retval = BinaryTree.size(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHeight1() throws Exception {
    BinaryTree.Node marg0 = null;
    int retval = BinaryTree.height(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFind1() throws Exception {
    BinaryTree.Node marg0 = null;
    int marg1 = 0;
    boolean retval = BinaryTree.find(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  private void setField(Object obj, String fieldName, Object value) throws Exception {
    Field field = obj.getClass().getDeclaredField(fieldName);
    field.setAccessible(true);
    field.set(obj, value);
  }

  @Test
  public void testFind2() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "val", 0);
    int marg1 = 0;
    boolean retval = BinaryTree.find(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsComplexValidTree1() throws Exception {
    BinaryTree.Node marg0 = null;
    boolean retval = BinaryTree.isComplexValidTree(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsComplexValidTree2() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "val", -2147483648);
    boolean retval = BinaryTree.isComplexValidTree(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsComplexValidTree3() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "val", 2147483647);
    boolean retval = BinaryTree.isComplexValidTree(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize2() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    setField(marg0, "right", null);
    int retval = BinaryTree.size(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testInorder1() throws Exception {
    BinaryTree.Node marg0 = null;
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder1() throws Exception {
    BinaryTree.Node marg0 = null;
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder1() throws Exception {
    BinaryTree.Node marg0 = null;
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testFind3() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "val", -1);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "val", 0);
    setField(marg0, "left", obj1);
    int marg1 = 0;
    boolean retval = BinaryTree.find(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHeight2() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    setField(marg0, "right", null);
    int retval = BinaryTree.height(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFind4() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "val", -1);
    setField(marg0, "left", null);
    setField(marg0, "right", null);
    int marg1 = 0;
    boolean retval = BinaryTree.find(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFind5() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "val", -1);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "val", 0);
    setField(marg0, "right", obj2);
    int marg1 = 0;
    boolean retval = BinaryTree.find(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFind6() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "val", -1);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "val", 0);
    setField(marg0, "right", obj1);
    int marg1 = 0;
    boolean retval = BinaryTree.find(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFind7() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "val", -1);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "val", -1);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "val", 0);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int marg1 = 0;
    boolean retval = BinaryTree.find(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize3() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize4() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize5() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    setField(marg0, "right", null);
    int retval = BinaryTree.size(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHeight3() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.height(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHeight4() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.height(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHeight5() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    setField(marg0, "right", null);
    int retval = BinaryTree.height(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFind8() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "val", -1);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "val", -1);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "val", 0);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int marg1 = 0;
    boolean retval = BinaryTree.find(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFind9() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "val", -1);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "val", -1);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "val", 0);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int marg1 = 0;
    boolean retval = BinaryTree.find(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFind10() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "val", -1);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "val", -1);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "val", 0);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int marg1 = 0;
    boolean retval = BinaryTree.find(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFind11() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "val", -1);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "val", -1);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "val", 0);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int marg1 = 0;
    boolean retval = BinaryTree.find(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFind12() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "val", -1);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "val", -1);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(marg0, "right", obj2);
    int marg1 = 0;
    boolean retval = BinaryTree.find(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFind13() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "val", -1);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "val", -1);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "right", obj1);
    int marg1 = 0;
    boolean retval = BinaryTree.find(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFind14() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "val", -1);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "val", -1);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    setField(marg0, "right", null);
    int marg1 = 0;
    boolean retval = BinaryTree.find(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFind15() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "val", -1);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "val", -1);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "val", -1);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "val", 0);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int marg1 = 0;
    boolean retval = BinaryTree.find(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize6() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize7() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize8() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize9() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize10() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize11() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize12() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "left", obj3);
    setField(obj1, "right", null);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize13() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize14() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    setField(marg0, "right", null);
    int retval = BinaryTree.size(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize15() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    setField(marg0, "right", null);
    int retval = BinaryTree.size(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize16() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    setField(marg0, "right", null);
    int retval = BinaryTree.size(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFind16() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "val", -1);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "val", -1);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "val", 0);
    setField(marg0, "right", obj4);
    int marg1 = 0;
    boolean retval = BinaryTree.find(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFind17() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "val", -1);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "val", -1);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "val", 0);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int marg1 = 0;
    boolean retval = BinaryTree.find(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFind18() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "val", -1);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "val", -1);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "val", 0);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int marg1 = 0;
    boolean retval = BinaryTree.find(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFind19() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "val", -1);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "val", -1);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "val", 0);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int marg1 = 0;
    boolean retval = BinaryTree.find(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFind20() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "val", -1);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "val", -1);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "val", 0);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int marg1 = 0;
    boolean retval = BinaryTree.find(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHeight6() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.height(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHeight7() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.height(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHeight8() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.height(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHeight9() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.height(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHeight10() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.height(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHeight11() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.height(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHeight12() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.height(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHeight13() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "left", obj3);
    setField(obj1, "right", null);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.height(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHeight14() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    setField(marg0, "right", null);
    int retval = BinaryTree.height(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHeight15() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    setField(marg0, "right", null);
    int retval = BinaryTree.height(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFind21() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "val", -1);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "val", -1);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "val", -1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "val", 0);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int marg1 = 0;
    boolean retval = BinaryTree.find(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFind22() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "val", -1);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "val", -1);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "val", -1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "val", 0);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int marg1 = 0;
    boolean retval = BinaryTree.find(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFind23() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "val", -1);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "val", -1);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "val", -1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "val", 0);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int marg1 = 0;
    boolean retval = BinaryTree.find(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFind24() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "val", -1);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "val", -1);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "val", -1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "val", 0);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int marg1 = 0;
    boolean retval = BinaryTree.find(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFind25() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "val", -1);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "val", -1);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "val", -1);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "val", 0);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int marg1 = 0;
    boolean retval = BinaryTree.find(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFind26() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "val", -1);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "val", -1);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "val", -1);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "val", 0);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int marg1 = 0;
    boolean retval = BinaryTree.find(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHeight16() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    setField(marg0, "right", null);
    int retval = BinaryTree.height(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testInorder2() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    setField(marg0, "right", null);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder2() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    setField(marg0, "right", null);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder2() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    setField(marg0, "right", null);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testFind27() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "val", -1);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "val", -1);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "val", -1);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "val", -1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "val", 0);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int marg1 = 0;
    boolean retval = BinaryTree.find(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testInorder3() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder4() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder5() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder6() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder7() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder8() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder9() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder10() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder11() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder12() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder13() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder14() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder15() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", null);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder16() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj4, "right", obj8);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder17() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder18() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder19() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder20() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder21() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "right", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder22() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder23() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder24() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder25() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder26() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder27() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder28() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder29() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder30() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder31() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder32() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder33() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder34() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder35() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder36() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder37() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder38() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder39() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder40() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder41() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder42() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder43() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder44() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder45() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder46() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder47() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder48() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder49() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder50() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder51() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder52() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "left", obj7);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder53() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder54() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj6, "right", obj7);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder55() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder56() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder57() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    setField(marg0, "right", null);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder58() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj3);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder59() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder60() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder61() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder62() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder63() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder64() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder65() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder66() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder67() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder68() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder69() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder70() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder71() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder72() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder73() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder74() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder75() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder76() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder77() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder78() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder79() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder80() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder81() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder82() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder83() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder84() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder85() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder86() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder87() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder88() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder89() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder90() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj5, "right", obj9);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder91() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder92() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder93() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder94() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder95() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder96() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder97() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder98() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder99() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder100() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder101() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder102() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder103() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder104() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder105() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder106() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj4, "right", obj8);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder107() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj4, "right", obj8);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder108() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder109() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder110() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder111() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder112() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder113() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder114() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder115() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder116() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder117() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder118() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder119() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder120() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder121() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder122() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder123() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder124() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder125() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder126() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder127() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder128() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj3, "right", obj7);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder129() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj3, "right", obj7);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder130() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj3, "right", obj7);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder131() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder132() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder133() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder134() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder135() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder136() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder137() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder138() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder139() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder140() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder141() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder142() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder143() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder144() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder145() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder146() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder147() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder148() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder149() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder150() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder151() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder152() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder153() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder154() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "left", obj7);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder155() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder156() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj6, "right", obj7);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder157() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder158() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder159() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    setField(marg0, "right", null);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder160() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder161() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder162() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder163() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder164() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder165() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder166() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder167() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "left", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder168() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj4, "left", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder169() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "left", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder170() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "left", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder171() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj4, "left", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder172() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj4, "right", obj7);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder173() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj4, "right", obj7);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder174() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj4, "right", obj7);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder175() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj4, "right", obj7);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder176() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj4, "right", obj7);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder177() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder178() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder179() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder180() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder181() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder182() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder183() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder184() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder185() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder186() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder187() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder188() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder189() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder190() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder191() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder192() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj5, "right", obj9);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder193() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder194() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder195() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder196() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder197() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder198() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder199() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder200() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder201() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder202() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder203() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder204() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder205() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder206() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder207() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", null);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder208() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj4, "right", obj8);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder209() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj4, "right", obj8);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder210() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder211() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder212() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder213() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder214() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder215() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder216() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder217() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder218() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder219() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder220() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder221() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder222() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder223() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder224() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder225() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder226() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder227() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder228() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder229() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder230() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj2, "right", obj7);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder231() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj2, "right", obj7);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder232() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj2, "right", obj7);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder233() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "left", obj4);
    setField(obj2, "right", null);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder234() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "left", obj4);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder235() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder236() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder237() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder238() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder239() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder240() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder241() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder242() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder243() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder244() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder245() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "right", obj7);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder246() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder247() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder248() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj5, "right", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder249() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder250() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder251() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder252() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "left", obj7);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder253() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder254() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj6, "right", obj7);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder255() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder256() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder257() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    setField(marg0, "right", null);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder258() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder259() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder260() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder261() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    setField(marg0, "right", null);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder262() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder263() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder264() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder265() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder266() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder267() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder268() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder269() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder270() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder271() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder272() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder273() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj5, "right", obj9);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder274() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", null);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder275() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder276() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder277() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder278() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder279() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder280() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder281() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder282() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder283() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder284() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder285() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder286() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder287() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "left", obj5);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder288() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "left", obj5);
    setField(obj3, "right", null);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder289() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj3, "right", obj8);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder290() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj3, "right", obj8);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder291() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder292() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder293() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder294() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder295() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder296() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder297() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder298() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder299() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj5, "right", obj8);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder300() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj5, "right", obj8);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder301() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder302() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder303() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder304() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder305() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder306() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder307() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder308() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder309() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder310() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder311() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj1, "right", obj7);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder312() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "left", obj8);
    setField(obj1, "right", obj7);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder313() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder314() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder315() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder316() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder317() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder318() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder319() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder320() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder321() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder322() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder323() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder324() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder325() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj5, "right", obj9);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder326() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder327() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder328() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder329() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder330() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder331() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder332() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder333() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder334() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder335() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder336() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder337() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder338() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder339() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder340() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", null);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder341() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj4, "right", obj8);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder342() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj4, "right", obj8);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder343() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder344() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder345() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder346() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder347() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder348() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder349() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder350() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder351() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder352() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder353() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder354() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder355() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder356() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder357() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder358() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder359() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder360() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder361() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder362() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder363() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj1, "right", obj7);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder364() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "left", obj8);
    setField(obj1, "right", obj7);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder365() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder366() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder367() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(obj1, "right", obj4);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder368() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder369() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder370() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder371() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder372() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder373() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder374() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder375() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder376() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder377() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj5, "right", obj9);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder378() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder379() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder380() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder381() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder382() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder383() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder384() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder385() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder386() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder387() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder388() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder389() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder390() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder391() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj2, "right", obj5);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder392() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder393() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj2, "right", obj8);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder394() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder395() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj2, "right", obj6);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder396() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj2, "right", obj6);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder397() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj2, "right", obj6);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder398() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj2, "right", obj6);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder399() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj2, "right", obj6);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder400() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj2, "right", obj6);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder401() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj2, "right", obj6);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder402() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj2, "right", obj6);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder403() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj2, "right", obj6);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder404() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj2, "right", obj6);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder405() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj1, "right", obj7);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder406() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "left", obj8);
    setField(obj1, "right", obj7);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder407() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder408() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder409() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder410() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder411() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder412() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder413() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder414() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder415() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder416() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder417() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder418() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder419() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "left", obj6);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder420() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "left", obj6);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj4, "right", obj9);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder421() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "left", obj6);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder422() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder423() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder424() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder425() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder426() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder427() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder428() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder429() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder430() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder431() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder432() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder433() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder434() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder435() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj2, "right", obj8);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder436() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder437() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder438() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder439() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder440() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder441() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder442() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder443() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder444() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder445() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder446() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder447() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder448() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder449() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder450() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder451() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder452() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj5, "right", obj9);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder453() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder454() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder455() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder456() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder457() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder458() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder459() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder460() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder461() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder462() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder463() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder464() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder465() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder466() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder467() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder468() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder469() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder470() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder471() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj4, "right", obj8);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder472() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj4, "right", obj8);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder473() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder474() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder475() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder476() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder477() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder478() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder479() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder480() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder481() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder482() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder483() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder484() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder485() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder486() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder487() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder488() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder489() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder490() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder491() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder492() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder493() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder494() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder495() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj3, "right", obj7);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder496() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj3, "right", obj7);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder497() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj3, "right", obj7);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder498() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj3, "right", obj7);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder499() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj3, "right", obj7);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder500() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder501() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj2, "right", obj8);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder502() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder503() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testInorder504() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.inorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder3() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder4() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder5() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder6() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder7() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder8() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder9() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder10() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder11() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder12() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder13() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder14() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder15() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder16() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder17() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder18() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder19() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder20() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder21() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder22() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder23() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder24() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "left", obj5);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder25() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "left", obj5);
    setField(obj3, "right", null);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder26() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj3, "right", obj8);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder27() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder28() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder29() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder30() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder31() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder32() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder33() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder34() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder35() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj5, "right", obj8);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder36() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj5, "right", obj8);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder37() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder38() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder39() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder40() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder41() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder42() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder43() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder44() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder45() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder46() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder47() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder48() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder49() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder50() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder51() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder52() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder53() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder54() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder55() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder56() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder57() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder58() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder59() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder60() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder61() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder62() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder63() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder64() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder65() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder66() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder67() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder68() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder69() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", null);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder70() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj4, "right", obj8);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder71() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder72() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder73() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder74() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder75() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder76() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder77() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder78() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder79() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder80() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder81() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder82() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder83() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder84() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder85() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder86() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder87() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder88() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder89() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder90() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder91() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder92() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder93() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder94() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder95() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder96() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder97() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder98() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder99() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder100() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder101() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder102() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder103() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder104() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder105() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder106() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder107() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder108() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder109() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder110() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder111() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder112() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj2, "right", obj5);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder113() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder114() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj2, "right", obj8);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder115() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder116() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "left", obj7);
    setField(obj2, "right", obj6);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder117() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj2, "right", obj6);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder118() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj2, "right", obj6);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder119() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj6, "right", obj7);
    setField(obj2, "right", obj6);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder120() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj2, "right", obj6);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder121() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj2, "right", obj6);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder122() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder123() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder124() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder125() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder126() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder127() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder128() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder129() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder130() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder131() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder132() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder133() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder134() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder135() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder136() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder137() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder138() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder139() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder140() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder141() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder142() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder143() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder144() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder145() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj2, "right", obj8);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder146() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder147() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder148() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder149() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder150() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder151() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder152() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder153() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder154() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder155() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder156() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder157() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj5, "right", obj9);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder158() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder159() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder160() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder161() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder162() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder163() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder164() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder165() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder166() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder167() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder168() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder169() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder170() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder171() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder172() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder173() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj4, "right", obj8);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder174() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj4, "right", obj8);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder175() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder176() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder177() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder178() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder179() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder180() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder181() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder182() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder183() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder184() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder185() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder186() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder187() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder188() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder189() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder190() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder191() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder192() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder193() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder194() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder195() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj3, "right", obj7);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder196() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj3, "right", obj7);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder197() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj3, "right", obj7);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder198() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder199() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj2, "right", obj8);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder200() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder201() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder202() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder203() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder204() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder205() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder206() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder207() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder208() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder209() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder210() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder211() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder212() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder213() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder214() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder215() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder216() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder217() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder218() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder219() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder220() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder221() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder222() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder223() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder224() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "left", obj5);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder225() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "left", obj5);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder226() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj3, "right", obj8);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder227() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder228() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder229() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder230() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder231() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder232() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder233() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder234() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder235() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj5, "right", obj8);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder236() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj5, "right", obj8);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder237() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder238() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder239() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder240() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder241() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder242() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj3, "right", obj6);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder243() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj3, "right", obj6);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder244() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj3, "right", obj6);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder245() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj3, "right", obj6);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder246() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj3, "right", obj6);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder247() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder248() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder249() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder250() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder251() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder252() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder253() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder254() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder255() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder256() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder257() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder258() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder259() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder260() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder261() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder262() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder263() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder264() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder265() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder266() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder267() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder268() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder269() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", null);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder270() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj4, "right", obj8);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder271() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder272() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder273() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder274() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder275() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder276() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder277() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder278() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "right", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder279() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder280() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder281() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder282() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder283() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder284() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder285() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder286() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder287() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder288() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder289() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder290() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder291() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder292() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder293() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder294() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder295() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder296() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder297() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder298() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder299() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder300() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder301() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder302() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder303() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder304() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder305() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder306() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder307() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder308() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder309() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder310() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder311() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder312() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(obj1, "right", obj5);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder313() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(obj1, "right", null);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder314() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj1, "right", obj8);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder315() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder316() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "left", obj7);
    setField(obj1, "right", obj6);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder317() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj1, "right", obj6);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder318() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj1, "right", obj6);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder319() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj6, "right", obj7);
    setField(obj1, "right", obj6);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder320() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj1, "right", obj6);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder321() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj1, "right", obj6);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder322() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "left", obj3);
    setField(obj1, "right", null);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder323() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "left", obj3);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder324() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder325() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder326() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder327() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder328() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder329() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder330() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder331() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder332() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder333() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder334() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder335() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder336() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder337() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder338() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder339() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder340() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder341() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder342() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder343() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder344() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(obj1, "right", null);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder345() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj1, "right", obj8);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder346() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder347() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder348() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder349() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder350() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder351() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder352() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder353() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder354() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder355() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder356() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder357() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj5, "right", obj9);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder358() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder359() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder360() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder361() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder362() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder363() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder364() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder365() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder366() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder367() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder368() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder369() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder370() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder371() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder372() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder373() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj4, "right", obj8);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder374() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj4, "right", obj8);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder375() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder376() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder377() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder378() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder379() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder380() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder381() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder382() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder383() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder384() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder385() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder386() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder387() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder388() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder389() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder390() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder391() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder392() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder393() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder394() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder395() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj3, "right", obj7);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder396() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj3, "right", obj7);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder397() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj3, "right", obj7);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder398() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", null);
    setField(obj1, "left", obj3);
    setField(obj1, "right", null);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder399() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", null);
    setField(obj1, "left", obj3);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj1, "right", obj8);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder400() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", null);
    setField(obj1, "left", obj3);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder401() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", null);
    setField(obj1, "left", obj3);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder402() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder403() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    setField(marg0, "right", null);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder404() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder405() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder406() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder407() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder408() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder409() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder410() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder411() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder412() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder413() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder414() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder415() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder416() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder417() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder418() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder419() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder420() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder421() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", null);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder422() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj4, "right", obj8);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder423() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder424() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder425() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder426() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder427() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "right", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder428() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder429() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder430() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder431() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder432() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder433() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder434() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder435() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder436() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder437() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder438() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder439() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder440() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder441() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder442() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder443() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder444() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder445() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder446() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder447() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder448() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder449() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder450() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder451() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder452() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder453() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder454() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder455() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder456() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder457() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder458() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "left", obj7);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder459() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder460() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj6, "right", obj7);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder461() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder462() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder463() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    setField(marg0, "right", null);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder464() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj3);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder465() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder466() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder467() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder468() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder469() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder470() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder471() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder472() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder473() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder474() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder475() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder476() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder477() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder478() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder479() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder480() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder481() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder482() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder483() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder484() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder485() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder486() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder487() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder488() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder489() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder490() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder491() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder492() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder493() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder494() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder495() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder496() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj5, "right", obj9);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder497() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder498() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder499() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder500() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder501() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder502() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder503() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder504() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder505() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder506() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder507() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder508() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder509() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder510() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder511() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder512() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj4, "right", obj8);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder513() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj4, "right", obj8);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder514() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder515() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder516() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder517() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder518() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder519() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder520() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder521() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder522() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder523() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder524() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder525() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder526() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder527() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder528() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder529() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder530() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder531() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder532() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder533() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder534() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj3, "right", obj7);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder535() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj3, "right", obj7);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder536() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj3, "right", obj7);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder537() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder538() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder539() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder540() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder541() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder542() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder543() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder544() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder545() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder546() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder547() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder548() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder549() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder550() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder551() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder552() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder553() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder554() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder555() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder556() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder557() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder558() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder559() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder560() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "left", obj7);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder561() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder562() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj6, "right", obj7);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder563() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder564() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder565() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    setField(marg0, "right", null);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder566() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder567() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder568() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder569() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder570() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder571() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder572() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder573() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "left", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder574() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj4, "left", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder575() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "left", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder576() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "left", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder577() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj4, "left", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder578() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj4, "right", obj7);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder579() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj4, "right", obj7);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder580() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj4, "right", obj7);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder581() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj4, "right", obj7);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder582() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj4, "right", obj7);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder583() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder584() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder585() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder586() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder587() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder588() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder589() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder590() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder591() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder592() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder593() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder594() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder595() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder596() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder597() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder598() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj5, "right", obj9);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder599() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder600() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder601() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder602() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder603() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder604() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder605() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder606() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder607() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder608() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder609() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder610() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder611() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder612() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder613() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", null);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder614() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj4, "right", obj8);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder615() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj4, "right", obj8);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder616() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder617() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder618() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder619() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder620() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder621() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder622() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder623() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder624() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder625() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder626() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder627() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder628() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder629() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder630() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder631() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder632() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder633() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder634() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder635() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder636() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj2, "right", obj7);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder637() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj2, "right", obj7);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder638() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj2, "right", obj7);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder639() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "left", obj4);
    setField(obj2, "right", null);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder640() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "left", obj4);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder641() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder642() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder643() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder644() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder645() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder646() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder647() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder648() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder649() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder650() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder651() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "right", obj7);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder652() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder653() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder654() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj5, "right", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder655() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder656() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder657() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder658() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "left", obj7);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder659() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder660() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj6, "right", obj7);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder661() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder662() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder663() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    setField(marg0, "right", null);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder664() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder665() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder666() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder667() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    setField(marg0, "right", null);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder668() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder669() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder670() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder671() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder672() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder673() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder674() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder675() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder676() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder677() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder678() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder679() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj5, "right", obj9);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder680() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", null);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder681() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder682() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder683() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder684() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder685() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder686() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder687() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder688() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder689() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder690() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder691() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder692() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder693() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "left", obj5);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder694() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "left", obj5);
    setField(obj3, "right", null);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder695() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj3, "right", obj8);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder696() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj3, "right", obj8);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder697() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder698() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder699() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder700() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder701() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder702() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder703() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder704() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder705() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj5, "right", obj8);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder706() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj5, "right", obj8);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder707() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder708() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder709() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder710() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder711() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder712() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder713() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder714() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder715() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder716() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder717() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj1, "right", obj7);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder718() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "left", obj8);
    setField(obj1, "right", obj7);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder719() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder720() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder721() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder722() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder723() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder724() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder725() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder726() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder727() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder728() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder729() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder730() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder731() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj5, "right", obj9);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder732() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder733() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder734() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder735() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder736() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder737() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder738() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder739() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder740() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder741() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder742() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder743() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder744() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder745() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder746() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", null);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder747() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj4, "right", obj8);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder748() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj4, "right", obj8);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder749() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder750() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder751() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder752() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder753() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder754() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder755() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder756() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder757() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder758() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder759() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder760() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder761() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder762() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder763() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder764() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder765() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder766() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder767() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder768() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder769() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj1, "right", obj7);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder770() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "left", obj8);
    setField(obj1, "right", obj7);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder771() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder772() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder773() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(obj1, "right", obj4);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder774() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder775() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder776() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder777() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder778() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder779() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder780() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder781() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder782() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder783() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj5, "right", obj9);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder784() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder785() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder786() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder787() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder788() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder789() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder790() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder791() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder792() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder793() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder794() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder795() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder796() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder797() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj2, "right", obj5);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder798() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder799() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj2, "right", obj8);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder800() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder801() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj2, "right", obj6);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder802() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj2, "right", obj6);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder803() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj2, "right", obj6);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder804() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj2, "right", obj6);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder805() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj2, "right", obj6);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder806() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj2, "right", obj6);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder807() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj2, "right", obj6);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder808() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj2, "right", obj6);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder809() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj2, "right", obj6);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder810() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj2, "right", obj6);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder811() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj1, "right", obj7);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder812() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "left", obj8);
    setField(obj1, "right", obj7);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder813() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder814() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder815() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder816() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder817() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder818() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder819() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder820() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder821() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder822() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder823() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder824() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder825() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "left", obj6);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder826() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "left", obj6);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj4, "right", obj9);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder827() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "left", obj6);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder828() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder829() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder830() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder831() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder832() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder833() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder834() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder835() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder836() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder837() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder838() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder839() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder840() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder841() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj2, "right", obj8);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder842() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder843() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder844() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder845() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder846() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder847() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder848() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder849() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder850() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder851() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder852() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder853() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder854() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder855() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder856() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder857() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder858() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj5, "right", obj9);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder859() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder860() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder861() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder862() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder863() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder864() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder865() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder866() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder867() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder868() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder869() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder870() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder871() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder872() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder873() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder874() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder875() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder876() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder877() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj4, "right", obj8);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder878() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj4, "right", obj8);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder879() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder880() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder881() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder882() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder883() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder884() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder885() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder886() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder887() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder888() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder889() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder890() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder891() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder892() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder893() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder894() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder895() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder896() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder897() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder898() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder899() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder900() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder901() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj3, "right", obj7);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder902() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj3, "right", obj7);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder903() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj3, "right", obj7);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder904() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj3, "right", obj7);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder905() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj3, "right", obj7);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder906() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder907() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj2, "right", obj8);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder908() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder909() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPostorder910() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.postorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder3() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder4() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder5() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder6() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder7() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder8() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder9() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder10() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder11() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder12() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder13() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder14() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder15() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder16() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder17() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder18() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder19() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder20() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder21() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder22() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder23() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder24() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "left", obj5);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder25() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "left", obj5);
    setField(obj3, "right", null);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder26() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj3, "right", obj8);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder27() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder28() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder29() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder30() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder31() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder32() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder33() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder34() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder35() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj5, "right", obj8);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder36() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj5, "right", obj8);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder37() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder38() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder39() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder40() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder41() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder42() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder43() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder44() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder45() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder46() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder47() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder48() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder49() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder50() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder51() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder52() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder53() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder54() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder55() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder56() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder57() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder58() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder59() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder60() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder61() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder62() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder63() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder64() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder65() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder66() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder67() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder68() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder69() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", null);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder70() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj4, "right", obj8);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder71() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder72() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder73() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder74() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder75() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder76() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder77() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder78() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder79() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder80() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder81() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder82() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder83() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder84() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder85() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder86() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder87() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder88() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder89() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder90() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder91() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder92() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder93() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder94() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder95() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder96() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder97() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder98() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder99() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder100() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder101() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder102() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder103() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder104() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder105() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder106() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder107() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder108() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder109() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder110() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder111() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder112() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj2, "right", obj5);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder113() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder114() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj2, "right", obj8);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder115() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder116() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "left", obj7);
    setField(obj2, "right", obj6);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder117() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj2, "right", obj6);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder118() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj2, "right", obj6);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder119() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj6, "right", obj7);
    setField(obj2, "right", obj6);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder120() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj2, "right", obj6);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder121() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj2, "right", obj6);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder122() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder123() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder124() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder125() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder126() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder127() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder128() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder129() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder130() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder131() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder132() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder133() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder134() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder135() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder136() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder137() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder138() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder139() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder140() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder141() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder142() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder143() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder144() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder145() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj2, "right", obj8);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder146() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder147() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder148() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder149() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder150() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder151() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder152() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder153() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder154() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder155() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder156() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder157() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj5, "right", obj9);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder158() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder159() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder160() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder161() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder162() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder163() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder164() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder165() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder166() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder167() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder168() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder169() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder170() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder171() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder172() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder173() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj4, "right", obj8);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder174() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj4, "right", obj8);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder175() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder176() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder177() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder178() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder179() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder180() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder181() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder182() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder183() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder184() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder185() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder186() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder187() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder188() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder189() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder190() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder191() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder192() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder193() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder194() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder195() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj3, "right", obj7);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder196() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj3, "right", obj7);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder197() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj3, "right", obj7);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder198() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder199() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj2, "right", obj8);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder200() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder201() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder202() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder203() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder204() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder205() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder206() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder207() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder208() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder209() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder210() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder211() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder212() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder213() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder214() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder215() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder216() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder217() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder218() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder219() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder220() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder221() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder222() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder223() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder224() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "left", obj5);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder225() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "left", obj5);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder226() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj3, "right", obj8);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder227() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder228() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder229() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder230() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder231() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder232() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder233() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder234() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder235() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj5, "right", obj8);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder236() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj5, "right", obj8);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder237() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder238() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder239() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder240() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder241() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder242() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj3, "right", obj6);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder243() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj3, "right", obj6);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder244() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj3, "right", obj6);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder245() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj3, "right", obj6);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder246() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj3, "right", obj6);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder247() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder248() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder249() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder250() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder251() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder252() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder253() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder254() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder255() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder256() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder257() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder258() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder259() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder260() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder261() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder262() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder263() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder264() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder265() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder266() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder267() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder268() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder269() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", null);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder270() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj4, "right", obj8);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder271() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder272() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder273() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder274() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder275() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder276() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder277() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder278() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "right", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder279() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder280() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder281() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder282() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder283() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder284() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder285() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder286() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder287() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder288() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder289() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder290() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder291() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder292() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder293() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder294() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder295() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder296() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder297() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder298() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder299() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder300() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder301() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder302() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder303() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder304() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder305() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder306() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder307() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder308() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder309() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder310() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder311() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder312() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(obj1, "right", obj5);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder313() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(obj1, "right", null);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder314() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj1, "right", obj8);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder315() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder316() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "left", obj7);
    setField(obj1, "right", obj6);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder317() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj1, "right", obj6);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder318() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj1, "right", obj6);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder319() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj6, "right", obj7);
    setField(obj1, "right", obj6);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder320() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj1, "right", obj6);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder321() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj1, "right", obj6);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder322() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "left", obj3);
    setField(obj1, "right", null);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder323() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "left", obj3);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder324() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder325() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder326() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder327() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder328() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder329() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder330() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder331() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder332() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder333() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder334() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder335() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder336() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder337() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder338() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder339() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder340() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder341() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder342() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder343() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder344() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(obj1, "right", null);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder345() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj1, "right", obj8);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder346() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder347() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder348() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder349() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder350() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder351() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder352() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder353() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder354() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder355() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder356() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder357() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj5, "right", obj9);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder358() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder359() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder360() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder361() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder362() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder363() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder364() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder365() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder366() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder367() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder368() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder369() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder370() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder371() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder372() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder373() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj4, "right", obj8);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder374() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj4, "right", obj8);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder375() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder376() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder377() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder378() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder379() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder380() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder381() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder382() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder383() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder384() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder385() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder386() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder387() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder388() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder389() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder390() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder391() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder392() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder393() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder394() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder395() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj3, "right", obj7);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder396() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj3, "right", obj7);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder397() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj3, "right", obj7);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder398() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", null);
    setField(obj1, "left", obj3);
    setField(obj1, "right", null);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder399() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", null);
    setField(obj1, "left", obj3);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj1, "right", obj8);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder400() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", null);
    setField(obj1, "left", obj3);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder401() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", null);
    setField(obj1, "left", obj3);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder402() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder403() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    setField(marg0, "right", null);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder404() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder405() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder406() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder407() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder408() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder409() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder410() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder411() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder412() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder413() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder414() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder415() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder416() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder417() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder418() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder419() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder420() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder421() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", null);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder422() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj4, "right", obj8);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder423() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder424() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder425() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder426() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder427() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "right", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder428() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder429() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder430() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder431() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder432() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder433() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder434() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder435() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(marg0, "right", obj4);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder436() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder437() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder438() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder439() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder440() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder441() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder442() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder443() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder444() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder445() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder446() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder447() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder448() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder449() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder450() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder451() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder452() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder453() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder454() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder455() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder456() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder457() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder458() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "left", obj7);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder459() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder460() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj6, "right", obj7);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder461() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder462() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder463() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    setField(marg0, "right", null);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder464() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj3);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder465() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder466() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder467() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder468() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder469() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder470() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder471() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder472() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder473() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder474() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder475() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder476() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder477() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder478() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder479() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder480() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder481() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder482() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder483() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder484() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder485() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder486() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder487() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder488() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder489() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder490() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder491() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder492() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder493() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder494() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder495() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder496() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj5, "right", obj9);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder497() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder498() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder499() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder500() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder501() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder502() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder503() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder504() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder505() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder506() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder507() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder508() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder509() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder510() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder511() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder512() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj4, "right", obj8);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder513() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj4, "right", obj8);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder514() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder515() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder516() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder517() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder518() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder519() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder520() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder521() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder522() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder523() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder524() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder525() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder526() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder527() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder528() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder529() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder530() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder531() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder532() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder533() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder534() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj3, "right", obj7);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder535() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj3, "right", obj7);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder536() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj3, "right", obj7);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder537() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder538() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder539() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder540() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder541() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder542() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder543() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder544() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder545() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder546() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder547() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder548() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder549() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder550() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder551() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder552() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder553() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder554() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder555() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder556() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder557() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder558() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder559() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder560() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "left", obj7);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder561() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder562() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj6, "right", obj7);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder563() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder564() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder565() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    setField(marg0, "right", null);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder566() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder567() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder568() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder569() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder570() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder571() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder572() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder573() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "left", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder574() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj4, "left", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder575() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "left", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder576() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "left", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder577() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj4, "left", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder578() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj4, "right", obj7);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder579() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj4, "right", obj7);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder580() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj4, "right", obj7);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder581() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj4, "right", obj7);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder582() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj4, "right", obj7);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder583() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder584() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder585() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder586() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder587() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder588() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder589() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder590() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder591() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder592() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder593() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder594() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder595() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder596() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder597() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder598() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj5, "right", obj9);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder599() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder600() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder601() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder602() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder603() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder604() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder605() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder606() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder607() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder608() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder609() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder610() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder611() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder612() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder613() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", null);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder614() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj4, "right", obj8);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder615() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj4, "right", obj8);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder616() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder617() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder618() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder619() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder620() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder621() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder622() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder623() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder624() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder625() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder626() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder627() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder628() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder629() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder630() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder631() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder632() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder633() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder634() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder635() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder636() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj2, "right", obj7);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder637() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj2, "right", obj7);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder638() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj2, "right", obj7);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder639() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "left", obj4);
    setField(obj2, "right", null);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder640() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "left", obj4);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder641() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder642() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder643() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder644() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder645() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder646() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder647() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder648() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder649() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder650() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder651() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "right", obj7);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder652() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder653() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder654() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj5, "right", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder655() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder656() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder657() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder658() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "left", obj7);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder659() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder660() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj6, "right", obj7);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder661() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder662() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder663() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    setField(marg0, "right", null);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder664() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder665() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder666() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(marg0, "right", obj6);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder667() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    setField(marg0, "right", null);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder668() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj2);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder669() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder670() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder671() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder672() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder673() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder674() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder675() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder676() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder677() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder678() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder679() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj5, "right", obj9);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder680() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", null);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder681() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder682() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder683() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder684() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder685() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder686() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder687() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder688() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder689() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder690() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder691() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder692() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder693() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "left", obj5);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder694() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "left", obj5);
    setField(obj3, "right", null);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder695() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj3, "right", obj8);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder696() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj3, "right", obj8);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder697() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder698() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder699() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder700() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder701() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder702() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder703() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder704() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder705() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj5, "right", obj8);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder706() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj5, "right", obj8);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder707() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder708() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder709() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder710() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder711() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder712() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder713() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder714() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder715() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder716() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder717() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj1, "right", obj7);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder718() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "left", obj8);
    setField(obj1, "right", obj7);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder719() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder720() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder721() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder722() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder723() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder724() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder725() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder726() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder727() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder728() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder729() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder730() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder731() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj5, "right", obj9);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder732() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder733() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder734() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder735() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder736() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder737() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder738() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder739() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder740() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder741() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder742() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder743() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder744() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder745() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder746() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", null);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder747() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj4, "right", obj8);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder748() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj4, "right", obj8);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder749() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder750() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder751() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder752() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder753() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder754() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder755() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder756() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder757() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder758() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder759() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder760() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder761() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder762() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder763() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder764() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder765() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder766() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder767() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder768() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder769() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj1, "right", obj7);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder770() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "left", obj8);
    setField(obj1, "right", obj7);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder771() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder772() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder773() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(obj1, "right", obj4);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder774() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder775() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder776() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder777() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder778() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder779() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder780() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder781() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder782() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder783() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj5, "right", obj9);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder784() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder785() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder786() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder787() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder788() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder789() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder790() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder791() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder792() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder793() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder794() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder795() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder796() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder797() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj2, "right", obj5);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder798() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder799() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj2, "right", obj8);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder800() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder801() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj2, "right", obj6);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder802() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj2, "right", obj6);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder803() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj2, "right", obj6);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder804() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj2, "right", obj6);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder805() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj2, "right", obj6);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder806() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj2, "right", obj6);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder807() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj2, "right", obj6);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder808() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj2, "right", obj6);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder809() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj2, "right", obj6);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder810() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj2, "right", obj6);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder811() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj1, "right", obj7);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder812() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "left", obj8);
    setField(obj1, "right", obj7);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder813() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder814() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder815() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder816() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder817() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder818() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder819() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder820() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder821() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder822() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder823() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder824() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder825() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "left", obj6);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder826() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "left", obj6);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj4, "right", obj9);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder827() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "left", obj6);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder828() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder829() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder830() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder831() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder832() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder833() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder834() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder835() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder836() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder837() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder838() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder839() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder840() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder841() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj2, "right", obj8);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder842() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder843() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder844() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder845() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder846() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder847() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder848() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder849() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder850() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder851() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder852() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder853() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder854() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder855() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder856() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder857() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder858() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj5, "right", obj9);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder859() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder860() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder861() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder862() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder863() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder864() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder865() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder866() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder867() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder868() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder869() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder870() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder871() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder872() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder873() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder874() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder875() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder876() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder877() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj4, "right", obj8);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder878() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj4, "right", obj8);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder879() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder880() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder881() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder882() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder883() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder884() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder885() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder886() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder887() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder888() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder889() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder890() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder891() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder892() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder893() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder894() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder895() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder896() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder897() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder898() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder899() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder900() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder901() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj3, "right", obj7);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder902() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj3, "right", obj7);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder903() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj3, "right", obj7);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder904() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj3, "right", obj7);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder905() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj3, "right", obj7);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder906() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder907() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj2, "right", obj8);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder908() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder909() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testPreorder910() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int[] retval = BinaryTree.preorder(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSize17() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize18() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize19() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize20() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize21() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize22() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize23() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize24() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize25() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize26() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize27() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize28() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize29() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize30() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize31() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj5, "right", obj9);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize32() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", null);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize33() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize34() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize35() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize36() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize37() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize38() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize39() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize40() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize41() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize42() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize43() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize44() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize45() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize46() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize47() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize48() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "left", obj5);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize49() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "left", obj5);
    setField(obj3, "right", null);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize50() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj3, "right", obj8);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize51() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj3, "right", obj8);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize52() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize53() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize54() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize55() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize56() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize57() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize58() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize59() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize60() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize61() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj5, "right", obj8);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize62() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj5, "right", obj8);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize63() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize64() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize65() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize66() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize67() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize68() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize69() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize70() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize71() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize72() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize73() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize74() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize75() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize76() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize77() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize78() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize79() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize80() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize81() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize82() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize83() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize84() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize85() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize86() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize87() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize88() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj5, "right", obj9);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize89() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize90() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize91() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize92() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize93() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize94() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize95() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize96() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize97() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize98() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize99() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize100() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize101() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize102() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize103() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize104() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize105() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize106() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", null);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize107() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj4, "right", obj8);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize108() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj4, "right", obj8);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize109() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize110() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize111() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize112() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize113() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize114() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize115() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize116() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize117() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize118() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize119() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize120() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize121() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize122() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize123() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize124() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize125() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize126() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize127() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize128() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize129() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize130() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize131() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize132() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize133() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize134() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize135() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize136() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize137() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize138() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize139() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize140() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize141() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize142() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize143() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize144() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize145() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj5, "right", obj9);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize146() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize147() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize148() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize149() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize150() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize151() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize152() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize153() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize154() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize155() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize156() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize157() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize158() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize159() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize160() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize161() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize162() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj2, "right", obj5);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize163() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize164() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj2, "right", obj8);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize165() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize166() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj2, "right", obj6);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize167() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj2, "right", obj6);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize168() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj2, "right", obj6);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize169() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj2, "right", obj6);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize170() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj2, "right", obj6);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize171() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj2, "right", obj6);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize172() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj2, "right", obj6);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize173() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj2, "right", obj6);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize174() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj2, "right", obj6);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize175() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj2, "right", obj6);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize176() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize177() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize178() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize179() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize180() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize181() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize182() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize183() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize184() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize185() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize186() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize187() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize188() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize189() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize190() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "left", obj6);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize191() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "left", obj6);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj4, "right", obj9);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize192() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "left", obj6);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize193() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize194() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize195() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize196() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize197() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize198() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize199() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize200() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize201() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize202() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize203() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize204() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize205() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize206() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize207() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize208() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize209() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj2, "right", obj8);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize210() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize211() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize212() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize213() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize214() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize215() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize216() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize217() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 10;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize218() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize219() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize220() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize221() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize222() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize223() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize224() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj7, "right", obj10);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize225() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize226() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize227() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize228() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj5, "right", obj9);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize229() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize230() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize231() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize232() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize233() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize234() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize235() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize236() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize237() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize238() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize239() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize240() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize241() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize242() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize243() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize244() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize245() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize246() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize247() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize248() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize249() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize250() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize251() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize252() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize253() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize254() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize255() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize256() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize257() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj4, "right", obj8);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize258() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj4, "right", obj8);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize259() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "right", obj9);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize260() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "right", obj9);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize261() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize262() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj7, "right", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize263() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "right", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize264() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize265() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize266() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize267() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize268() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize269() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "left", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize270() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "left", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize271() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize272() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize273() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize274() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize275() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize276() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize277() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize278() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize279() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize280() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize281() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize282() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize283() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize284() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize285() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize286() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize287() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize288() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize289() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize290() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize291() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize292() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize293() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj3, "right", obj7);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize294() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj3, "right", obj7);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize295() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj3, "right", obj7);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize296() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj3, "right", obj7);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize297() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj3, "right", obj7);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize298() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize299() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj2, "right", obj8);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize300() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize301() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", obj4);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize302() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize303() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize304() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize305() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize306() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize307() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize308() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize309() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize310() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize311() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize312() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize313() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize314() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize315() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize316() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize317() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj5, "right", obj9);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize318() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", null);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize319() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize320() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize321() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize322() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize323() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize324() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize325() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize326() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize327() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize328() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize329() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize330() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize331() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize332() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize333() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize334() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "left", obj5);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize335() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "left", obj5);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize336() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj3, "right", obj8);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize337() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj3, "right", obj8);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize338() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize339() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize340() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize341() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize342() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize343() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize344() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize345() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize346() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize347() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj5, "right", obj8);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize348() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj5, "right", obj8);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize349() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize350() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize351() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize352() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize353() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize354() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize355() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj3, "right", obj6);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize356() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj3, "right", obj6);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize357() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj3, "right", obj6);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize358() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj3, "right", obj6);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize359() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj3, "right", obj6);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize360() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize361() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize362() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize363() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize364() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize365() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize366() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize367() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize368() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize369() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize370() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize371() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize372() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize373() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize374() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj5, "right", obj9);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize375() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize376() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize377() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize378() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize379() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize380() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize381() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize382() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize383() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize384() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize385() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize386() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize387() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize388() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize389() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize390() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize391() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize392() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", null);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize393() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj4, "right", obj8);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize394() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj4, "right", obj8);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize395() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize396() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize397() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize398() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize399() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize400() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize401() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize402() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize403() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "right", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize404() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize405() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize406() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize407() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize408() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize409() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize410() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize411() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize412() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize413() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize414() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize415() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize416() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize417() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize418() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize419() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize420() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize421() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize422() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize423() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize424() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize425() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize426() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize427() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize428() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize429() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize430() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize431() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj5, "right", obj9);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize432() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize433() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize434() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize435() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize436() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize437() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize438() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize439() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize440() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize441() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize442() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize443() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize444() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize445() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize446() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize447() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize448() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(obj1, "right", obj5);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize449() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(obj1, "right", null);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize450() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj1, "right", obj8);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize451() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj1, "left", obj3);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize452() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj1, "right", obj6);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize453() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj1, "right", obj6);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize454() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj1, "right", obj6);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize455() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj1, "right", obj6);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize456() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj1, "right", obj6);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize457() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj1, "right", obj6);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize458() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj1, "right", obj6);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize459() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj1, "right", obj6);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize460() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj1, "right", obj6);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize461() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj1, "right", obj6);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize462() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "left", obj3);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize463() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize464() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize465() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize466() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize467() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize468() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize469() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize470() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize471() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize472() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize473() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize474() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize475() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize476() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "left", obj6);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize477() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "left", obj6);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj4, "right", obj9);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize478() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "left", obj6);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize479() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize480() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize481() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize482() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize483() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize484() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize485() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize486() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize487() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize488() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize489() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize490() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize491() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize492() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize493() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize494() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(obj1, "right", null);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize495() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj1, "right", obj8);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize496() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize497() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize498() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize499() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize500() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize501() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize502() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize503() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 10;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize504() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize505() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize506() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize507() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize508() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize509() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize510() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj7, "right", obj10);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize511() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize512() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize513() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize514() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj5, "right", obj9);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize515() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize516() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize517() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize518() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize519() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize520() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize521() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize522() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize523() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize524() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize525() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize526() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize527() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize528() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize529() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize530() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize531() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize532() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize533() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize534() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize535() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize536() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize537() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize538() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize539() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize540() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize541() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize542() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize543() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj4, "right", obj8);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize544() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj4, "right", obj8);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize545() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "right", obj9);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize546() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "right", obj9);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize547() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize548() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj7, "right", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize549() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "right", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize550() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize551() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize552() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize553() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize554() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize555() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "left", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize556() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "left", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize557() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize558() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize559() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize560() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize561() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize562() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize563() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize564() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize565() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize566() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize567() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize568() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize569() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize570() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize571() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize572() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize573() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize574() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize575() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize576() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize577() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize578() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize579() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj3, "right", obj7);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize580() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj3, "right", obj7);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize581() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj3, "right", obj7);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize582() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj3, "right", obj7);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize583() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj3, "right", obj7);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize584() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", null);
    setField(obj1, "left", obj3);
    setField(obj1, "right", null);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize585() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", null);
    setField(obj1, "left", obj3);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj1, "right", obj8);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize586() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", null);
    setField(obj1, "left", obj3);
    setField(obj1, "right", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize587() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", null);
    setField(obj1, "left", obj3);
    setField(obj1, "right", obj4);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize588() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    setField(marg0, "left", null);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", obj4);
    setField(obj1, "left", obj3);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize589() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize590() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize591() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize592() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize593() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize594() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize595() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize596() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize597() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize598() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize599() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize600() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize601() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize602() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize603() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize604() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize605() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize606() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize607() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize608() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize609() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize610() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", obj5);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize611() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", null);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize612() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj4, "right", obj8);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize613() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize614() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize615() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize616() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize617() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize618() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize619() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize620() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "right", obj5);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize621() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize622() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize623() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize624() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize625() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize626() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize627() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize628() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize629() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize630() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize631() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize632() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize633() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize634() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize635() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize636() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize637() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize638() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize639() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize640() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize641() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize642() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize643() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize644() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize645() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize646() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize647() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj5, "right", obj9);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize648() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize649() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize650() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize651() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize652() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize653() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize654() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize655() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize656() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize657() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize658() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize659() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize660() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize661() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize662() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize663() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize664() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj5);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize665() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    setField(marg0, "right", null);
    int retval = BinaryTree.size(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize666() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(marg0, "right", obj8);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize667() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj3);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize668() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize669() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "left", obj7);
    setField(marg0, "right", obj6);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize670() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(marg0, "right", obj6);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize671() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(marg0, "right", obj6);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize672() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj6, "right", obj7);
    setField(marg0, "right", obj6);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize673() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(marg0, "right", obj6);
    int retval = BinaryTree.size(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize674() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(marg0, "right", obj6);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize675() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj3);
    int retval = BinaryTree.size(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize676() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize677() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize678() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize679() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize680() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize681() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize682() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize683() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize684() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize685() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize686() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize687() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize688() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize689() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize690() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "left", obj6);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize691() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "left", obj6);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj4, "right", obj9);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize692() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "left", obj6);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize693() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize694() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize695() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize696() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize697() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize698() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize699() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize700() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize701() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj4, "right", obj7);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize702() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize703() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize704() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize705() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize706() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize707() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize708() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    setField(marg0, "right", null);
    int retval = BinaryTree.size(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize709() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(marg0, "right", obj8);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize710() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj3);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize711() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize712() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize713() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize714() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize715() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize716() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize717() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize718() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 10;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize719() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize720() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize721() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize722() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize723() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize724() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize725() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj7, "right", obj10);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize726() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize727() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize728() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize729() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj5, "right", obj9);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize730() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize731() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize732() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize733() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize734() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize735() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize736() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize737() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize738() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize739() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize740() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize741() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize742() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize743() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize744() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize745() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize746() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize747() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize748() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize749() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize750() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize751() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize752() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize753() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize754() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize755() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize756() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize757() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize758() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj4, "right", obj8);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize759() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj4, "right", obj8);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize760() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "right", obj9);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize761() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "right", obj9);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize762() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize763() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj7, "right", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize764() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "right", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize765() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize766() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize767() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize768() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize769() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize770() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "left", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize771() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "left", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize772() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize773() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize774() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize775() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize776() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize777() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize778() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize779() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize780() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize781() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize782() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize783() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize784() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize785() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize786() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize787() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize788() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize789() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize790() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize791() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize792() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize793() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj3, "left", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize794() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj3, "right", obj7);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize795() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj3, "right", obj7);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize796() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj3, "right", obj7);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize797() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj3, "right", obj7);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize798() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj3, "right", obj7);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize799() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    setField(marg0, "right", null);
    int retval = BinaryTree.size(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize800() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(marg0, "right", obj8);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize801() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj3);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize802() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize803() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", null);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize804() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj3, "left", obj4);
    setField(obj3, "right", obj4);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize805() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize806() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize807() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize808() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize809() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize810() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize811() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize812() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize813() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize814() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize815() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize816() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize817() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize818() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize819() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj5, "right", obj9);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize820() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", null);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize821() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize822() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize823() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize824() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize825() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize826() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize827() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize828() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize829() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize830() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize831() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize832() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize833() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize834() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize835() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize836() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj5);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize837() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    setField(marg0, "right", null);
    int retval = BinaryTree.size(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize838() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(marg0, "right", obj8);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize839() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize840() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj2, "right", obj5);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize841() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "left", obj7);
    setField(marg0, "right", obj6);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize842() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(marg0, "right", obj6);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize843() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(marg0, "right", obj6);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize844() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj6, "right", obj7);
    setField(marg0, "right", obj6);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize845() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(marg0, "right", obj6);
    int retval = BinaryTree.size(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize846() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(marg0, "right", obj6);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize847() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize848() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize849() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize850() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize851() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize852() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize853() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize854() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize855() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize856() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize857() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize858() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize859() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "left", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize860() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "left", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize861() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj4, "left", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize862() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "left", obj6);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize863() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "left", obj6);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj4, "right", obj9);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize864() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "left", obj6);
    setField(obj4, "right", null);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize865() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "left", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize866() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "left", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize867() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj4, "left", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize868() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj4, "right", obj7);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize869() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj4, "right", obj7);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize870() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj4, "right", obj7);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize871() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj4, "right", obj7);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize872() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj4, "right", obj7);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize873() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj4, "right", obj7);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize874() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize875() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize876() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize877() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize878() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize879() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize880() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    setField(marg0, "right", null);
    int retval = BinaryTree.size(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize881() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(marg0, "right", obj8);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize882() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize883() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize884() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize885() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize886() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize887() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize888() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize889() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize890() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 10;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize891() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize892() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize893() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize894() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize895() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize896() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize897() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj7, "right", obj10);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize898() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize899() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize900() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize901() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj5, "right", obj9);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize902() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize903() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize904() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize905() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize906() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize907() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize908() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize909() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize910() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize911() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize912() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize913() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize914() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize915() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize916() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize917() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize918() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize919() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize920() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize921() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize922() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize923() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize924() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize925() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize926() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize927() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize928() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize929() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", null);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize930() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj4, "right", obj8);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize931() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj4, "right", obj8);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize932() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "right", obj9);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize933() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "right", obj9);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize934() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize935() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj7, "right", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize936() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "right", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize937() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize938() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize939() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize940() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize941() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize942() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "left", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize943() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "left", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize944() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize945() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize946() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize947() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize948() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize949() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize950() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize951() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize952() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize953() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize954() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize955() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize956() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize957() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize958() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize959() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize960() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize961() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize962() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize963() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize964() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize965() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj2, "left", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize966() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj2, "right", obj7);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize967() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj2, "right", obj7);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize968() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj2, "right", obj7);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize969() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj2, "right", obj7);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize970() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "left", obj4);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj2, "right", obj7);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize971() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "left", obj4);
    setField(obj2, "right", null);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    setField(marg0, "right", null);
    int retval = BinaryTree.size(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize972() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "left", obj4);
    setField(obj2, "right", null);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(marg0, "right", obj8);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize973() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "left", obj4);
    setField(obj2, "right", null);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize974() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "left", obj4);
    setField(obj2, "right", null);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize975() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "left", obj4);
    setField(obj2, "right", null);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize976() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    setField(obj1, "left", null);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "left", obj4);
    setField(obj2, "right", obj4);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize977() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize978() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize979() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize980() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize981() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize982() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize983() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize984() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize985() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize986() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize987() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize988() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize989() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize990() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize991() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize992() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize993() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize994() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize995() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize996() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize997() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize998() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj5);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize999() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    setField(marg0, "right", null);
    int retval = BinaryTree.size(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1000() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(marg0, "right", obj8);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1001() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1002() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj1, "right", obj5);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1003() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "left", obj7);
    setField(marg0, "right", obj6);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1004() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(marg0, "right", obj6);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1005() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(marg0, "right", obj6);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1006() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj6, "right", obj7);
    setField(marg0, "right", obj6);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1007() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(marg0, "right", obj6);
    int retval = BinaryTree.size(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1008() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj6, "right", obj8);
    setField(marg0, "right", obj6);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1009() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1010() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1011() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(marg0, "right", obj6);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1012() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    setField(marg0, "right", null);
    int retval = BinaryTree.size(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1013() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1014() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1015() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1016() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1017() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1018() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1019() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1020() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 10;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1021() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1022() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1023() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1024() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1025() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1026() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1027() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj7, "right", obj10);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1028() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1029() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1030() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1031() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj5, "right", obj9);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1032() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", null);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1033() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1034() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1035() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1036() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1037() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1038() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1039() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1040() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1041() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1042() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1043() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1044() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1045() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1046() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1047() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1048() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1049() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1050() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1051() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1052() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1053() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1054() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1055() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1056() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1057() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "left", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1058() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "left", obj5);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1059() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "left", obj5);
    setField(obj3, "right", null);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1060() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj3, "right", obj8);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1061() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj3, "right", obj8);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1062() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "right", obj9);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1063() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "right", obj9);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1064() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1065() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj7, "right", obj8);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1066() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "right", obj8);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1067() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1068() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1069() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1070() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1071() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1072() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "left", obj9);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1073() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "left", obj9);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1074() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1075() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1076() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj5, "right", obj8);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1077() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj5, "right", obj8);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1078() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj5, "right", obj8);
    setField(obj3, "right", obj5);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1079() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1080() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1081() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1082() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1083() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1084() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1085() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1086() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1087() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1088() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1089() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1090() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1091() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1092() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1093() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1094() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1095() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj3, "right", obj6);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1096() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj1, "right", obj7);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1097() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj1, "right", obj7);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1098() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj1, "right", obj7);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1099() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    setField(marg0, "right", null);
    int retval = BinaryTree.size(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1100() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(marg0, "right", obj8);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1101() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj3);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1102() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1103() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1104() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1105() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1106() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1107() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1108() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1109() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1110() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1111() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 10;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1112() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1113() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1114() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1115() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1116() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1117() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1118() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj7, "right", obj10);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1119() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1120() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1121() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1122() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj5, "right", obj9);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1123() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1124() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1125() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1126() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1127() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1128() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1129() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1130() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1131() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1132() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1133() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1134() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1135() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1136() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1137() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1138() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1139() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1140() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1141() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1142() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1143() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1144() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1145() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1146() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1147() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1148() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj4, "left", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1149() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1150() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    setField(obj4, "right", null);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1151() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj4, "right", obj8);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1152() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "left", obj5);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj4, "right", obj8);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1153() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "right", obj9);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1154() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "right", obj9);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1155() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1156() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj7, "right", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1157() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "right", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1158() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1159() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1160() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1161() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1162() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj7, "left", obj8);
    setField(obj5, "left", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1163() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "left", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1164() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "left", obj9);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1165() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj5, "right", obj7);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1166() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1167() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1168() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1169() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj5, "right", obj8);
    setField(obj4, "right", obj5);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1170() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1171() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1172() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1173() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1174() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1175() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1176() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1177() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1178() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1179() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1180() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1181() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1182() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1183() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1184() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1185() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1186() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj4, "right", obj6);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1187() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj1, "right", obj7);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1188() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj1, "right", obj7);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1189() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj1, "right", obj7);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1190() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    setField(marg0, "right", null);
    int retval = BinaryTree.size(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1191() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(marg0, "right", obj8);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1192() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1193() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj4);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1194() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1195() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1196() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    setField(obj2, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    setField(obj4, "left", null);
    setField(obj4, "right", null);
    setField(obj2, "right", obj4);
    setField(obj1, "left", obj2);
    setField(obj1, "right", obj4);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1197() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1198() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1199() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1200() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1201() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1202() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 10;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1203() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1204() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1205() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1206() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1207() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1208() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1209() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj7, "right", obj10);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1210() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1211() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "right", obj7);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1212() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1213() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj5, "right", obj9);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1214() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "left", obj6);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1215() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1216() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1217() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1218() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1219() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj6, "right", obj8);
    setField(obj5, "left", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1220() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1221() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "right", obj9);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1222() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1223() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1224() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "right", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1225() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1226() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1227() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1228() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1229() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj7, "left", obj8);
    setField(obj5, "right", obj7);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1230() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1231() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj6, "right", obj9);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1232() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1233() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1234() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1235() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1236() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1237() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "right", obj10);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1238() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "right", obj9);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1239() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj8, "right", null);
    setField(obj6, "left", obj8);
    setField(obj5, "right", obj6);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1240() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj2, "right", obj5);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1241() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1242() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj2, "right", obj8);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1243() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj2, "right", obj8);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1244() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj5_carg0 = 0;
    BinaryTree.Node obj5 = new BinaryTree.Node(obj5_carg0);
    setField(obj5, "left", null);
    setField(obj5, "right", null);
    setField(obj3, "right", obj5);
    setField(obj2, "left", obj3);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1245() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj2, "right", obj6);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1246() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj2, "right", obj6);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1247() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj2, "right", obj6);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1248() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj2, "right", obj6);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1249() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj2, "right", obj6);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1250() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj6, "left", obj7);
    setField(obj2, "right", obj6);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1251() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj7, "left", obj9);
    setField(obj6, "right", obj7);
    setField(obj2, "right", obj6);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1252() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj6, "right", obj7);
    setField(obj2, "right", obj6);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1253() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    setField(obj6, "right", null);
    setField(obj2, "right", obj6);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1254() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj6, "right", obj8);
    setField(obj2, "right", obj6);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1255() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    setField(obj6, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj6, "right", obj8);
    setField(obj2, "right", obj6);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1256() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj1, "right", obj7);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1257() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj8, "left", obj9);
    setField(obj7, "left", obj8);
    setField(obj1, "right", obj7);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1258() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(obj8, "left", null);
    setField(obj7, "left", obj8);
    setField(obj1, "right", obj7);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1259() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    setField(marg0, "right", null);
    int retval = BinaryTree.size(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1260() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    setField(marg0, "right", obj8);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1261() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj3);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1262() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj2);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1263() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", null);
    setField(marg0, "left", obj1);
    setField(marg0, "right", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1264() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", obj3);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1265() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", null);
    setField(obj1, "left", obj2);
    setField(obj1, "right", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1266() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    setField(obj3, "right", null);
    setField(obj2, "left", obj3);
    setField(obj2, "right", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1267() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj9, "left", obj10);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1268() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj9_carg0 = 0;
    BinaryTree.Node obj9 = new BinaryTree.Node(obj9_carg0);
    setField(obj9, "left", null);
    setField(obj7, "right", obj9);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1269() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    setField(obj7, "right", null);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSize1270() throws Exception {
    Integer marg0_carg0 = 0;
    BinaryTree.Node marg0 = new BinaryTree.Node(marg0_carg0);
    Integer obj1_carg0 = 0;
    BinaryTree.Node obj1 = new BinaryTree.Node(obj1_carg0);
    Integer obj2_carg0 = 0;
    BinaryTree.Node obj2 = new BinaryTree.Node(obj2_carg0);
    Integer obj3_carg0 = 0;
    BinaryTree.Node obj3 = new BinaryTree.Node(obj3_carg0);
    setField(obj3, "left", null);
    Integer obj4_carg0 = 0;
    BinaryTree.Node obj4 = new BinaryTree.Node(obj4_carg0);
    Integer obj6_carg0 = 0;
    BinaryTree.Node obj6 = new BinaryTree.Node(obj6_carg0);
    Integer obj7_carg0 = 0;
    BinaryTree.Node obj7 = new BinaryTree.Node(obj7_carg0);
    setField(obj7, "left", null);
    Integer obj8_carg0 = 0;
    BinaryTree.Node obj8 = new BinaryTree.Node(obj8_carg0);
    Integer obj10_carg0 = 0;
    BinaryTree.Node obj10 = new BinaryTree.Node(obj10_carg0);
    setField(obj8, "left", obj10);
    setField(obj7, "right", obj8);
    setField(obj6, "left", obj7);
    setField(obj4, "left", obj6);
    setField(obj3, "right", obj4);
    setField(obj2, "left", obj3);
    setField(obj1, "left", obj2);
    setField(marg0, "left", obj1);
    int retval = BinaryTree.size(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }
}
