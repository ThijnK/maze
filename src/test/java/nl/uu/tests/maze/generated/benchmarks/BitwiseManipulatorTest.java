// Auto-generated by MAZE
package nl.uu.tests.maze.generated.benchmarks;

import java.lang.Exception;
import nl.uu.maze.benchmarks.BitwiseManipulator;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class BitwiseManipulatorTest {
  @Test
  public void testLowestSetBit1() throws Exception {
    int marg0 = 0;
    int retval = BitwiseManipulator.lowestSetBit(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHighestSetBit1() throws Exception {
    int marg0 = 0;
    int retval = BitwiseManipulator.highestSetBit(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testTestBitPattern1() throws Exception {
    int marg0 = 10;
    boolean retval = BitwiseManipulator.testBitPattern(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits1() throws Exception {
    int marg0 = 0;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testTestBitPattern2() throws Exception {
    int marg0 = 4;
    boolean retval = BitwiseManipulator.testBitPattern(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits2() throws Exception {
    long marg0 = 0L;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testRotateRight1() throws Exception {
    int marg0 = 0;
    int marg1 = 0;
    int retval = BitwiseManipulator.rotateRight(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testTestBitPattern3() throws Exception {
    int marg0 = -2147483647;
    boolean retval = BitwiseManipulator.testBitPattern(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testTestBitPattern4() throws Exception {
    int marg0 = 1;
    boolean retval = BitwiseManipulator.testBitPattern(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLowestSetBit2() throws Exception {
    int marg0 = 1;
    int retval = BitwiseManipulator.lowestSetBit(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testRotateLeft1() throws Exception {
    int marg0 = 0;
    int marg1 = 0;
    int retval = BitwiseManipulator.rotateLeft(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testExtractBitfield1() throws Exception {
    int marg0 = 0;
    int marg1 = 0;
    int marg2 = 0;
    int retval = BitwiseManipulator.extractBitfield(marg0, marg1, marg2);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits3() throws Exception {
    int marg0 = 1;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMaskRange1() throws Exception {
    long marg0 = 0L;
    int marg1 = 0;
    int marg2 = 0;
    long retval = BitwiseManipulator.maskRange(marg0, marg1, marg2);

    long expected = 0L;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHighestSetBit2() throws Exception {
    int marg0 = 1;
    int retval = BitwiseManipulator.highestSetBit(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLowestSetBit3() throws Exception {
    int marg0 = 2;
    int retval = BitwiseManipulator.lowestSetBit(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits4() throws Exception {
    int marg0 = 2;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testParity1() throws Exception {
    int marg0 = 0;
    int retval = BitwiseManipulator.parity(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSetBitfield1() throws Exception {
    int marg0 = 0;
    int marg1 = 0;
    int marg2 = 0;
    int marg3 = 0;
    int retval = BitwiseManipulator.setBitfield(marg0, marg1, marg2, marg3);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits5() throws Exception {
    long marg0 = 1L;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHighestSetBit3() throws Exception {
    int marg0 = 2;
    int retval = BitwiseManipulator.highestSetBit(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLowestSetBit4() throws Exception {
    int marg0 = 4;
    int retval = BitwiseManipulator.lowestSetBit(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHighestSetBit4() throws Exception {
    int marg0 = 4;
    int retval = BitwiseManipulator.highestSetBit(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits6() throws Exception {
    int marg0 = 4;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLowestSetBit5() throws Exception {
    int marg0 = 8;
    int retval = BitwiseManipulator.lowestSetBit(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHighestSetBit5() throws Exception {
    int marg0 = 8;
    int retval = BitwiseManipulator.highestSetBit(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits7() throws Exception {
    long marg0 = 2L;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits8() throws Exception {
    int marg0 = 8;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHighestSetBit6() throws Exception {
    int marg0 = 16;
    int retval = BitwiseManipulator.highestSetBit(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLowestSetBit6() throws Exception {
    int marg0 = 16;
    int retval = BitwiseManipulator.lowestSetBit(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits9() throws Exception {
    int marg0 = 16;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHighestSetBit7() throws Exception {
    int marg0 = 32;
    int retval = BitwiseManipulator.highestSetBit(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLowestSetBit7() throws Exception {
    int marg0 = 32;
    int retval = BitwiseManipulator.lowestSetBit(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits10() throws Exception {
    long marg0 = 4L;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHighestSetBit8() throws Exception {
    int marg0 = 64;
    int retval = BitwiseManipulator.highestSetBit(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits11() throws Exception {
    int marg0 = 32;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLowestSetBit8() throws Exception {
    int marg0 = 64;
    int retval = BitwiseManipulator.lowestSetBit(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHighestSetBit9() throws Exception {
    int marg0 = 128;
    int retval = BitwiseManipulator.highestSetBit(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits12() throws Exception {
    int marg0 = 64;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits13() throws Exception {
    long marg0 = 8L;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHighestSetBit10() throws Exception {
    int marg0 = 256;
    int retval = BitwiseManipulator.highestSetBit(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLowestSetBit9() throws Exception {
    int marg0 = 128;
    int retval = BitwiseManipulator.lowestSetBit(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits14() throws Exception {
    int marg0 = 128;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHighestSetBit11() throws Exception {
    int marg0 = 512;
    int retval = BitwiseManipulator.highestSetBit(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLowestSetBit10() throws Exception {
    int marg0 = 256;
    int retval = BitwiseManipulator.lowestSetBit(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHighestSetBit12() throws Exception {
    int marg0 = 1024;
    int retval = BitwiseManipulator.highestSetBit(marg0);

    int expected = 10;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits15() throws Exception {
    int marg0 = 256;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits16() throws Exception {
    long marg0 = 16L;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLowestSetBit11() throws Exception {
    int marg0 = 512;
    int retval = BitwiseManipulator.lowestSetBit(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHighestSetBit13() throws Exception {
    int marg0 = 2048;
    int retval = BitwiseManipulator.highestSetBit(marg0);

    int expected = 11;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits17() throws Exception {
    int marg0 = 512;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHighestSetBit14() throws Exception {
    int marg0 = 4096;
    int retval = BitwiseManipulator.highestSetBit(marg0);

    int expected = 12;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLowestSetBit12() throws Exception {
    int marg0 = 1024;
    int retval = BitwiseManipulator.lowestSetBit(marg0);

    int expected = 10;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits18() throws Exception {
    long marg0 = 32L;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits19() throws Exception {
    int marg0 = 1024;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHighestSetBit15() throws Exception {
    int marg0 = 8192;
    int retval = BitwiseManipulator.highestSetBit(marg0);

    int expected = 13;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLowestSetBit13() throws Exception {
    int marg0 = 2048;
    int retval = BitwiseManipulator.lowestSetBit(marg0);

    int expected = 11;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHighestSetBit16() throws Exception {
    int marg0 = 16384;
    int retval = BitwiseManipulator.highestSetBit(marg0);

    int expected = 14;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits20() throws Exception {
    int marg0 = 2048;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLowestSetBit14() throws Exception {
    int marg0 = 4096;
    int retval = BitwiseManipulator.lowestSetBit(marg0);

    int expected = 12;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits21() throws Exception {
    long marg0 = 64L;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHighestSetBit17() throws Exception {
    int marg0 = 32768;
    int retval = BitwiseManipulator.highestSetBit(marg0);

    int expected = 15;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits22() throws Exception {
    int marg0 = 4096;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHighestSetBit18() throws Exception {
    int marg0 = 65536;
    int retval = BitwiseManipulator.highestSetBit(marg0);

    int expected = 16;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLowestSetBit15() throws Exception {
    int marg0 = 8192;
    int retval = BitwiseManipulator.lowestSetBit(marg0);

    int expected = 13;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits23() throws Exception {
    int marg0 = 8192;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHighestSetBit19() throws Exception {
    int marg0 = 131072;
    int retval = BitwiseManipulator.highestSetBit(marg0);

    int expected = 17;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits24() throws Exception {
    long marg0 = 128L;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLowestSetBit16() throws Exception {
    int marg0 = 16384;
    int retval = BitwiseManipulator.lowestSetBit(marg0);

    int expected = 14;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHighestSetBit20() throws Exception {
    int marg0 = 262144;
    int retval = BitwiseManipulator.highestSetBit(marg0);

    int expected = 18;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits25() throws Exception {
    int marg0 = 16384;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLowestSetBit17() throws Exception {
    int marg0 = 32768;
    int retval = BitwiseManipulator.lowestSetBit(marg0);

    int expected = 15;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHighestSetBit21() throws Exception {
    int marg0 = 524288;
    int retval = BitwiseManipulator.highestSetBit(marg0);

    int expected = 19;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits26() throws Exception {
    int marg0 = 32768;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits27() throws Exception {
    long marg0 = 256L;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHighestSetBit22() throws Exception {
    int marg0 = 1048576;
    int retval = BitwiseManipulator.highestSetBit(marg0);

    int expected = 20;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLowestSetBit18() throws Exception {
    int marg0 = 65536;
    int retval = BitwiseManipulator.lowestSetBit(marg0);

    int expected = 16;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits28() throws Exception {
    int marg0 = 65536;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHighestSetBit23() throws Exception {
    int marg0 = 2097152;
    int retval = BitwiseManipulator.highestSetBit(marg0);

    int expected = 21;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLowestSetBit19() throws Exception {
    int marg0 = 131072;
    int retval = BitwiseManipulator.lowestSetBit(marg0);

    int expected = 17;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits29() throws Exception {
    long marg0 = 512L;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHighestSetBit24() throws Exception {
    int marg0 = 4194304;
    int retval = BitwiseManipulator.highestSetBit(marg0);

    int expected = 22;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits30() throws Exception {
    int marg0 = 131072;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLowestSetBit20() throws Exception {
    int marg0 = 262144;
    int retval = BitwiseManipulator.lowestSetBit(marg0);

    int expected = 18;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHighestSetBit25() throws Exception {
    int marg0 = 8388608;
    int retval = BitwiseManipulator.highestSetBit(marg0);

    int expected = 23;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits31() throws Exception {
    int marg0 = 262144;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHighestSetBit26() throws Exception {
    int marg0 = 16777216;
    int retval = BitwiseManipulator.highestSetBit(marg0);

    int expected = 24;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLowestSetBit21() throws Exception {
    int marg0 = 524288;
    int retval = BitwiseManipulator.lowestSetBit(marg0);

    int expected = 19;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits32() throws Exception {
    long marg0 = 1024L;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits33() throws Exception {
    int marg0 = 524288;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHighestSetBit27() throws Exception {
    int marg0 = 33554432;
    int retval = BitwiseManipulator.highestSetBit(marg0);

    int expected = 25;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLowestSetBit22() throws Exception {
    int marg0 = 1048576;
    int retval = BitwiseManipulator.lowestSetBit(marg0);

    int expected = 20;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHighestSetBit28() throws Exception {
    int marg0 = 67108864;
    int retval = BitwiseManipulator.highestSetBit(marg0);

    int expected = 26;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits34() throws Exception {
    int marg0 = 1048576;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits35() throws Exception {
    long marg0 = 2048L;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLowestSetBit23() throws Exception {
    int marg0 = 2097152;
    int retval = BitwiseManipulator.lowestSetBit(marg0);

    int expected = 21;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHighestSetBit29() throws Exception {
    int marg0 = 134217728;
    int retval = BitwiseManipulator.highestSetBit(marg0);

    int expected = 27;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits36() throws Exception {
    int marg0 = 2097152;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHighestSetBit30() throws Exception {
    int marg0 = 268435456;
    int retval = BitwiseManipulator.highestSetBit(marg0);

    int expected = 28;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLowestSetBit24() throws Exception {
    int marg0 = 4194304;
    int retval = BitwiseManipulator.lowestSetBit(marg0);

    int expected = 22;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits37() throws Exception {
    int marg0 = 4194304;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits38() throws Exception {
    long marg0 = 4096L;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHighestSetBit31() throws Exception {
    int marg0 = 536870912;
    int retval = BitwiseManipulator.highestSetBit(marg0);

    int expected = 29;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLowestSetBit25() throws Exception {
    int marg0 = 8388608;
    int retval = BitwiseManipulator.lowestSetBit(marg0);

    int expected = 23;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHighestSetBit32() throws Exception {
    int marg0 = 1073741824;
    int retval = BitwiseManipulator.highestSetBit(marg0);

    int expected = 30;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits39() throws Exception {
    int marg0 = 8388608;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLowestSetBit26() throws Exception {
    int marg0 = 16777216;
    int retval = BitwiseManipulator.lowestSetBit(marg0);

    int expected = 24;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHighestSetBit33() throws Exception {
    int marg0 = -2147483648;
    int retval = BitwiseManipulator.highestSetBit(marg0);

    int expected = 31;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits40() throws Exception {
    long marg0 = 8192L;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits41() throws Exception {
    int marg0 = 16777216;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLowestSetBit27() throws Exception {
    int marg0 = 33554432;
    int retval = BitwiseManipulator.lowestSetBit(marg0);

    int expected = 25;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits42() throws Exception {
    int marg0 = 33554432;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLowestSetBit28() throws Exception {
    int marg0 = 67108864;
    int retval = BitwiseManipulator.lowestSetBit(marg0);

    int expected = 26;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits43() throws Exception {
    long marg0 = 16384L;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits44() throws Exception {
    int marg0 = 67108864;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testInterleaveBits1() throws Exception {
    byte marg0 = 0;
    byte marg1 = 0;
    short retval = BitwiseManipulator.interleaveBits(marg0, marg1);

    short expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLowestSetBit29() throws Exception {
    int marg0 = 134217728;
    int retval = BitwiseManipulator.lowestSetBit(marg0);

    int expected = 27;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits45() throws Exception {
    int marg0 = 134217728;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits46() throws Exception {
    long marg0 = 32768L;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLowestSetBit30() throws Exception {
    int marg0 = 268435456;
    int retval = BitwiseManipulator.lowestSetBit(marg0);

    int expected = 28;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits47() throws Exception {
    int marg0 = 268435456;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLowestSetBit31() throws Exception {
    int marg0 = 536870912;
    int retval = BitwiseManipulator.lowestSetBit(marg0);

    int expected = 29;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits48() throws Exception {
    int marg0 = 536870912;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits49() throws Exception {
    long marg0 = 65536L;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLowestSetBit32() throws Exception {
    int marg0 = 1073741824;
    int retval = BitwiseManipulator.lowestSetBit(marg0);

    int expected = 30;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits50() throws Exception {
    int marg0 = 1073741824;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLowestSetBit33() throws Exception {
    int marg0 = -2147483648;
    int retval = BitwiseManipulator.lowestSetBit(marg0);

    int expected = 31;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits51() throws Exception {
    long marg0 = 131072L;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits52() throws Exception {
    int marg0 = -2147483648;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits53() throws Exception {
    long marg0 = 262144L;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits54() throws Exception {
    long marg0 = 524288L;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits55() throws Exception {
    long marg0 = 1048576L;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits56() throws Exception {
    long marg0 = 2097152L;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits57() throws Exception {
    long marg0 = 4194304L;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits58() throws Exception {
    long marg0 = 8388608L;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits59() throws Exception {
    long marg0 = 16777216L;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits60() throws Exception {
    long marg0 = 33554432L;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits61() throws Exception {
    long marg0 = 67108864L;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testReverseBits1() throws Exception {
    int marg0 = 0;
    int retval = BitwiseManipulator.reverseBits(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testCountSetBits62() throws Exception {
    long marg0 = -1L;
    int retval = BitwiseManipulator.countSetBits(marg0);

    int expected = 64;
    Assertions.assertEquals(expected, retval);
  }
}
