// Auto-generated by MAZE
package nl.uu.tests.maze.generated.benchmarks;

import java.lang.Exception;
import java.lang.NullPointerException;
import nl.uu.maze.benchmarks.BracketBalancer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class BracketBalancerTest {
  @Test
  public void testIsBalanced1() throws Exception {
    char[] marg0 = null;
    Assertions.assertThrows(NullPointerException.class, () -> BracketBalancer.isBalanced(marg0));
  }

  @Test
  public void testIsBalanced2() throws Exception {
    char[] marg0 = {};
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced3() throws Exception {
    char[] marg0 = { ')' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced4() throws Exception {
    char[] marg0 = { ']' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced5() throws Exception {
    char[] marg0 = { '}' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced6() throws Exception {
    char[] marg0 = { '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced7() throws Exception {
    char[] marg0 = { '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced8() throws Exception {
    char[] marg0 = { '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced9() throws Exception {
    char[] marg0 = { '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced10() throws Exception {
    char[] marg0 = { '\u0000', ')' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced11() throws Exception {
    char[] marg0 = { '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced12() throws Exception {
    char[] marg0 = { '(', ')' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced13() throws Exception {
    char[] marg0 = { '\u0000', ']' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced14() throws Exception {
    char[] marg0 = { '(', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced15() throws Exception {
    char[] marg0 = { '(', ']' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced16() throws Exception {
    char[] marg0 = { '[', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced17() throws Exception {
    char[] marg0 = { '[', ')' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced18() throws Exception {
    char[] marg0 = { '\u0000', '}' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced19() throws Exception {
    char[] marg0 = { '(', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced20() throws Exception {
    char[] marg0 = { '(', '}' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced21() throws Exception {
    char[] marg0 = { '(', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced22() throws Exception {
    char[] marg0 = { '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced23() throws Exception {
    char[] marg0 = { '[', ']' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced24() throws Exception {
    char[] marg0 = { '\u0000', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced25() throws Exception {
    char[] marg0 = { '{', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced26() throws Exception {
    char[] marg0 = { '{', ')' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced27() throws Exception {
    char[] marg0 = { '[', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced28() throws Exception {
    char[] marg0 = { '[', '}' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced29() throws Exception {
    char[] marg0 = { '[', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced30() throws Exception {
    char[] marg0 = { '\u0000', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced31() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced32() throws Exception {
    char[] marg0 = { '{', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced33() throws Exception {
    char[] marg0 = { '{', ']' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced34() throws Exception {
    char[] marg0 = { '\u0000', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced35() throws Exception {
    char[] marg0 = { '{', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced36() throws Exception {
    char[] marg0 = { '{', '}' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced37() throws Exception {
    char[] marg0 = { '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced38() throws Exception {
    char[] marg0 = { '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced39() throws Exception {
    char[] marg0 = { '(', '(', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced40() throws Exception {
    char[] marg0 = { '(', '[', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced41() throws Exception {
    char[] marg0 = { '[', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced42() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', ')' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced43() throws Exception {
    char[] marg0 = { '(', '(', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced44() throws Exception {
    char[] marg0 = { '(', '(', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced45() throws Exception {
    char[] marg0 = { '(', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced46() throws Exception {
    char[] marg0 = { '(', '\u0000', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced47() throws Exception {
    char[] marg0 = { '(', '\u0000', ')' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced48() throws Exception {
    char[] marg0 = { '(', '{', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced49() throws Exception {
    char[] marg0 = { '[', '(', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced50() throws Exception {
    char[] marg0 = { '[', '[', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced51() throws Exception {
    char[] marg0 = { '\u0000', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced52() throws Exception {
    char[] marg0 = { '\u0000', '(', ')' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced53() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', ']' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced54() throws Exception {
    char[] marg0 = { '{', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced55() throws Exception {
    char[] marg0 = { '(', '[', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced56() throws Exception {
    char[] marg0 = { '(', '[', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced57() throws Exception {
    char[] marg0 = { '(', '\u0000', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced58() throws Exception {
    char[] marg0 = { '(', '\u0000', ']' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced59() throws Exception {
    char[] marg0 = { '(', '{', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced60() throws Exception {
    char[] marg0 = { '[', '(', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced61() throws Exception {
    char[] marg0 = { '[', '(', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced62() throws Exception {
    char[] marg0 = { '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced63() throws Exception {
    char[] marg0 = { '[', '\u0000', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced64() throws Exception {
    char[] marg0 = { '[', '\u0000', ')' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced65() throws Exception {
    char[] marg0 = { '[', '{', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced66() throws Exception {
    char[] marg0 = { '\u0000', '(', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced67() throws Exception {
    char[] marg0 = { '\u0000', '(', ']' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced68() throws Exception {
    char[] marg0 = { '\u0000', '[', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced69() throws Exception {
    char[] marg0 = { '\u0000', '[', ')' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced70() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '}' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced71() throws Exception {
    char[] marg0 = { '{', '(', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced72() throws Exception {
    char[] marg0 = { '{', '[', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced73() throws Exception {
    char[] marg0 = { '(', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced74() throws Exception {
    char[] marg0 = { '(', '\u0000', '}' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced75() throws Exception {
    char[] marg0 = { '(', '\u0000', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced76() throws Exception {
    char[] marg0 = { '(', '{', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced77() throws Exception {
    char[] marg0 = { '(', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced78() throws Exception {
    char[] marg0 = { '[', '(', ')' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced79() throws Exception {
    char[] marg0 = { '[', '[', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced80() throws Exception {
    char[] marg0 = { '[', '[', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced81() throws Exception {
    char[] marg0 = { '[', '\u0000', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced82() throws Exception {
    char[] marg0 = { '[', '\u0000', ']' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced83() throws Exception {
    char[] marg0 = { '[', '{', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced84() throws Exception {
    char[] marg0 = { '\u0000', '(', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced85() throws Exception {
    char[] marg0 = { '\u0000', '(', '}' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced86() throws Exception {
    char[] marg0 = { '\u0000', '(', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced87() throws Exception {
    char[] marg0 = { '\u0000', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced88() throws Exception {
    char[] marg0 = { '\u0000', '[', ']' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced89() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced90() throws Exception {
    char[] marg0 = { '\u0000', '{', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced91() throws Exception {
    char[] marg0 = { '\u0000', '{', ')' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced92() throws Exception {
    char[] marg0 = { '{', '(', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced93() throws Exception {
    char[] marg0 = { '{', '(', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced94() throws Exception {
    char[] marg0 = { '{', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced95() throws Exception {
    char[] marg0 = { '{', '\u0000', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced96() throws Exception {
    char[] marg0 = { '{', '\u0000', ')' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced97() throws Exception {
    char[] marg0 = { '{', '{', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced98() throws Exception {
    char[] marg0 = { '(', '(', ']' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced99() throws Exception {
    char[] marg0 = { '[', '[', ')' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced100() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced101() throws Exception {
    char[] marg0 = { '[', '\u0000', '}' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced102() throws Exception {
    char[] marg0 = { '[', '\u0000', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced103() throws Exception {
    char[] marg0 = { '[', '{', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced104() throws Exception {
    char[] marg0 = { '[', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced105() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced106() throws Exception {
    char[] marg0 = { '\u0000', '[', '}' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced107() throws Exception {
    char[] marg0 = { '\u0000', '[', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced108() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced109() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced110() throws Exception {
    char[] marg0 = { '\u0000', '{', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced111() throws Exception {
    char[] marg0 = { '\u0000', '{', ']' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced112() throws Exception {
    char[] marg0 = { '{', '(', ')' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced113() throws Exception {
    char[] marg0 = { '{', '[', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced114() throws Exception {
    char[] marg0 = { '{', '[', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced115() throws Exception {
    char[] marg0 = { '{', '\u0000', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced116() throws Exception {
    char[] marg0 = { '{', '\u0000', ']' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced117() throws Exception {
    char[] marg0 = { '{', '{', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced118() throws Exception {
    char[] marg0 = { '(', '[', ']' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced119() throws Exception {
    char[] marg0 = { '[', '{', ')' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced120() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced121() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced122() throws Exception {
    char[] marg0 = { '\u0000', '{', '}' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced123() throws Exception {
    char[] marg0 = { '\u0000', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced124() throws Exception {
    char[] marg0 = { '{', '[', ')' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced125() throws Exception {
    char[] marg0 = { '{', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced126() throws Exception {
    char[] marg0 = { '{', '\u0000', '}' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced127() throws Exception {
    char[] marg0 = { '{', '\u0000', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced128() throws Exception {
    char[] marg0 = { '{', '{', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced129() throws Exception {
    char[] marg0 = { '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced130() throws Exception {
    char[] marg0 = { '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced131() throws Exception {
    char[] marg0 = { '(', '(', '}' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced132() throws Exception {
    char[] marg0 = { '(', '{', ']' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced133() throws Exception {
    char[] marg0 = { '{', '(', ']' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced134() throws Exception {
    char[] marg0 = { '{', '{', ')' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced135() throws Exception {
    char[] marg0 = { '(', '(', '(', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced136() throws Exception {
    char[] marg0 = { '(', '(', '[', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced137() throws Exception {
    char[] marg0 = { '(', '(', ')' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced138() throws Exception {
    char[] marg0 = { '(', '[', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced139() throws Exception {
    char[] marg0 = { '(', '[', '}' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced140() throws Exception {
    char[] marg0 = { '[', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced141() throws Exception {
    char[] marg0 = { '[', '(', '}' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced142() throws Exception {
    char[] marg0 = { '{', '[', ']' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced143() throws Exception {
    char[] marg0 = { '(', '(', '(', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced144() throws Exception {
    char[] marg0 = { '(', '(', '(', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced145() throws Exception {
    char[] marg0 = { '(', '(', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced146() throws Exception {
    char[] marg0 = { '(', '(', '\u0000', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced147() throws Exception {
    char[] marg0 = { '(', '(', '{', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced148() throws Exception {
    char[] marg0 = { '(', '[', '(', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced149() throws Exception {
    char[] marg0 = { '(', '[', '[', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced150() throws Exception {
    char[] marg0 = { '(', '[', ')' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced151() throws Exception {
    char[] marg0 = { '(', '\u0000', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced152() throws Exception {
    char[] marg0 = { '(', '{', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced153() throws Exception {
    char[] marg0 = { '(', '{', '}' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced154() throws Exception {
    char[] marg0 = { '[', '(', '(', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced155() throws Exception {
    char[] marg0 = { '[', '(', '[', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced156() throws Exception {
    char[] marg0 = { '[', '[', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced157() throws Exception {
    char[] marg0 = { '[', '[', '}' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced158() throws Exception {
    char[] marg0 = { '\u0000', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced159() throws Exception {
    char[] marg0 = { '{', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced160() throws Exception {
    char[] marg0 = { '{', '{', ']' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced161() throws Exception {
    char[] marg0 = { '(', '(', '[', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced162() throws Exception {
    char[] marg0 = { '(', '(', '[', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced163() throws Exception {
    char[] marg0 = { '(', '(', '\u0000', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced164() throws Exception {
    char[] marg0 = { '(', '(', '{', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced165() throws Exception {
    char[] marg0 = { '(', '[', '(', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced166() throws Exception {
    char[] marg0 = { '(', '[', '(', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced167() throws Exception {
    char[] marg0 = { '(', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced168() throws Exception {
    char[] marg0 = { '(', '[', '\u0000', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced169() throws Exception {
    char[] marg0 = { '(', '[', '{', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced170() throws Exception {
    char[] marg0 = { '(', '\u0000', '(', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced171() throws Exception {
    char[] marg0 = { '(', '\u0000', '[', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced172() throws Exception {
    char[] marg0 = { '(', '{', '(', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced173() throws Exception {
    char[] marg0 = { '(', '{', '[', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced174() throws Exception {
    char[] marg0 = { '(', '{', ')' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced175() throws Exception {
    char[] marg0 = { '[', '(', '(', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced176() throws Exception {
    char[] marg0 = { '[', '(', '(', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced177() throws Exception {
    char[] marg0 = { '[', '(', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced178() throws Exception {
    char[] marg0 = { '[', '(', ']' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced179() throws Exception {
    char[] marg0 = { '[', '(', '\u0000', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced180() throws Exception {
    char[] marg0 = { '[', '(', '{', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced181() throws Exception {
    char[] marg0 = { '[', '[', '(', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced182() throws Exception {
    char[] marg0 = { '[', '[', '[', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced183() throws Exception {
    char[] marg0 = { '[', '\u0000', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced184() throws Exception {
    char[] marg0 = { '[', '{', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced185() throws Exception {
    char[] marg0 = { '[', '{', '}' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced186() throws Exception {
    char[] marg0 = { '\u0000', '(', '(', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced187() throws Exception {
    char[] marg0 = { '\u0000', '(', '[', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced188() throws Exception {
    char[] marg0 = { '\u0000', '[', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced189() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', ')', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced190() throws Exception {
    char[] marg0 = { '{', '(', '(', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced191() throws Exception {
    char[] marg0 = { '{', '(', '[', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced192() throws Exception {
    char[] marg0 = { '{', '[', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced193() throws Exception {
    char[] marg0 = { '(', '(', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced194() throws Exception {
    char[] marg0 = { '(', '(', '\u0000', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced195() throws Exception {
    char[] marg0 = { '(', '(', '{', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced196() throws Exception {
    char[] marg0 = { '(', '(', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced197() throws Exception {
    char[] marg0 = { '(', '[', '(', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced198() throws Exception {
    char[] marg0 = { '(', '[', '[', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced199() throws Exception {
    char[] marg0 = { '(', '[', '[', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced200() throws Exception {
    char[] marg0 = { '(', '[', '\u0000', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced201() throws Exception {
    char[] marg0 = { '(', '[', '{', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced202() throws Exception {
    char[] marg0 = { '(', '\u0000', '(', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced203() throws Exception {
    char[] marg0 = { '(', '\u0000', '(', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced204() throws Exception {
    char[] marg0 = { '(', '\u0000', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced205() throws Exception {
    char[] marg0 = { '(', '\u0000', '\u0000', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced206() throws Exception {
    char[] marg0 = { '(', '\u0000', '\u0000', ')', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced207() throws Exception {
    char[] marg0 = { '(', '\u0000', '{', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced208() throws Exception {
    char[] marg0 = { '(', '{', '(', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced209() throws Exception {
    char[] marg0 = { '(', '{', '(', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced210() throws Exception {
    char[] marg0 = { '(', '{', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced211() throws Exception {
    char[] marg0 = { '(', '{', '\u0000', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced212() throws Exception {
    char[] marg0 = { '(', '{', '{', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced213() throws Exception {
    char[] marg0 = { '[', '(', '[', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced214() throws Exception {
    char[] marg0 = { '[', '(', '[', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced215() throws Exception {
    char[] marg0 = { '[', '(', '\u0000', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced216() throws Exception {
    char[] marg0 = { '[', '(', '{', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced217() throws Exception {
    char[] marg0 = { '[', '[', '(', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced218() throws Exception {
    char[] marg0 = { '[', '[', '(', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced219() throws Exception {
    char[] marg0 = { '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced220() throws Exception {
    char[] marg0 = { '[', '[', ']' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced221() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced222() throws Exception {
    char[] marg0 = { '[', '[', '{', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced223() throws Exception {
    char[] marg0 = { '[', '\u0000', '(', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced224() throws Exception {
    char[] marg0 = { '[', '\u0000', '[', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced225() throws Exception {
    char[] marg0 = { '[', '{', '(', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced226() throws Exception {
    char[] marg0 = { '[', '{', '[', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced227() throws Exception {
    char[] marg0 = { '\u0000', '(', '(', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced228() throws Exception {
    char[] marg0 = { '\u0000', '(', '(', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced229() throws Exception {
    char[] marg0 = { '\u0000', '(', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced230() throws Exception {
    char[] marg0 = { '\u0000', '(', '\u0000', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced231() throws Exception {
    char[] marg0 = { '\u0000', '(', '\u0000', ')', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced232() throws Exception {
    char[] marg0 = { '\u0000', '(', '{', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced233() throws Exception {
    char[] marg0 = { '\u0000', '[', '(', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced234() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced235() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced236() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '(', ')', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced237() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced238() throws Exception {
    char[] marg0 = { '\u0000', '{', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced239() throws Exception {
    char[] marg0 = { '{', '(', '(', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced240() throws Exception {
    char[] marg0 = { '{', '(', '(', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced241() throws Exception {
    char[] marg0 = { '{', '(', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced242() throws Exception {
    char[] marg0 = { '{', '(', '\u0000', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced243() throws Exception {
    char[] marg0 = { '{', '(', '{', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced244() throws Exception {
    char[] marg0 = { '{', '[', '(', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced245() throws Exception {
    char[] marg0 = { '{', '[', '[', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced246() throws Exception {
    char[] marg0 = { '{', '\u0000', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced247() throws Exception {
    char[] marg0 = { '{', '{', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced248() throws Exception {
    char[] marg0 = { '(', '(', '(', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced249() throws Exception {
    char[] marg0 = { '(', '[', '[', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced250() throws Exception {
    char[] marg0 = { '(', '[', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced251() throws Exception {
    char[] marg0 = { '(', '[', '\u0000', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced252() throws Exception {
    char[] marg0 = { '(', '[', '{', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced253() throws Exception {
    char[] marg0 = { '(', '[', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced254() throws Exception {
    char[] marg0 = { '(', '\u0000', '[', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced255() throws Exception {
    char[] marg0 = { '(', '\u0000', '[', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced256() throws Exception {
    char[] marg0 = { '(', '\u0000', '\u0000', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced257() throws Exception {
    char[] marg0 = { '(', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced258() throws Exception {
    char[] marg0 = { '(', '\u0000', '{', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced259() throws Exception {
    char[] marg0 = { '(', '{', '(', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced260() throws Exception {
    char[] marg0 = { '(', '{', '[', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced261() throws Exception {
    char[] marg0 = { '(', '{', '[', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced262() throws Exception {
    char[] marg0 = { '(', '{', '\u0000', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced263() throws Exception {
    char[] marg0 = { '(', '{', '{', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced264() throws Exception {
    char[] marg0 = { '[', '(', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced265() throws Exception {
    char[] marg0 = { '[', '(', '\u0000', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced266() throws Exception {
    char[] marg0 = { '[', '(', '{', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced267() throws Exception {
    char[] marg0 = { '[', '(', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced268() throws Exception {
    char[] marg0 = { '[', '[', '(', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced269() throws Exception {
    char[] marg0 = { '[', '[', '[', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced270() throws Exception {
    char[] marg0 = { '[', '[', '[', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced271() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced272() throws Exception {
    char[] marg0 = { '[', '[', '{', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced273() throws Exception {
    char[] marg0 = { '[', '\u0000', '(', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced274() throws Exception {
    char[] marg0 = { '[', '\u0000', '(', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced275() throws Exception {
    char[] marg0 = { '[', '\u0000', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced276() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced277() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', ')', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced278() throws Exception {
    char[] marg0 = { '[', '\u0000', '{', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced279() throws Exception {
    char[] marg0 = { '[', '{', '(', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced280() throws Exception {
    char[] marg0 = { '[', '{', '(', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced281() throws Exception {
    char[] marg0 = { '[', '{', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced282() throws Exception {
    char[] marg0 = { '[', '{', ']' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced283() throws Exception {
    char[] marg0 = { '[', '{', '\u0000', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced284() throws Exception {
    char[] marg0 = { '[', '{', '{', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced285() throws Exception {
    char[] marg0 = { '\u0000', '(', '[', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced286() throws Exception {
    char[] marg0 = { '\u0000', '(', '[', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced287() throws Exception {
    char[] marg0 = { '\u0000', '(', '\u0000', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced288() throws Exception {
    char[] marg0 = { '\u0000', '(', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced289() throws Exception {
    char[] marg0 = { '\u0000', '(', '{', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced290() throws Exception {
    char[] marg0 = { '\u0000', '[', '(', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced291() throws Exception {
    char[] marg0 = { '\u0000', '[', '(', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced292() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced293() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced294() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', ')', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced295() throws Exception {
    char[] marg0 = { '\u0000', '[', '{', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced296() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '(', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced297() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '(', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced298() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced299() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', ')', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced300() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced301() throws Exception {
    char[] marg0 = { '\u0000', '{', '(', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced302() throws Exception {
    char[] marg0 = { '\u0000', '{', '[', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced303() throws Exception {
    char[] marg0 = { '{', '(', '[', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced304() throws Exception {
    char[] marg0 = { '{', '(', '[', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced305() throws Exception {
    char[] marg0 = { '{', '(', '\u0000', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced306() throws Exception {
    char[] marg0 = { '{', '(', '}' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced307() throws Exception {
    char[] marg0 = { '{', '(', '{', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced308() throws Exception {
    char[] marg0 = { '{', '[', '(', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced309() throws Exception {
    char[] marg0 = { '{', '[', '(', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced310() throws Exception {
    char[] marg0 = { '{', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced311() throws Exception {
    char[] marg0 = { '{', '[', '\u0000', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced312() throws Exception {
    char[] marg0 = { '{', '[', '{', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced313() throws Exception {
    char[] marg0 = { '{', '\u0000', '(', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced314() throws Exception {
    char[] marg0 = { '{', '\u0000', '[', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced315() throws Exception {
    char[] marg0 = { '{', '{', '(', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced316() throws Exception {
    char[] marg0 = { '{', '{', '[', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced317() throws Exception {
    char[] marg0 = { '(', '(', '[', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced318() throws Exception {
    char[] marg0 = { '(', '[', '{', ')', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced319() throws Exception {
    char[] marg0 = { '(', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced320() throws Exception {
    char[] marg0 = { '(', '\u0000', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced321() throws Exception {
    char[] marg0 = { '(', '\u0000', '\u0000', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced322() throws Exception {
    char[] marg0 = { '(', '\u0000', '{', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced323() throws Exception {
    char[] marg0 = { '(', '\u0000', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced324() throws Exception {
    char[] marg0 = { '(', '{', '[', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced325() throws Exception {
    char[] marg0 = { '(', '{', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced326() throws Exception {
    char[] marg0 = { '(', '{', '\u0000', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced327() throws Exception {
    char[] marg0 = { '(', '{', '{', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced328() throws Exception {
    char[] marg0 = { '(', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced329() throws Exception {
    char[] marg0 = { '[', '(', '(', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced330() throws Exception {
    char[] marg0 = { '[', '(', '\u0000', ')', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced331() throws Exception {
    char[] marg0 = { '[', '[', '[', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced332() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced333() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced334() throws Exception {
    char[] marg0 = { '[', '[', '{', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced335() throws Exception {
    char[] marg0 = { '[', '[', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced336() throws Exception {
    char[] marg0 = { '[', '\u0000', '(', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced337() throws Exception {
    char[] marg0 = { '[', '\u0000', '[', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced338() throws Exception {
    char[] marg0 = { '[', '\u0000', '[', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced339() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced340() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced341() throws Exception {
    char[] marg0 = { '[', '\u0000', '{', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced342() throws Exception {
    char[] marg0 = { '[', '{', '(', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced343() throws Exception {
    char[] marg0 = { '[', '{', '[', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced344() throws Exception {
    char[] marg0 = { '[', '{', '[', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced345() throws Exception {
    char[] marg0 = { '[', '{', '\u0000', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced346() throws Exception {
    char[] marg0 = { '[', '{', '{', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced347() throws Exception {
    char[] marg0 = { '\u0000', '(', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced348() throws Exception {
    char[] marg0 = { '\u0000', '(', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced349() throws Exception {
    char[] marg0 = { '\u0000', '(', '\u0000', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced350() throws Exception {
    char[] marg0 = { '\u0000', '(', '{', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced351() throws Exception {
    char[] marg0 = { '\u0000', '(', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced352() throws Exception {
    char[] marg0 = { '\u0000', '[', '(', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced353() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced354() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced355() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced356() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced357() throws Exception {
    char[] marg0 = { '\u0000', '[', '{', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced358() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '(', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced359() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '(', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced360() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '(', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced361() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced362() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced363() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced364() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '{', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced365() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '{', ')', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced366() throws Exception {
    char[] marg0 = { '\u0000', '{', '(', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced367() throws Exception {
    char[] marg0 = { '\u0000', '{', '(', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced368() throws Exception {
    char[] marg0 = { '\u0000', '{', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced369() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced370() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', ')', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced371() throws Exception {
    char[] marg0 = { '\u0000', '{', '{', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced372() throws Exception {
    char[] marg0 = { '{', '(', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced373() throws Exception {
    char[] marg0 = { '{', '(', '\u0000', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced374() throws Exception {
    char[] marg0 = { '{', '(', '{', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced375() throws Exception {
    char[] marg0 = { '{', '(', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced376() throws Exception {
    char[] marg0 = { '{', '[', '(', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced377() throws Exception {
    char[] marg0 = { '{', '[', '[', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced378() throws Exception {
    char[] marg0 = { '{', '[', '[', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced379() throws Exception {
    char[] marg0 = { '{', '[', '\u0000', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced380() throws Exception {
    char[] marg0 = { '{', '[', '}' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced381() throws Exception {
    char[] marg0 = { '{', '[', '{', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced382() throws Exception {
    char[] marg0 = { '{', '\u0000', '(', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced383() throws Exception {
    char[] marg0 = { '{', '\u0000', '(', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced384() throws Exception {
    char[] marg0 = { '{', '\u0000', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced385() throws Exception {
    char[] marg0 = { '{', '\u0000', '\u0000', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced386() throws Exception {
    char[] marg0 = { '{', '\u0000', '\u0000', ')', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced387() throws Exception {
    char[] marg0 = { '{', '\u0000', '{', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced388() throws Exception {
    char[] marg0 = { '{', '{', '(', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced389() throws Exception {
    char[] marg0 = { '{', '{', '(', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced390() throws Exception {
    char[] marg0 = { '{', '{', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced391() throws Exception {
    char[] marg0 = { '{', '{', '\u0000', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced392() throws Exception {
    char[] marg0 = { '{', '{', '{', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced393() throws Exception {
    char[] marg0 = { '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced394() throws Exception {
    char[] marg0 = { '(', '(', '(', '}', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced395() throws Exception {
    char[] marg0 = { '(', '(', '[', '[', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced396() throws Exception {
    char[] marg0 = { '(', '(', '[', '[', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced397() throws Exception {
    char[] marg0 = { '(', '(', '[', '[', '}', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced398() throws Exception {
    char[] marg0 = { '(', '(', '[', '[', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced399() throws Exception {
    char[] marg0 = { '(', '(', '[', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced400() throws Exception {
    char[] marg0 = { '(', '(', '[', ')' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced401() throws Exception {
    char[] marg0 = { '(', '(', '[', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced402() throws Exception {
    char[] marg0 = { '(', '(', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced403() throws Exception {
    char[] marg0 = { '(', '(', '[', '\u0000', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced404() throws Exception {
    char[] marg0 = { '(', '(', '[', '\u0000', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced405() throws Exception {
    char[] marg0 = { '(', '(', '[', '\u0000', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced406() throws Exception {
    char[] marg0 = { '(', '(', '[', '\u0000', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced407() throws Exception {
    char[] marg0 = { '(', '(', '[', '}', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced408() throws Exception {
    char[] marg0 = { '(', '(', '[', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced409() throws Exception {
    char[] marg0 = { '(', '(', '[', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced410() throws Exception {
    char[] marg0 = { '(', '(', '[', '{', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced411() throws Exception {
    char[] marg0 = { '(', '(', '[', '{', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced412() throws Exception {
    char[] marg0 = { '(', '(', '[', '{', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced413() throws Exception {
    char[] marg0 = { '(', '(', '[', '{', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced414() throws Exception {
    char[] marg0 = { '(', '(', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced415() throws Exception {
    char[] marg0 = { '(', '(', ')', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced416() throws Exception {
    char[] marg0 = { '(', '(', ')', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced417() throws Exception {
    char[] marg0 = { '(', '(', ')', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced418() throws Exception {
    char[] marg0 = { '(', '(', ')', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced419() throws Exception {
    char[] marg0 = { '(', '(', ')', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced420() throws Exception {
    char[] marg0 = { '(', '(', ')', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced421() throws Exception {
    char[] marg0 = { '(', '(', ')', '}', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced422() throws Exception {
    char[] marg0 = { '(', '(', ')', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced423() throws Exception {
    char[] marg0 = { '(', '(', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced424() throws Exception {
    char[] marg0 = { '(', '(', '\u0000', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced425() throws Exception {
    char[] marg0 = { '(', '(', '\u0000', '(', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced426() throws Exception {
    char[] marg0 = { '(', '(', '\u0000', '(', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced427() throws Exception {
    char[] marg0 = { '(', '(', '\u0000', '(', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced428() throws Exception {
    char[] marg0 = { '(', '(', '\u0000', '(', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced429() throws Exception {
    char[] marg0 = { '(', '(', '\u0000', '(', '}', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced430() throws Exception {
    char[] marg0 = { '(', '(', '\u0000', '(', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced431() throws Exception {
    char[] marg0 = { '(', '(', '\u0000', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced432() throws Exception {
    char[] marg0 = { '(', '(', '\u0000', '[', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced433() throws Exception {
    char[] marg0 = { '(', '(', '\u0000', '[', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced434() throws Exception {
    char[] marg0 = { '(', '(', '\u0000', '[', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced435() throws Exception {
    char[] marg0 = { '(', '(', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced436() throws Exception {
    char[] marg0 = { '(', '(', '\u0000', '[', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced437() throws Exception {
    char[] marg0 = { '(', '(', '\u0000', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced438() throws Exception {
    char[] marg0 = { '(', '(', '\u0000', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced439() throws Exception {
    char[] marg0 = { '(', '(', '\u0000', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced440() throws Exception {
    char[] marg0 = { '(', '(', '\u0000', '\u0000', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced441() throws Exception {
    char[] marg0 = { '(', '(', '\u0000', '\u0000', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced442() throws Exception {
    char[] marg0 = { '(', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced443() throws Exception {
    char[] marg0 = { '(', '(', '\u0000', '\u0000', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced444() throws Exception {
    char[] marg0 = { '(', '(', '\u0000', '}', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced445() throws Exception {
    char[] marg0 = { '(', '(', '\u0000', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced446() throws Exception {
    char[] marg0 = { '(', '(', '\u0000', '{', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced447() throws Exception {
    char[] marg0 = { '(', '(', '\u0000', '{', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced448() throws Exception {
    char[] marg0 = { '(', '(', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced449() throws Exception {
    char[] marg0 = { '(', '(', '\u0000', '{', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced450() throws Exception {
    char[] marg0 = { '(', '(', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced451() throws Exception {
    char[] marg0 = { '(', '(', '{', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced452() throws Exception {
    char[] marg0 = { '(', '(', '{', '(', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced453() throws Exception {
    char[] marg0 = { '(', '(', '{', '(', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced454() throws Exception {
    char[] marg0 = { '(', '(', '{', '(', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced455() throws Exception {
    char[] marg0 = { '(', '(', '{', '(', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced456() throws Exception {
    char[] marg0 = { '(', '(', '{', '(', '}', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced457() throws Exception {
    char[] marg0 = { '(', '(', '{', '(', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced458() throws Exception {
    char[] marg0 = { '(', '(', '{', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced459() throws Exception {
    char[] marg0 = { '(', '(', '{', '[', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced460() throws Exception {
    char[] marg0 = { '(', '(', '{', '[', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced461() throws Exception {
    char[] marg0 = { '(', '(', '{', '[', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced462() throws Exception {
    char[] marg0 = { '(', '(', '{', '[', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced463() throws Exception {
    char[] marg0 = { '(', '(', '{', '[', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced464() throws Exception {
    char[] marg0 = { '(', '(', '{', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced465() throws Exception {
    char[] marg0 = { '(', '(', '{', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced466() throws Exception {
    char[] marg0 = { '(', '(', '{', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced467() throws Exception {
    char[] marg0 = { '(', '(', '{', '\u0000', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced468() throws Exception {
    char[] marg0 = { '(', '(', '{', '\u0000', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced469() throws Exception {
    char[] marg0 = { '(', '(', '{', '\u0000', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced470() throws Exception {
    char[] marg0 = { '(', '(', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced471() throws Exception {
    char[] marg0 = { '(', '(', '{', '}', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced472() throws Exception {
    char[] marg0 = { '(', '(', '{', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced473() throws Exception {
    char[] marg0 = { '(', '(', '{', '{', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced474() throws Exception {
    char[] marg0 = { '(', '(', '{', '{', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced475() throws Exception {
    char[] marg0 = { '(', '(', '{', '{', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced476() throws Exception {
    char[] marg0 = { '(', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced477() throws Exception {
    char[] marg0 = { '(', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced478() throws Exception {
    char[] marg0 = { '(', '[', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced479() throws Exception {
    char[] marg0 = { '(', '[', '(', '(', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced480() throws Exception {
    char[] marg0 = { '(', '[', '(', '(', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced481() throws Exception {
    char[] marg0 = { '(', '[', '(', '(', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced482() throws Exception {
    char[] marg0 = { '(', '[', '(', '(', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced483() throws Exception {
    char[] marg0 = { '(', '[', '(', '(', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced484() throws Exception {
    char[] marg0 = { '(', '[', '(', '(', '}', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced485() throws Exception {
    char[] marg0 = { '(', '[', '(', '(', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced486() throws Exception {
    char[] marg0 = { '(', '[', '(', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced487() throws Exception {
    char[] marg0 = { '(', '[', '(', '[', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced488() throws Exception {
    char[] marg0 = { '(', '[', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced489() throws Exception {
    char[] marg0 = { '(', '[', '(', '[', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced490() throws Exception {
    char[] marg0 = { '(', '[', '(', '[', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced491() throws Exception {
    char[] marg0 = { '(', '[', '(', '[', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced492() throws Exception {
    char[] marg0 = { '(', '[', '(', '[', '}', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced493() throws Exception {
    char[] marg0 = { '(', '[', '(', '[', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced494() throws Exception {
    char[] marg0 = { '(', '[', '(', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced495() throws Exception {
    char[] marg0 = { '(', '[', '(', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced496() throws Exception {
    char[] marg0 = { '(', '[', '(', '\u0000', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced497() throws Exception {
    char[] marg0 = { '(', '[', '(', '\u0000', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced498() throws Exception {
    char[] marg0 = { '(', '[', '(', '\u0000', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced499() throws Exception {
    char[] marg0 = { '(', '[', '(', '\u0000', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced500() throws Exception {
    char[] marg0 = { '(', '[', '(', '\u0000', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced501() throws Exception {
    char[] marg0 = { '(', '[', '(', '}', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced502() throws Exception {
    char[] marg0 = { '(', '[', '(', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced503() throws Exception {
    char[] marg0 = { '(', '[', '(', '{', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced504() throws Exception {
    char[] marg0 = { '(', '[', '(', '{', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced505() throws Exception {
    char[] marg0 = { '(', '[', '(', '{', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced506() throws Exception {
    char[] marg0 = { '(', '[', '(', '{', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced507() throws Exception {
    char[] marg0 = { '(', '[', '(', '{', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced508() throws Exception {
    char[] marg0 = { '(', '[', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced509() throws Exception {
    char[] marg0 = { '(', '[', '[', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced510() throws Exception {
    char[] marg0 = { '(', '[', '[', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced511() throws Exception {
    char[] marg0 = { '(', '[', '[', '(', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced512() throws Exception {
    char[] marg0 = { '(', '[', '[', '(', ']', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced513() throws Exception {
    char[] marg0 = { '(', '[', '[', '(', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced514() throws Exception {
    char[] marg0 = { '(', '[', '[', '(', '}', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced515() throws Exception {
    char[] marg0 = { '(', '[', '[', '(', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced516() throws Exception {
    char[] marg0 = { '(', '[', '[', '[', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced517() throws Exception {
    char[] marg0 = { '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced518() throws Exception {
    char[] marg0 = { '(', '[', '[', '[', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced519() throws Exception {
    char[] marg0 = { '(', '[', '[', '[', ']', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced520() throws Exception {
    char[] marg0 = { '(', '[', '[', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced521() throws Exception {
    char[] marg0 = { '(', '[', '[', '[', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced522() throws Exception {
    char[] marg0 = { '(', '[', '[', ']', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced523() throws Exception {
    char[] marg0 = { '(', '[', '[', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced524() throws Exception {
    char[] marg0 = { '(', '[', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced525() throws Exception {
    char[] marg0 = { '(', '[', '[', '\u0000', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced526() throws Exception {
    char[] marg0 = { '(', '[', '[', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced527() throws Exception {
    char[] marg0 = { '(', '[', '[', '\u0000', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced528() throws Exception {
    char[] marg0 = { '(', '[', '[', '}', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced529() throws Exception {
    char[] marg0 = { '(', '[', '[', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced530() throws Exception {
    char[] marg0 = { '(', '[', '[', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced531() throws Exception {
    char[] marg0 = { '(', '[', '[', '{', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced532() throws Exception {
    char[] marg0 = { '(', '[', '[', '{', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced533() throws Exception {
    char[] marg0 = { '(', '[', '[', '{', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced534() throws Exception {
    char[] marg0 = { '(', '[', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced535() throws Exception {
    char[] marg0 = { '(', '[', ')', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced536() throws Exception {
    char[] marg0 = { '(', '[', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced537() throws Exception {
    char[] marg0 = { '(', '[', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced538() throws Exception {
    char[] marg0 = { '(', '[', ')', ']', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced539() throws Exception {
    char[] marg0 = { '(', '[', ')', '\u0000', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced540() throws Exception {
    char[] marg0 = { '(', '[', ')', '}', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced541() throws Exception {
    char[] marg0 = { '(', '[', ')', '{', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced542() throws Exception {
    char[] marg0 = { '(', '[', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced543() throws Exception {
    char[] marg0 = { '(', '[', '\u0000', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced544() throws Exception {
    char[] marg0 = { '(', '[', '\u0000', '(', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced545() throws Exception {
    char[] marg0 = { '(', '[', '\u0000', '(', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced546() throws Exception {
    char[] marg0 = { '(', '[', '\u0000', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced547() throws Exception {
    char[] marg0 = { '(', '[', '\u0000', '(', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced548() throws Exception {
    char[] marg0 = { '(', '[', '\u0000', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced549() throws Exception {
    char[] marg0 = { '(', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced550() throws Exception {
    char[] marg0 = { '(', '[', '\u0000', '[', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced551() throws Exception {
    char[] marg0 = { '(', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced552() throws Exception {
    char[] marg0 = { '(', '[', '\u0000', '[', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced553() throws Exception {
    char[] marg0 = { '(', '[', '\u0000', ')', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced554() throws Exception {
    char[] marg0 = { '(', '[', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced555() throws Exception {
    char[] marg0 = { '(', '[', '\u0000', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced556() throws Exception {
    char[] marg0 = { '(', '[', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced557() throws Exception {
    char[] marg0 = { '(', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced558() throws Exception {
    char[] marg0 = { '(', '[', '\u0000', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced559() throws Exception {
    char[] marg0 = { '(', '[', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced560() throws Exception {
    char[] marg0 = { '(', '[', '\u0000', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced561() throws Exception {
    char[] marg0 = { '(', '[', '\u0000', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced562() throws Exception {
    char[] marg0 = { '(', '[', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced563() throws Exception {
    char[] marg0 = { '(', '[', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced564() throws Exception {
    char[] marg0 = { '(', '[', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced565() throws Exception {
    char[] marg0 = { '(', '[', '{', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced566() throws Exception {
    char[] marg0 = { '(', '[', '{', '(', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced567() throws Exception {
    char[] marg0 = { '(', '[', '{', '(', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced568() throws Exception {
    char[] marg0 = { '(', '[', '{', '(', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced569() throws Exception {
    char[] marg0 = { '(', '[', '{', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced570() throws Exception {
    char[] marg0 = { '(', '[', '{', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced571() throws Exception {
    char[] marg0 = { '(', '[', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced572() throws Exception {
    char[] marg0 = { '(', '[', '{', '[', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced573() throws Exception {
    char[] marg0 = { '(', '[', '{', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced574() throws Exception {
    char[] marg0 = { '(', '[', '{', '[', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced575() throws Exception {
    char[] marg0 = { '(', '[', '{', ']', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced576() throws Exception {
    char[] marg0 = { '(', '[', '{', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced577() throws Exception {
    char[] marg0 = { '(', '[', '{', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced578() throws Exception {
    char[] marg0 = { '(', '[', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced579() throws Exception {
    char[] marg0 = { '(', '[', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced580() throws Exception {
    char[] marg0 = { '(', '[', '{', '}', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced581() throws Exception {
    char[] marg0 = { '(', '[', '{', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced582() throws Exception {
    char[] marg0 = { '(', '[', '{', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced583() throws Exception {
    char[] marg0 = { '(', '[', '{', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced584() throws Exception {
    char[] marg0 = { '(', '[', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced585() throws Exception {
    char[] marg0 = { '(', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced586() throws Exception {
    char[] marg0 = { '(', '\u0000', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced587() throws Exception {
    char[] marg0 = { '(', '\u0000', '(', '(', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced588() throws Exception {
    char[] marg0 = { '(', '\u0000', '(', '(', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced589() throws Exception {
    char[] marg0 = { '(', '\u0000', '(', '(', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced590() throws Exception {
    char[] marg0 = { '(', '\u0000', '(', '(', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced591() throws Exception {
    char[] marg0 = { '(', '\u0000', '(', '(', '}', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced592() throws Exception {
    char[] marg0 = { '(', '\u0000', '(', '(', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced593() throws Exception {
    char[] marg0 = { '(', '\u0000', '(', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced594() throws Exception {
    char[] marg0 = { '(', '\u0000', '(', '[', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced595() throws Exception {
    char[] marg0 = { '(', '\u0000', '(', '[', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced596() throws Exception {
    char[] marg0 = { '(', '\u0000', '(', '[', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced597() throws Exception {
    char[] marg0 = { '(', '\u0000', '(', '[', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced598() throws Exception {
    char[] marg0 = { '(', '\u0000', '(', '[', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced599() throws Exception {
    char[] marg0 = { '(', '\u0000', '(', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced600() throws Exception {
    char[] marg0 = { '(', '\u0000', '(', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced601() throws Exception {
    char[] marg0 = { '(', '\u0000', '(', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced602() throws Exception {
    char[] marg0 = { '(', '\u0000', '(', '\u0000', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced603() throws Exception {
    char[] marg0 = { '(', '\u0000', '(', '\u0000', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced604() throws Exception {
    char[] marg0 = { '(', '\u0000', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced605() throws Exception {
    char[] marg0 = { '(', '\u0000', '(', '\u0000', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced606() throws Exception {
    char[] marg0 = { '(', '\u0000', '(', '}', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced607() throws Exception {
    char[] marg0 = { '(', '\u0000', '(', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced608() throws Exception {
    char[] marg0 = { '(', '\u0000', '(', '{', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced609() throws Exception {
    char[] marg0 = { '(', '\u0000', '(', '{', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced610() throws Exception {
    char[] marg0 = { '(', '\u0000', '(', '{', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced611() throws Exception {
    char[] marg0 = { '(', '\u0000', '(', '{', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced612() throws Exception {
    char[] marg0 = { '(', '\u0000', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced613() throws Exception {
    char[] marg0 = { '(', '\u0000', '[', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced614() throws Exception {
    char[] marg0 = { '(', '\u0000', '[', '(', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced615() throws Exception {
    char[] marg0 = { '(', '\u0000', '[', '(', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced616() throws Exception {
    char[] marg0 = { '(', '\u0000', '[', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced617() throws Exception {
    char[] marg0 = { '(', '\u0000', '[', '(', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced618() throws Exception {
    char[] marg0 = { '(', '\u0000', '[', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced619() throws Exception {
    char[] marg0 = { '(', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced620() throws Exception {
    char[] marg0 = { '(', '\u0000', '[', '[', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced621() throws Exception {
    char[] marg0 = { '(', '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced622() throws Exception {
    char[] marg0 = { '(', '\u0000', '[', '[', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced623() throws Exception {
    char[] marg0 = { '(', '\u0000', '[', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced624() throws Exception {
    char[] marg0 = { '(', '\u0000', '[', ']', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced625() throws Exception {
    char[] marg0 = { '(', '\u0000', '[', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced626() throws Exception {
    char[] marg0 = { '(', '\u0000', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced627() throws Exception {
    char[] marg0 = { '(', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced628() throws Exception {
    char[] marg0 = { '(', '\u0000', '[', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced629() throws Exception {
    char[] marg0 = { '(', '\u0000', '[', '}', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced630() throws Exception {
    char[] marg0 = { '(', '\u0000', '[', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced631() throws Exception {
    char[] marg0 = { '(', '\u0000', '[', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced632() throws Exception {
    char[] marg0 = { '(', '\u0000', '[', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced633() throws Exception {
    char[] marg0 = { '(', '\u0000', '[', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced634() throws Exception {
    char[] marg0 = { '(', '\u0000', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced635() throws Exception {
    char[] marg0 = { '(', '\u0000', '\u0000', '(', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced636() throws Exception {
    char[] marg0 = { '(', '\u0000', '\u0000', '(', ')', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced637() throws Exception {
    char[] marg0 = { '(', '\u0000', '\u0000', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced638() throws Exception {
    char[] marg0 = { '(', '\u0000', '\u0000', '(', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced639() throws Exception {
    char[] marg0 = { '(', '\u0000', '\u0000', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced640() throws Exception {
    char[] marg0 = { '(', '\u0000', '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced641() throws Exception {
    char[] marg0 = { '(', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced642() throws Exception {
    char[] marg0 = { '(', '\u0000', '\u0000', '[', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced643() throws Exception {
    char[] marg0 = { '(', '\u0000', '\u0000', '\u0000', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced644() throws Exception {
    char[] marg0 = { '(', '\u0000', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced645() throws Exception {
    char[] marg0 = { '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced646() throws Exception {
    char[] marg0 = { '(', '\u0000', '\u0000', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced647() throws Exception {
    char[] marg0 = { '(', '\u0000', '\u0000', '{', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced648() throws Exception {
    char[] marg0 = { '(', '\u0000', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced649() throws Exception {
    char[] marg0 = { '(', '\u0000', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced650() throws Exception {
    char[] marg0 = { '(', '\u0000', '{', '(', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced651() throws Exception {
    char[] marg0 = { '(', '\u0000', '{', '(', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced652() throws Exception {
    char[] marg0 = { '(', '\u0000', '{', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced653() throws Exception {
    char[] marg0 = { '(', '\u0000', '{', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced654() throws Exception {
    char[] marg0 = { '(', '\u0000', '{', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced655() throws Exception {
    char[] marg0 = { '(', '\u0000', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced656() throws Exception {
    char[] marg0 = { '(', '\u0000', '{', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced657() throws Exception {
    char[] marg0 = { '(', '\u0000', '{', '[', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced658() throws Exception {
    char[] marg0 = { '(', '\u0000', '{', ')', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced659() throws Exception {
    char[] marg0 = { '(', '\u0000', '{', ']', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced660() throws Exception {
    char[] marg0 = { '(', '\u0000', '{', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced661() throws Exception {
    char[] marg0 = { '(', '\u0000', '{', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced662() throws Exception {
    char[] marg0 = { '(', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced663() throws Exception {
    char[] marg0 = { '(', '\u0000', '{', '}', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced664() throws Exception {
    char[] marg0 = { '(', '\u0000', '{', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced665() throws Exception {
    char[] marg0 = { '(', '\u0000', '{', '{', '[', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced666() throws Exception {
    char[] marg0 = { '(', '\u0000', '{', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced667() throws Exception {
    char[] marg0 = { '(', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced668() throws Exception {
    char[] marg0 = { '(', '{', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced669() throws Exception {
    char[] marg0 = { '(', '{', '(', '(', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced670() throws Exception {
    char[] marg0 = { '(', '{', '(', '(', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced671() throws Exception {
    char[] marg0 = { '(', '{', '(', '(', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced672() throws Exception {
    char[] marg0 = { '(', '{', '(', '(', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced673() throws Exception {
    char[] marg0 = { '(', '{', '(', '(', '}', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced674() throws Exception {
    char[] marg0 = { '(', '{', '(', '(', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced675() throws Exception {
    char[] marg0 = { '(', '{', '(', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced676() throws Exception {
    char[] marg0 = { '(', '{', '(', '[', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced677() throws Exception {
    char[] marg0 = { '(', '{', '(', '[', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced678() throws Exception {
    char[] marg0 = { '(', '{', '(', '[', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced679() throws Exception {
    char[] marg0 = { '(', '{', '(', '[', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced680() throws Exception {
    char[] marg0 = { '(', '{', '(', '[', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced681() throws Exception {
    char[] marg0 = { '(', '{', '(', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced682() throws Exception {
    char[] marg0 = { '(', '{', '(', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced683() throws Exception {
    char[] marg0 = { '(', '{', '(', '\u0000', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced684() throws Exception {
    char[] marg0 = { '(', '{', '(', '\u0000', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced685() throws Exception {
    char[] marg0 = { '(', '{', '(', '\u0000', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced686() throws Exception {
    char[] marg0 = { '(', '{', '(', '\u0000', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced687() throws Exception {
    char[] marg0 = { '(', '{', '(', '}', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced688() throws Exception {
    char[] marg0 = { '(', '{', '(', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced689() throws Exception {
    char[] marg0 = { '(', '{', '(', '{', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced690() throws Exception {
    char[] marg0 = { '(', '{', '(', '{', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced691() throws Exception {
    char[] marg0 = { '(', '{', '(', '{', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced692() throws Exception {
    char[] marg0 = { '(', '{', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced693() throws Exception {
    char[] marg0 = { '(', '{', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced694() throws Exception {
    char[] marg0 = { '(', '{', '[', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced695() throws Exception {
    char[] marg0 = { '(', '{', '[', '(', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced696() throws Exception {
    char[] marg0 = { '(', '{', '[', '(', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced697() throws Exception {
    char[] marg0 = { '(', '{', '[', '(', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced698() throws Exception {
    char[] marg0 = { '(', '{', '[', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced699() throws Exception {
    char[] marg0 = { '(', '{', '[', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced700() throws Exception {
    char[] marg0 = { '(', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced701() throws Exception {
    char[] marg0 = { '(', '{', '[', '[', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced702() throws Exception {
    char[] marg0 = { '(', '{', '[', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced703() throws Exception {
    char[] marg0 = { '(', '{', '[', '[', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced704() throws Exception {
    char[] marg0 = { '(', '{', '[', ']', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced705() throws Exception {
    char[] marg0 = { '(', '{', '[', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced706() throws Exception {
    char[] marg0 = { '(', '{', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced707() throws Exception {
    char[] marg0 = { '(', '{', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced708() throws Exception {
    char[] marg0 = { '(', '{', '[', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced709() throws Exception {
    char[] marg0 = { '(', '{', '[', '}', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced710() throws Exception {
    char[] marg0 = { '(', '{', '[', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced711() throws Exception {
    char[] marg0 = { '(', '{', '[', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced712() throws Exception {
    char[] marg0 = { '(', '{', '[', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced713() throws Exception {
    char[] marg0 = { '(', '{', '[', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced714() throws Exception {
    char[] marg0 = { '(', '{', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced715() throws Exception {
    char[] marg0 = { '(', '{', ')', '[', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced716() throws Exception {
    char[] marg0 = { '(', '{', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced717() throws Exception {
    char[] marg0 = { '(', '{', ')', ']', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced718() throws Exception {
    char[] marg0 = { '(', '{', ')', '\u0000', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced719() throws Exception {
    char[] marg0 = { '(', '{', ')', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced720() throws Exception {
    char[] marg0 = { '(', '{', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced721() throws Exception {
    char[] marg0 = { '(', '{', '\u0000', '(', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced722() throws Exception {
    char[] marg0 = { '(', '{', '\u0000', '(', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced723() throws Exception {
    char[] marg0 = { '(', '{', '\u0000', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced724() throws Exception {
    char[] marg0 = { '(', '{', '\u0000', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced725() throws Exception {
    char[] marg0 = { '(', '{', '\u0000', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced726() throws Exception {
    char[] marg0 = { '(', '{', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced727() throws Exception {
    char[] marg0 = { '(', '{', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced728() throws Exception {
    char[] marg0 = { '(', '{', '\u0000', '[', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced729() throws Exception {
    char[] marg0 = { '(', '{', '\u0000', ')', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced730() throws Exception {
    char[] marg0 = { '(', '{', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced731() throws Exception {
    char[] marg0 = { '(', '{', '\u0000', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced732() throws Exception {
    char[] marg0 = { '(', '{', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced733() throws Exception {
    char[] marg0 = { '(', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced734() throws Exception {
    char[] marg0 = { '(', '{', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced735() throws Exception {
    char[] marg0 = { '(', '{', '\u0000', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced736() throws Exception {
    char[] marg0 = { '(', '{', '\u0000', '{', '[', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced737() throws Exception {
    char[] marg0 = { '(', '{', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced738() throws Exception {
    char[] marg0 = { '(', '{', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced739() throws Exception {
    char[] marg0 = { '(', '{', '{', '(', '[', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced740() throws Exception {
    char[] marg0 = { '(', '{', '{', '(', ')', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced741() throws Exception {
    char[] marg0 = { '(', '{', '{', '(', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced742() throws Exception {
    char[] marg0 = { '(', '{', '{', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced743() throws Exception {
    char[] marg0 = { '(', '{', '{', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced744() throws Exception {
    char[] marg0 = { '(', '{', '{', '[', '[', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced745() throws Exception {
    char[] marg0 = { '(', '{', '{', '[', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced746() throws Exception {
    char[] marg0 = { '(', '{', '{', '[', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced747() throws Exception {
    char[] marg0 = { '(', '{', '{', ')', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced748() throws Exception {
    char[] marg0 = { '(', '{', '{', ']', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced749() throws Exception {
    char[] marg0 = { '(', '{', '{', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced750() throws Exception {
    char[] marg0 = { '(', '{', '{', '\u0000', '[', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced751() throws Exception {
    char[] marg0 = { '(', '{', '{', '\u0000', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced752() throws Exception {
    char[] marg0 = { '(', '{', '{', '}', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced753() throws Exception {
    char[] marg0 = { '(', '{', '{', '{', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced754() throws Exception {
    char[] marg0 = { '(', '{', '{', '{', '[', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced755() throws Exception {
    char[] marg0 = { '(', '{', '{', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced756() throws Exception {
    char[] marg0 = { '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced757() throws Exception {
    char[] marg0 = { '[', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced758() throws Exception {
    char[] marg0 = { '[', '(', '(', '(', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced759() throws Exception {
    char[] marg0 = { '[', '(', '(', '(', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced760() throws Exception {
    char[] marg0 = { '[', '(', '(', '(', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced761() throws Exception {
    char[] marg0 = { '[', '(', '(', '(', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced762() throws Exception {
    char[] marg0 = { '[', '(', '(', '(', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced763() throws Exception {
    char[] marg0 = { '[', '(', '(', '(', '}', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced764() throws Exception {
    char[] marg0 = { '[', '(', '(', '(', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced765() throws Exception {
    char[] marg0 = { '[', '(', '(', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced766() throws Exception {
    char[] marg0 = { '[', '(', '(', '[', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced767() throws Exception {
    char[] marg0 = { '[', '(', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced768() throws Exception {
    char[] marg0 = { '[', '(', '(', '[', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced769() throws Exception {
    char[] marg0 = { '[', '(', '(', '[', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced770() throws Exception {
    char[] marg0 = { '[', '(', '(', '[', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced771() throws Exception {
    char[] marg0 = { '[', '(', '(', '[', '}', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced772() throws Exception {
    char[] marg0 = { '[', '(', '(', '[', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced773() throws Exception {
    char[] marg0 = { '[', '(', '(', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced774() throws Exception {
    char[] marg0 = { '[', '(', '(', ')' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced775() throws Exception {
    char[] marg0 = { '[', '(', '(', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced776() throws Exception {
    char[] marg0 = { '[', '(', '(', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced777() throws Exception {
    char[] marg0 = { '[', '(', '(', '\u0000', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced778() throws Exception {
    char[] marg0 = { '[', '(', '(', '\u0000', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced779() throws Exception {
    char[] marg0 = { '[', '(', '(', '\u0000', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced780() throws Exception {
    char[] marg0 = { '[', '(', '(', '\u0000', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced781() throws Exception {
    char[] marg0 = { '[', '(', '(', '}', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced782() throws Exception {
    char[] marg0 = { '[', '(', '(', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced783() throws Exception {
    char[] marg0 = { '[', '(', '(', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced784() throws Exception {
    char[] marg0 = { '[', '(', '(', '{', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced785() throws Exception {
    char[] marg0 = { '[', '(', '(', '{', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced786() throws Exception {
    char[] marg0 = { '[', '(', '(', '{', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced787() throws Exception {
    char[] marg0 = { '[', '(', '(', '{', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced788() throws Exception {
    char[] marg0 = { '[', '(', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced789() throws Exception {
    char[] marg0 = { '[', '(', '[', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced790() throws Exception {
    char[] marg0 = { '[', '(', '[', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced791() throws Exception {
    char[] marg0 = { '[', '(', '[', '(', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced792() throws Exception {
    char[] marg0 = { '[', '(', '[', '(', ']', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced793() throws Exception {
    char[] marg0 = { '[', '(', '[', '(', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced794() throws Exception {
    char[] marg0 = { '[', '(', '[', '(', '}', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced795() throws Exception {
    char[] marg0 = { '[', '(', '[', '(', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced796() throws Exception {
    char[] marg0 = { '[', '(', '[', '[', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced797() throws Exception {
    char[] marg0 = { '[', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced798() throws Exception {
    char[] marg0 = { '[', '(', '[', '[', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced799() throws Exception {
    char[] marg0 = { '[', '(', '[', '[', ']', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced800() throws Exception {
    char[] marg0 = { '[', '(', '[', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced801() throws Exception {
    char[] marg0 = { '[', '(', '[', '[', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced802() throws Exception {
    char[] marg0 = { '[', '(', '[', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced803() throws Exception {
    char[] marg0 = { '[', '(', '[', ']', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced804() throws Exception {
    char[] marg0 = { '[', '(', '[', '\u0000', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced805() throws Exception {
    char[] marg0 = { '[', '(', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced806() throws Exception {
    char[] marg0 = { '[', '(', '[', '\u0000', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced807() throws Exception {
    char[] marg0 = { '[', '(', '[', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced808() throws Exception {
    char[] marg0 = { '[', '(', '[', '\u0000', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced809() throws Exception {
    char[] marg0 = { '[', '(', '[', '}', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced810() throws Exception {
    char[] marg0 = { '[', '(', '[', '{', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced811() throws Exception {
    char[] marg0 = { '[', '(', '[', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced812() throws Exception {
    char[] marg0 = { '[', '(', '[', '{', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced813() throws Exception {
    char[] marg0 = { '[', '(', '[', '{', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced814() throws Exception {
    char[] marg0 = { '[', '(', '[', '{', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced815() throws Exception {
    char[] marg0 = { '[', '(', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced816() throws Exception {
    char[] marg0 = { '[', '(', ']', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced817() throws Exception {
    char[] marg0 = { '[', '(', ']', ')', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced818() throws Exception {
    char[] marg0 = { '[', '(', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced819() throws Exception {
    char[] marg0 = { '[', '(', ']', '\u0000', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced820() throws Exception {
    char[] marg0 = { '[', '(', ']', '{', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced821() throws Exception {
    char[] marg0 = { '[', '(', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced822() throws Exception {
    char[] marg0 = { '[', '(', '\u0000', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced823() throws Exception {
    char[] marg0 = { '[', '(', '\u0000', '(', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced824() throws Exception {
    char[] marg0 = { '[', '(', '\u0000', '(', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced825() throws Exception {
    char[] marg0 = { '[', '(', '\u0000', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced826() throws Exception {
    char[] marg0 = { '[', '(', '\u0000', '(', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced827() throws Exception {
    char[] marg0 = { '[', '(', '\u0000', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced828() throws Exception {
    char[] marg0 = { '[', '(', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced829() throws Exception {
    char[] marg0 = { '[', '(', '\u0000', '[', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced830() throws Exception {
    char[] marg0 = { '[', '(', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced831() throws Exception {
    char[] marg0 = { '[', '(', '\u0000', '[', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced832() throws Exception {
    char[] marg0 = { '[', '(', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced833() throws Exception {
    char[] marg0 = { '[', '(', '\u0000', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced834() throws Exception {
    char[] marg0 = { '[', '(', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced835() throws Exception {
    char[] marg0 = { '[', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced836() throws Exception {
    char[] marg0 = { '[', '(', '\u0000', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced837() throws Exception {
    char[] marg0 = { '[', '(', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced838() throws Exception {
    char[] marg0 = { '[', '(', '\u0000', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced839() throws Exception {
    char[] marg0 = { '[', '(', '\u0000', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced840() throws Exception {
    char[] marg0 = { '[', '(', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced841() throws Exception {
    char[] marg0 = { '[', '(', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced842() throws Exception {
    char[] marg0 = { '[', '(', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced843() throws Exception {
    char[] marg0 = { '[', '(', '{', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced844() throws Exception {
    char[] marg0 = { '[', '(', '{', '(', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced845() throws Exception {
    char[] marg0 = { '[', '(', '{', '(', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced846() throws Exception {
    char[] marg0 = { '[', '(', '{', '(', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced847() throws Exception {
    char[] marg0 = { '[', '(', '{', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced848() throws Exception {
    char[] marg0 = { '[', '(', '{', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced849() throws Exception {
    char[] marg0 = { '[', '(', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced850() throws Exception {
    char[] marg0 = { '[', '(', '{', '[', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced851() throws Exception {
    char[] marg0 = { '[', '(', '{', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced852() throws Exception {
    char[] marg0 = { '[', '(', '{', '[', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced853() throws Exception {
    char[] marg0 = { '[', '(', '{', ')', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced854() throws Exception {
    char[] marg0 = { '[', '(', '{', ']', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced855() throws Exception {
    char[] marg0 = { '[', '(', '{', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced856() throws Exception {
    char[] marg0 = { '[', '(', '{', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced857() throws Exception {
    char[] marg0 = { '[', '(', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced858() throws Exception {
    char[] marg0 = { '[', '(', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced859() throws Exception {
    char[] marg0 = { '[', '(', '{', '}', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced860() throws Exception {
    char[] marg0 = { '[', '(', '{', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced861() throws Exception {
    char[] marg0 = { '[', '(', '{', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced862() throws Exception {
    char[] marg0 = { '[', '(', '{', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced863() throws Exception {
    char[] marg0 = { '[', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced864() throws Exception {
    char[] marg0 = { '[', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced865() throws Exception {
    char[] marg0 = { '[', '[', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced866() throws Exception {
    char[] marg0 = { '[', '[', '(', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced867() throws Exception {
    char[] marg0 = { '[', '[', '(', '(', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced868() throws Exception {
    char[] marg0 = { '[', '[', '(', '(', ']', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced869() throws Exception {
    char[] marg0 = { '[', '[', '(', '(', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced870() throws Exception {
    char[] marg0 = { '[', '[', '(', '(', '}', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced871() throws Exception {
    char[] marg0 = { '[', '[', '(', '(', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced872() throws Exception {
    char[] marg0 = { '[', '[', '(', '[', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced873() throws Exception {
    char[] marg0 = { '[', '[', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced874() throws Exception {
    char[] marg0 = { '[', '[', '(', '[', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced875() throws Exception {
    char[] marg0 = { '[', '[', '(', '[', ']', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced876() throws Exception {
    char[] marg0 = { '[', '[', '(', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced877() throws Exception {
    char[] marg0 = { '[', '[', '(', '[', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced878() throws Exception {
    char[] marg0 = { '[', '[', '(', ']', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced879() throws Exception {
    char[] marg0 = { '[', '[', '(', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced880() throws Exception {
    char[] marg0 = { '[', '[', '(', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced881() throws Exception {
    char[] marg0 = { '[', '[', '(', '\u0000', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced882() throws Exception {
    char[] marg0 = { '[', '[', '(', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced883() throws Exception {
    char[] marg0 = { '[', '[', '(', '\u0000', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced884() throws Exception {
    char[] marg0 = { '[', '[', '(', '}', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced885() throws Exception {
    char[] marg0 = { '[', '[', '(', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced886() throws Exception {
    char[] marg0 = { '[', '[', '(', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced887() throws Exception {
    char[] marg0 = { '[', '[', '(', '{', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced888() throws Exception {
    char[] marg0 = { '[', '[', '(', '{', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced889() throws Exception {
    char[] marg0 = { '[', '[', '(', '{', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced890() throws Exception {
    char[] marg0 = { '[', '[', '[', '(', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced891() throws Exception {
    char[] marg0 = { '[', '[', '[', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced892() throws Exception {
    char[] marg0 = { '[', '[', '[', '(', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced893() throws Exception {
    char[] marg0 = { '[', '[', '[', '(', ']', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced894() throws Exception {
    char[] marg0 = { '[', '[', '[', '(', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced895() throws Exception {
    char[] marg0 = { '[', '[', '[', '(', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced896() throws Exception {
    char[] marg0 = { '[', '[', '[', '[', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced897() throws Exception {
    char[] marg0 = { '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced898() throws Exception {
    char[] marg0 = { '[', '[', '[', '[', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced899() throws Exception {
    char[] marg0 = { '[', '[', '[', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced900() throws Exception {
    char[] marg0 = { '[', '[', '[', '[', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced901() throws Exception {
    char[] marg0 = { '[', '[', '[', ']', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced902() throws Exception {
    char[] marg0 = { '[', '[', '[', '\u0000', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced903() throws Exception {
    char[] marg0 = { '[', '[', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced904() throws Exception {
    char[] marg0 = { '[', '[', '[', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced905() throws Exception {
    char[] marg0 = { '[', '[', '[', '\u0000', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced906() throws Exception {
    char[] marg0 = { '[', '[', '[', '}', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced907() throws Exception {
    char[] marg0 = { '[', '[', '[', '{', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced908() throws Exception {
    char[] marg0 = { '[', '[', '[', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced909() throws Exception {
    char[] marg0 = { '[', '[', '[', '{', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced910() throws Exception {
    char[] marg0 = { '[', '[', '[', '{', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced911() throws Exception {
    char[] marg0 = { '[', '[', ']', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced912() throws Exception {
    char[] marg0 = { '[', '[', ']', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced913() throws Exception {
    char[] marg0 = { '[', '[', ']', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced914() throws Exception {
    char[] marg0 = { '[', '[', ']', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced915() throws Exception {
    char[] marg0 = { '[', '[', ']', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced916() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '(', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced917() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced918() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '(', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced919() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced920() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '(', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced921() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '[', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced922() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced923() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced924() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '[', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced925() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced926() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', ']', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced927() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '\u0000', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced928() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced929() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced930() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '}', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced931() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '{', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced932() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced933() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced934() throws Exception {
    char[] marg0 = { '[', '[', '{', '(', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced935() throws Exception {
    char[] marg0 = { '[', '[', '{', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced936() throws Exception {
    char[] marg0 = { '[', '[', '{', '(', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced937() throws Exception {
    char[] marg0 = { '[', '[', '{', '(', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced938() throws Exception {
    char[] marg0 = { '[', '[', '{', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced939() throws Exception {
    char[] marg0 = { '[', '[', '{', '[', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced940() throws Exception {
    char[] marg0 = { '[', '[', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced941() throws Exception {
    char[] marg0 = { '[', '[', '{', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced942() throws Exception {
    char[] marg0 = { '[', '[', '{', '[', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced943() throws Exception {
    char[] marg0 = { '[', '[', '{', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced944() throws Exception {
    char[] marg0 = { '[', '[', '{', ']', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced945() throws Exception {
    char[] marg0 = { '[', '[', '{', '\u0000', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced946() throws Exception {
    char[] marg0 = { '[', '[', '{', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced947() throws Exception {
    char[] marg0 = { '[', '[', '{', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced948() throws Exception {
    char[] marg0 = { '[', '[', '{', '}', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced949() throws Exception {
    char[] marg0 = { '[', '[', '{', '{', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced950() throws Exception {
    char[] marg0 = { '[', '[', '{', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced951() throws Exception {
    char[] marg0 = { '[', '[', '{', '{', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced952() throws Exception {
    char[] marg0 = { '[', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced953() throws Exception {
    char[] marg0 = { '[', '\u0000', '(', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced954() throws Exception {
    char[] marg0 = { '[', '\u0000', '(', '(', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced955() throws Exception {
    char[] marg0 = { '[', '\u0000', '(', '(', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced956() throws Exception {
    char[] marg0 = { '[', '\u0000', '(', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced957() throws Exception {
    char[] marg0 = { '[', '\u0000', '(', '(', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced958() throws Exception {
    char[] marg0 = { '[', '\u0000', '(', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced959() throws Exception {
    char[] marg0 = { '[', '\u0000', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced960() throws Exception {
    char[] marg0 = { '[', '\u0000', '(', '[', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced961() throws Exception {
    char[] marg0 = { '[', '\u0000', '(', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced962() throws Exception {
    char[] marg0 = { '[', '\u0000', '(', '[', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced963() throws Exception {
    char[] marg0 = { '[', '\u0000', '(', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced964() throws Exception {
    char[] marg0 = { '[', '\u0000', '(', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced965() throws Exception {
    char[] marg0 = { '[', '\u0000', '(', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced966() throws Exception {
    char[] marg0 = { '[', '\u0000', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced967() throws Exception {
    char[] marg0 = { '[', '\u0000', '(', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced968() throws Exception {
    char[] marg0 = { '[', '\u0000', '(', '}', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced969() throws Exception {
    char[] marg0 = { '[', '\u0000', '(', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced970() throws Exception {
    char[] marg0 = { '[', '\u0000', '(', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced971() throws Exception {
    char[] marg0 = { '[', '\u0000', '(', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced972() throws Exception {
    char[] marg0 = { '[', '\u0000', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced973() throws Exception {
    char[] marg0 = { '[', '\u0000', '[', '(', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced974() throws Exception {
    char[] marg0 = { '[', '\u0000', '[', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced975() throws Exception {
    char[] marg0 = { '[', '\u0000', '[', '(', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced976() throws Exception {
    char[] marg0 = { '[', '\u0000', '[', '(', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced977() throws Exception {
    char[] marg0 = { '[', '\u0000', '[', '(', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced978() throws Exception {
    char[] marg0 = { '[', '\u0000', '[', '[', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced979() throws Exception {
    char[] marg0 = { '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced980() throws Exception {
    char[] marg0 = { '[', '\u0000', '[', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced981() throws Exception {
    char[] marg0 = { '[', '\u0000', '[', '[', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced982() throws Exception {
    char[] marg0 = { '[', '\u0000', '[', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced983() throws Exception {
    char[] marg0 = { '[', '\u0000', '[', ']', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced984() throws Exception {
    char[] marg0 = { '[', '\u0000', '[', '\u0000', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced985() throws Exception {
    char[] marg0 = { '[', '\u0000', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced986() throws Exception {
    char[] marg0 = { '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced987() throws Exception {
    char[] marg0 = { '[', '\u0000', '[', '}', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced988() throws Exception {
    char[] marg0 = { '[', '\u0000', '[', '{', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced989() throws Exception {
    char[] marg0 = { '[', '\u0000', '[', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced990() throws Exception {
    char[] marg0 = { '[', '\u0000', '[', '{', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced991() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '(', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced992() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced993() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced994() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '(', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced995() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '[', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced996() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced997() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced998() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '\u0000', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced999() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1000() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1001() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1002() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '{', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1003() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1004() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1005() throws Exception {
    char[] marg0 = { '[', '\u0000', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1006() throws Exception {
    char[] marg0 = { '[', '\u0000', '{', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1007() throws Exception {
    char[] marg0 = { '[', '\u0000', '{', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1008() throws Exception {
    char[] marg0 = { '[', '\u0000', '{', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1009() throws Exception {
    char[] marg0 = { '[', '\u0000', '{', '[', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1010() throws Exception {
    char[] marg0 = { '[', '\u0000', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1011() throws Exception {
    char[] marg0 = { '[', '\u0000', '{', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1012() throws Exception {
    char[] marg0 = { '[', '\u0000', '{', ')', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1013() throws Exception {
    char[] marg0 = { '[', '\u0000', '{', ']', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1014() throws Exception {
    char[] marg0 = { '[', '\u0000', '{', '\u0000', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1015() throws Exception {
    char[] marg0 = { '[', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1016() throws Exception {
    char[] marg0 = { '[', '\u0000', '{', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1017() throws Exception {
    char[] marg0 = { '[', '\u0000', '{', '}', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1018() throws Exception {
    char[] marg0 = { '[', '\u0000', '{', '{', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1019() throws Exception {
    char[] marg0 = { '[', '\u0000', '{', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1020() throws Exception {
    char[] marg0 = { '[', '\u0000', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1021() throws Exception {
    char[] marg0 = { '[', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1022() throws Exception {
    char[] marg0 = { '[', '{', '(', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1023() throws Exception {
    char[] marg0 = { '[', '{', '(', '(', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1024() throws Exception {
    char[] marg0 = { '[', '{', '(', '(', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1025() throws Exception {
    char[] marg0 = { '[', '{', '(', '(', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1026() throws Exception {
    char[] marg0 = { '[', '{', '(', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1027() throws Exception {
    char[] marg0 = { '[', '{', '(', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1028() throws Exception {
    char[] marg0 = { '[', '{', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1029() throws Exception {
    char[] marg0 = { '[', '{', '(', '[', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1030() throws Exception {
    char[] marg0 = { '[', '{', '(', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1031() throws Exception {
    char[] marg0 = { '[', '{', '(', '[', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1032() throws Exception {
    char[] marg0 = { '[', '{', '(', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1033() throws Exception {
    char[] marg0 = { '[', '{', '(', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1034() throws Exception {
    char[] marg0 = { '[', '{', '(', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1035() throws Exception {
    char[] marg0 = { '[', '{', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1036() throws Exception {
    char[] marg0 = { '[', '{', '(', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1037() throws Exception {
    char[] marg0 = { '[', '{', '(', '}', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1038() throws Exception {
    char[] marg0 = { '[', '{', '(', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1039() throws Exception {
    char[] marg0 = { '[', '{', '(', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1040() throws Exception {
    char[] marg0 = { '[', '{', '(', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1041() throws Exception {
    char[] marg0 = { '[', '{', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1042() throws Exception {
    char[] marg0 = { '[', '{', '[', '(', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1043() throws Exception {
    char[] marg0 = { '[', '{', '[', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1044() throws Exception {
    char[] marg0 = { '[', '{', '[', '(', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1045() throws Exception {
    char[] marg0 = { '[', '{', '[', '(', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1046() throws Exception {
    char[] marg0 = { '[', '{', '[', '(', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1047() throws Exception {
    char[] marg0 = { '[', '{', '[', '[', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1048() throws Exception {
    char[] marg0 = { '[', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1049() throws Exception {
    char[] marg0 = { '[', '{', '[', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1050() throws Exception {
    char[] marg0 = { '[', '{', '[', '[', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1051() throws Exception {
    char[] marg0 = { '[', '{', '[', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1052() throws Exception {
    char[] marg0 = { '[', '{', '[', ']', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1053() throws Exception {
    char[] marg0 = { '[', '{', '[', '\u0000', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1054() throws Exception {
    char[] marg0 = { '[', '{', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1055() throws Exception {
    char[] marg0 = { '[', '{', '[', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1056() throws Exception {
    char[] marg0 = { '[', '{', '[', '}', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1057() throws Exception {
    char[] marg0 = { '[', '{', '[', '{', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1058() throws Exception {
    char[] marg0 = { '[', '{', '[', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1059() throws Exception {
    char[] marg0 = { '[', '{', '[', '{', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1060() throws Exception {
    char[] marg0 = { '[', '{', ']', '(', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1061() throws Exception {
    char[] marg0 = { '[', '{', ']', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1062() throws Exception {
    char[] marg0 = { '[', '{', ']', '\u0000', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1063() throws Exception {
    char[] marg0 = { '[', '{', ']', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1064() throws Exception {
    char[] marg0 = { '[', '{', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1065() throws Exception {
    char[] marg0 = { '[', '{', '\u0000', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1066() throws Exception {
    char[] marg0 = { '[', '{', '\u0000', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1067() throws Exception {
    char[] marg0 = { '[', '{', '\u0000', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1068() throws Exception {
    char[] marg0 = { '[', '{', '\u0000', '[', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1069() throws Exception {
    char[] marg0 = { '[', '{', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1070() throws Exception {
    char[] marg0 = { '[', '{', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1071() throws Exception {
    char[] marg0 = { '[', '{', '\u0000', ')', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1072() throws Exception {
    char[] marg0 = { '[', '{', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1073() throws Exception {
    char[] marg0 = { '[', '{', '\u0000', '\u0000', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1074() throws Exception {
    char[] marg0 = { '[', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1075() throws Exception {
    char[] marg0 = { '[', '{', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1076() throws Exception {
    char[] marg0 = { '[', '{', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1077() throws Exception {
    char[] marg0 = { '[', '{', '\u0000', '{', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1078() throws Exception {
    char[] marg0 = { '[', '{', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1079() throws Exception {
    char[] marg0 = { '[', '{', '\u0000', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1080() throws Exception {
    char[] marg0 = { '[', '{', '{', '(', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1081() throws Exception {
    char[] marg0 = { '[', '{', '{', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1082() throws Exception {
    char[] marg0 = { '[', '{', '{', '(', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1083() throws Exception {
    char[] marg0 = { '[', '{', '{', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1084() throws Exception {
    char[] marg0 = { '[', '{', '{', '[', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1085() throws Exception {
    char[] marg0 = { '[', '{', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1086() throws Exception {
    char[] marg0 = { '[', '{', '{', '[', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1087() throws Exception {
    char[] marg0 = { '[', '{', '{', ')', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1088() throws Exception {
    char[] marg0 = { '[', '{', '{', ']', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1089() throws Exception {
    char[] marg0 = { '[', '{', '{', '\u0000', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1090() throws Exception {
    char[] marg0 = { '[', '{', '{', '\u0000', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1091() throws Exception {
    char[] marg0 = { '[', '{', '{', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1092() throws Exception {
    char[] marg0 = { '[', '{', '{', '}', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1093() throws Exception {
    char[] marg0 = { '[', '{', '{', '{', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1094() throws Exception {
    char[] marg0 = { '[', '{', '{', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1095() throws Exception {
    char[] marg0 = { '[', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1096() throws Exception {
    char[] marg0 = { '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1097() throws Exception {
    char[] marg0 = { '\u0000', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1098() throws Exception {
    char[] marg0 = { '\u0000', '(', '(', '(', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1099() throws Exception {
    char[] marg0 = { '\u0000', '(', '(', '(', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1100() throws Exception {
    char[] marg0 = { '\u0000', '(', '(', '(', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1101() throws Exception {
    char[] marg0 = { '\u0000', '(', '(', '(', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1102() throws Exception {
    char[] marg0 = { '\u0000', '(', '(', '(', '}', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1103() throws Exception {
    char[] marg0 = { '\u0000', '(', '(', '(', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1104() throws Exception {
    char[] marg0 = { '\u0000', '(', '(', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1105() throws Exception {
    char[] marg0 = { '\u0000', '(', '(', '[', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1106() throws Exception {
    char[] marg0 = { '\u0000', '(', '(', '[', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1107() throws Exception {
    char[] marg0 = { '\u0000', '(', '(', '[', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1108() throws Exception {
    char[] marg0 = { '\u0000', '(', '(', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1109() throws Exception {
    char[] marg0 = { '\u0000', '(', '(', '[', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1110() throws Exception {
    char[] marg0 = { '\u0000', '(', '(', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1111() throws Exception {
    char[] marg0 = { '\u0000', '(', '(', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1112() throws Exception {
    char[] marg0 = { '\u0000', '(', '(', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1113() throws Exception {
    char[] marg0 = { '\u0000', '(', '(', '\u0000', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1114() throws Exception {
    char[] marg0 = { '\u0000', '(', '(', '\u0000', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1115() throws Exception {
    char[] marg0 = { '\u0000', '(', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1116() throws Exception {
    char[] marg0 = { '\u0000', '(', '(', '\u0000', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1117() throws Exception {
    char[] marg0 = { '\u0000', '(', '(', '}', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1118() throws Exception {
    char[] marg0 = { '\u0000', '(', '(', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1119() throws Exception {
    char[] marg0 = { '\u0000', '(', '(', '{', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1120() throws Exception {
    char[] marg0 = { '\u0000', '(', '(', '{', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1121() throws Exception {
    char[] marg0 = { '\u0000', '(', '(', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1122() throws Exception {
    char[] marg0 = { '\u0000', '(', '(', '{', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1123() throws Exception {
    char[] marg0 = { '\u0000', '(', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1124() throws Exception {
    char[] marg0 = { '\u0000', '(', '[', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1125() throws Exception {
    char[] marg0 = { '\u0000', '(', '[', '(', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1126() throws Exception {
    char[] marg0 = { '\u0000', '(', '[', '(', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1127() throws Exception {
    char[] marg0 = { '\u0000', '(', '[', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1128() throws Exception {
    char[] marg0 = { '\u0000', '(', '[', '(', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1129() throws Exception {
    char[] marg0 = { '\u0000', '(', '[', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1130() throws Exception {
    char[] marg0 = { '\u0000', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1131() throws Exception {
    char[] marg0 = { '\u0000', '(', '[', '[', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1132() throws Exception {
    char[] marg0 = { '\u0000', '(', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1133() throws Exception {
    char[] marg0 = { '\u0000', '(', '[', '[', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1134() throws Exception {
    char[] marg0 = { '\u0000', '(', '[', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1135() throws Exception {
    char[] marg0 = { '\u0000', '(', '[', ']', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1136() throws Exception {
    char[] marg0 = { '\u0000', '(', '[', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1137() throws Exception {
    char[] marg0 = { '\u0000', '(', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1138() throws Exception {
    char[] marg0 = { '\u0000', '(', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1139() throws Exception {
    char[] marg0 = { '\u0000', '(', '[', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1140() throws Exception {
    char[] marg0 = { '\u0000', '(', '[', '}', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1141() throws Exception {
    char[] marg0 = { '\u0000', '(', '[', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1142() throws Exception {
    char[] marg0 = { '\u0000', '(', '[', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1143() throws Exception {
    char[] marg0 = { '\u0000', '(', '[', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1144() throws Exception {
    char[] marg0 = { '\u0000', '(', '[', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1145() throws Exception {
    char[] marg0 = { '\u0000', '(', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1146() throws Exception {
    char[] marg0 = { '\u0000', '(', '\u0000', '(', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1147() throws Exception {
    char[] marg0 = { '\u0000', '(', '\u0000', '(', ')', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1148() throws Exception {
    char[] marg0 = { '\u0000', '(', '\u0000', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1149() throws Exception {
    char[] marg0 = { '\u0000', '(', '\u0000', '(', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1150() throws Exception {
    char[] marg0 = { '\u0000', '(', '\u0000', '[', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1151() throws Exception {
    char[] marg0 = { '\u0000', '(', '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1152() throws Exception {
    char[] marg0 = { '\u0000', '(', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1153() throws Exception {
    char[] marg0 = { '\u0000', '(', '\u0000', '[', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1154() throws Exception {
    char[] marg0 = { '\u0000', '(', '\u0000', '\u0000', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1155() throws Exception {
    char[] marg0 = { '\u0000', '(', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1156() throws Exception {
    char[] marg0 = { '\u0000', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1157() throws Exception {
    char[] marg0 = { '\u0000', '(', '\u0000', '{', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1158() throws Exception {
    char[] marg0 = { '\u0000', '(', '\u0000', '{', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1159() throws Exception {
    char[] marg0 = { '\u0000', '(', '\u0000', '{', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1160() throws Exception {
    char[] marg0 = { '\u0000', '(', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1161() throws Exception {
    char[] marg0 = { '\u0000', '(', '{', '(', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1162() throws Exception {
    char[] marg0 = { '\u0000', '(', '{', '(', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1163() throws Exception {
    char[] marg0 = { '\u0000', '(', '{', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1164() throws Exception {
    char[] marg0 = { '\u0000', '(', '{', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1165() throws Exception {
    char[] marg0 = { '\u0000', '(', '{', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1166() throws Exception {
    char[] marg0 = { '\u0000', '(', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1167() throws Exception {
    char[] marg0 = { '\u0000', '(', '{', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1168() throws Exception {
    char[] marg0 = { '\u0000', '(', '{', '[', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1169() throws Exception {
    char[] marg0 = { '\u0000', '(', '{', ')', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1170() throws Exception {
    char[] marg0 = { '\u0000', '(', '{', ']', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1171() throws Exception {
    char[] marg0 = { '\u0000', '(', '{', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1172() throws Exception {
    char[] marg0 = { '\u0000', '(', '{', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1173() throws Exception {
    char[] marg0 = { '\u0000', '(', '{', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1174() throws Exception {
    char[] marg0 = { '\u0000', '(', '{', '}', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1175() throws Exception {
    char[] marg0 = { '\u0000', '(', '{', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1176() throws Exception {
    char[] marg0 = { '\u0000', '(', '{', '{', '[', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1177() throws Exception {
    char[] marg0 = { '\u0000', '(', '{', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1178() throws Exception {
    char[] marg0 = { '\u0000', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1179() throws Exception {
    char[] marg0 = { '\u0000', '[', '(', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1180() throws Exception {
    char[] marg0 = { '\u0000', '[', '(', '(', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1181() throws Exception {
    char[] marg0 = { '\u0000', '[', '(', '(', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1182() throws Exception {
    char[] marg0 = { '\u0000', '[', '(', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1183() throws Exception {
    char[] marg0 = { '\u0000', '[', '(', '(', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1184() throws Exception {
    char[] marg0 = { '\u0000', '[', '(', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1185() throws Exception {
    char[] marg0 = { '\u0000', '[', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1186() throws Exception {
    char[] marg0 = { '\u0000', '[', '(', '[', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1187() throws Exception {
    char[] marg0 = { '\u0000', '[', '(', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1188() throws Exception {
    char[] marg0 = { '\u0000', '[', '(', '[', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1189() throws Exception {
    char[] marg0 = { '\u0000', '[', '(', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1190() throws Exception {
    char[] marg0 = { '\u0000', '[', '(', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1191() throws Exception {
    char[] marg0 = { '\u0000', '[', '(', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1192() throws Exception {
    char[] marg0 = { '\u0000', '[', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1193() throws Exception {
    char[] marg0 = { '\u0000', '[', '(', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1194() throws Exception {
    char[] marg0 = { '\u0000', '[', '(', '}', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1195() throws Exception {
    char[] marg0 = { '\u0000', '[', '(', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1196() throws Exception {
    char[] marg0 = { '\u0000', '[', '(', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1197() throws Exception {
    char[] marg0 = { '\u0000', '[', '(', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1198() throws Exception {
    char[] marg0 = { '\u0000', '[', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1199() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', '(', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1200() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1201() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', '(', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1202() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1203() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', '(', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1204() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', '[', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1205() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1206() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1207() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', '[', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1208() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1209() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', ']', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1210() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', '\u0000', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1211() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1212() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1213() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', '}', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1214() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', '{', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1215() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1216() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1217() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '(', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1218() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '(', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1219() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1220() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '(', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1221() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '[', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1222() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1223() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1224() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '\u0000', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1225() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1226() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1227() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1228() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '{', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1229() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1230() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1231() throws Exception {
    char[] marg0 = { '\u0000', '[', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1232() throws Exception {
    char[] marg0 = { '\u0000', '[', '{', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1233() throws Exception {
    char[] marg0 = { '\u0000', '[', '{', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1234() throws Exception {
    char[] marg0 = { '\u0000', '[', '{', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1235() throws Exception {
    char[] marg0 = { '\u0000', '[', '{', '[', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1236() throws Exception {
    char[] marg0 = { '\u0000', '[', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1237() throws Exception {
    char[] marg0 = { '\u0000', '[', '{', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1238() throws Exception {
    char[] marg0 = { '\u0000', '[', '{', ')', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1239() throws Exception {
    char[] marg0 = { '\u0000', '[', '{', ']', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1240() throws Exception {
    char[] marg0 = { '\u0000', '[', '{', '\u0000', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1241() throws Exception {
    char[] marg0 = { '\u0000', '[', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1242() throws Exception {
    char[] marg0 = { '\u0000', '[', '{', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1243() throws Exception {
    char[] marg0 = { '\u0000', '[', '{', '}', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1244() throws Exception {
    char[] marg0 = { '\u0000', '[', '{', '{', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1245() throws Exception {
    char[] marg0 = { '\u0000', '[', '{', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1246() throws Exception {
    char[] marg0 = { '\u0000', '[', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1247() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1248() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '(', '(', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1249() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '(', '(', ')', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1250() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '(', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1251() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '(', '(', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1252() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '(', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1253() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '(', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1254() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '(', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1255() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '(', '[', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1256() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '(', '\u0000', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1257() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '(', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1258() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1259() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '(', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1260() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '(', '{', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1261() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '(', '{', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1262() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '(', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1263() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1264() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1265() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '(', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1266() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '[', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1267() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1268() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '[', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1269() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '\u0000', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1270() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1271() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1272() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1273() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '{', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1274() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1275() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1276() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '(', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1277() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '(', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1278() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1279() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '[', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1280() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1281() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1282() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1283() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1284() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1285() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1286() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1287() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '{', '(', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1288() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '{', '(', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1289() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '{', '(', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1290() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '{', '[', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1291() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '{', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1292() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '{', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1293() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '{', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1294() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1295() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '{', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1296() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '{', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1297() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '{', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1298() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1299() throws Exception {
    char[] marg0 = { '\u0000', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1300() throws Exception {
    char[] marg0 = { '\u0000', '{', '(', '(', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1301() throws Exception {
    char[] marg0 = { '\u0000', '{', '(', '(', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1302() throws Exception {
    char[] marg0 = { '\u0000', '{', '(', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1303() throws Exception {
    char[] marg0 = { '\u0000', '{', '(', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1304() throws Exception {
    char[] marg0 = { '\u0000', '{', '(', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1305() throws Exception {
    char[] marg0 = { '\u0000', '{', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1306() throws Exception {
    char[] marg0 = { '\u0000', '{', '(', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1307() throws Exception {
    char[] marg0 = { '\u0000', '{', '(', '[', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1308() throws Exception {
    char[] marg0 = { '\u0000', '{', '(', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1309() throws Exception {
    char[] marg0 = { '\u0000', '{', '(', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1310() throws Exception {
    char[] marg0 = { '\u0000', '{', '(', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1311() throws Exception {
    char[] marg0 = { '\u0000', '{', '(', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1312() throws Exception {
    char[] marg0 = { '\u0000', '{', '(', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1313() throws Exception {
    char[] marg0 = { '\u0000', '{', '(', '}', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1314() throws Exception {
    char[] marg0 = { '\u0000', '{', '(', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1315() throws Exception {
    char[] marg0 = { '\u0000', '{', '(', '{', '[', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1316() throws Exception {
    char[] marg0 = { '\u0000', '{', '(', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1317() throws Exception {
    char[] marg0 = { '\u0000', '{', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1318() throws Exception {
    char[] marg0 = { '\u0000', '{', '[', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1319() throws Exception {
    char[] marg0 = { '\u0000', '{', '[', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1320() throws Exception {
    char[] marg0 = { '\u0000', '{', '[', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1321() throws Exception {
    char[] marg0 = { '\u0000', '{', '[', '[', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1322() throws Exception {
    char[] marg0 = { '\u0000', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1323() throws Exception {
    char[] marg0 = { '\u0000', '{', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1324() throws Exception {
    char[] marg0 = { '\u0000', '{', '[', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1325() throws Exception {
    char[] marg0 = { '\u0000', '{', '[', ']', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1326() throws Exception {
    char[] marg0 = { '\u0000', '{', '[', '\u0000', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1327() throws Exception {
    char[] marg0 = { '\u0000', '{', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1328() throws Exception {
    char[] marg0 = { '\u0000', '{', '[', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1329() throws Exception {
    char[] marg0 = { '\u0000', '{', '[', '}', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1330() throws Exception {
    char[] marg0 = { '\u0000', '{', '[', '{', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1331() throws Exception {
    char[] marg0 = { '\u0000', '{', '[', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1332() throws Exception {
    char[] marg0 = { '\u0000', '{', '[', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1333() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', '(', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1334() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', '(', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1335() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', '(', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1336() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', '[', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1337() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1338() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1339() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1340() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1341() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1342() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1343() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1344() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1345() throws Exception {
    char[] marg0 = { '\u0000', '{', '{', '(', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1346() throws Exception {
    char[] marg0 = { '\u0000', '{', '{', '(', '[', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1347() throws Exception {
    char[] marg0 = { '\u0000', '{', '{', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1348() throws Exception {
    char[] marg0 = { '\u0000', '{', '{', '[', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1349() throws Exception {
    char[] marg0 = { '\u0000', '{', '{', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1350() throws Exception {
    char[] marg0 = { '\u0000', '{', '{', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1351() throws Exception {
    char[] marg0 = { '\u0000', '{', '{', ')', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1352() throws Exception {
    char[] marg0 = { '\u0000', '{', '{', ']', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1353() throws Exception {
    char[] marg0 = { '\u0000', '{', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1354() throws Exception {
    char[] marg0 = { '\u0000', '{', '{', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1355() throws Exception {
    char[] marg0 = { '\u0000', '{', '{', '}', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1356() throws Exception {
    char[] marg0 = { '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1357() throws Exception {
    char[] marg0 = { '\u0000', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1358() throws Exception {
    char[] marg0 = { '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1359() throws Exception {
    char[] marg0 = { '{', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1360() throws Exception {
    char[] marg0 = { '{', '(', '(', '(', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1361() throws Exception {
    char[] marg0 = { '{', '(', '(', '(', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1362() throws Exception {
    char[] marg0 = { '{', '(', '(', '(', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1363() throws Exception {
    char[] marg0 = { '{', '(', '(', '(', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1364() throws Exception {
    char[] marg0 = { '{', '(', '(', '(', '}', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1365() throws Exception {
    char[] marg0 = { '{', '(', '(', '(', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1366() throws Exception {
    char[] marg0 = { '{', '(', '(', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1367() throws Exception {
    char[] marg0 = { '{', '(', '(', '[', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1368() throws Exception {
    char[] marg0 = { '{', '(', '(', '[', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1369() throws Exception {
    char[] marg0 = { '{', '(', '(', '[', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1370() throws Exception {
    char[] marg0 = { '{', '(', '(', '[', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1371() throws Exception {
    char[] marg0 = { '{', '(', '(', '[', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1372() throws Exception {
    char[] marg0 = { '{', '(', '(', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1373() throws Exception {
    char[] marg0 = { '{', '(', '(', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1374() throws Exception {
    char[] marg0 = { '{', '(', '(', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1375() throws Exception {
    char[] marg0 = { '{', '(', '(', '\u0000', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1376() throws Exception {
    char[] marg0 = { '{', '(', '(', '\u0000', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1377() throws Exception {
    char[] marg0 = { '{', '(', '(', '\u0000', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1378() throws Exception {
    char[] marg0 = { '{', '(', '(', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1379() throws Exception {
    char[] marg0 = { '{', '(', '(', '}', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1380() throws Exception {
    char[] marg0 = { '{', '(', '(', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1381() throws Exception {
    char[] marg0 = { '{', '(', '(', '{', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1382() throws Exception {
    char[] marg0 = { '{', '(', '(', '{', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1383() throws Exception {
    char[] marg0 = { '{', '(', '(', '{', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1384() throws Exception {
    char[] marg0 = { '{', '(', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1385() throws Exception {
    char[] marg0 = { '{', '(', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1386() throws Exception {
    char[] marg0 = { '{', '(', '[', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1387() throws Exception {
    char[] marg0 = { '{', '(', '[', '(', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1388() throws Exception {
    char[] marg0 = { '{', '(', '[', '(', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1389() throws Exception {
    char[] marg0 = { '{', '(', '[', '(', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1390() throws Exception {
    char[] marg0 = { '{', '(', '[', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1391() throws Exception {
    char[] marg0 = { '{', '(', '[', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1392() throws Exception {
    char[] marg0 = { '{', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1393() throws Exception {
    char[] marg0 = { '{', '(', '[', '[', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1394() throws Exception {
    char[] marg0 = { '{', '(', '[', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1395() throws Exception {
    char[] marg0 = { '{', '(', '[', '[', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1396() throws Exception {
    char[] marg0 = { '{', '(', '[', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1397() throws Exception {
    char[] marg0 = { '{', '(', '[', ']', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1398() throws Exception {
    char[] marg0 = { '{', '(', '[', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1399() throws Exception {
    char[] marg0 = { '{', '(', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1400() throws Exception {
    char[] marg0 = { '{', '(', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1401() throws Exception {
    char[] marg0 = { '{', '(', '[', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1402() throws Exception {
    char[] marg0 = { '{', '(', '[', '}', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1403() throws Exception {
    char[] marg0 = { '{', '(', '[', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1404() throws Exception {
    char[] marg0 = { '{', '(', '[', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1405() throws Exception {
    char[] marg0 = { '{', '(', '[', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1406() throws Exception {
    char[] marg0 = { '{', '(', '[', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1407() throws Exception {
    char[] marg0 = { '{', '(', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1408() throws Exception {
    char[] marg0 = { '{', '(', '\u0000', '(', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1409() throws Exception {
    char[] marg0 = { '{', '(', '\u0000', '(', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1410() throws Exception {
    char[] marg0 = { '{', '(', '\u0000', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1411() throws Exception {
    char[] marg0 = { '{', '(', '\u0000', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1412() throws Exception {
    char[] marg0 = { '{', '(', '\u0000', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1413() throws Exception {
    char[] marg0 = { '{', '(', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1414() throws Exception {
    char[] marg0 = { '{', '(', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1415() throws Exception {
    char[] marg0 = { '{', '(', '\u0000', '[', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1416() throws Exception {
    char[] marg0 = { '{', '(', '\u0000', ')', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1417() throws Exception {
    char[] marg0 = { '{', '(', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1418() throws Exception {
    char[] marg0 = { '{', '(', '\u0000', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1419() throws Exception {
    char[] marg0 = { '{', '(', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1420() throws Exception {
    char[] marg0 = { '{', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1421() throws Exception {
    char[] marg0 = { '{', '(', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1422() throws Exception {
    char[] marg0 = { '{', '(', '\u0000', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1423() throws Exception {
    char[] marg0 = { '{', '(', '\u0000', '{', '[', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1424() throws Exception {
    char[] marg0 = { '{', '(', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1425() throws Exception {
    char[] marg0 = { '{', '(', '}', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1426() throws Exception {
    char[] marg0 = { '{', '(', '}', '[', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1427() throws Exception {
    char[] marg0 = { '{', '(', '}', '\u0000', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1428() throws Exception {
    char[] marg0 = { '{', '(', '}', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1429() throws Exception {
    char[] marg0 = { '{', '(', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1430() throws Exception {
    char[] marg0 = { '{', '(', '{', '(', '[', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1431() throws Exception {
    char[] marg0 = { '{', '(', '{', '(', ')', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1432() throws Exception {
    char[] marg0 = { '{', '(', '{', '(', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1433() throws Exception {
    char[] marg0 = { '{', '(', '{', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1434() throws Exception {
    char[] marg0 = { '{', '(', '{', '[', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1435() throws Exception {
    char[] marg0 = { '{', '(', '{', '[', '[', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1436() throws Exception {
    char[] marg0 = { '{', '(', '{', '[', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1437() throws Exception {
    char[] marg0 = { '{', '(', '{', '[', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1438() throws Exception {
    char[] marg0 = { '{', '(', '{', ')', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1439() throws Exception {
    char[] marg0 = { '{', '(', '{', ']', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1440() throws Exception {
    char[] marg0 = { '{', '(', '{', '\u0000', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1441() throws Exception {
    char[] marg0 = { '{', '(', '{', '\u0000', '[', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1442() throws Exception {
    char[] marg0 = { '{', '(', '{', '\u0000', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1443() throws Exception {
    char[] marg0 = { '{', '(', '{', '}', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1444() throws Exception {
    char[] marg0 = { '{', '(', '{', '{', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1445() throws Exception {
    char[] marg0 = { '{', '(', '{', '{', '[', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1446() throws Exception {
    char[] marg0 = { '{', '(', '{', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1447() throws Exception {
    char[] marg0 = { '{', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1448() throws Exception {
    char[] marg0 = { '{', '[', '(', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1449() throws Exception {
    char[] marg0 = { '{', '[', '(', '(', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1450() throws Exception {
    char[] marg0 = { '{', '[', '(', '(', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1451() throws Exception {
    char[] marg0 = { '{', '[', '(', '(', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1452() throws Exception {
    char[] marg0 = { '{', '[', '(', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1453() throws Exception {
    char[] marg0 = { '{', '[', '(', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1454() throws Exception {
    char[] marg0 = { '{', '[', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1455() throws Exception {
    char[] marg0 = { '{', '[', '(', '[', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1456() throws Exception {
    char[] marg0 = { '{', '[', '(', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1457() throws Exception {
    char[] marg0 = { '{', '[', '(', '[', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1458() throws Exception {
    char[] marg0 = { '{', '[', '(', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1459() throws Exception {
    char[] marg0 = { '{', '[', '(', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1460() throws Exception {
    char[] marg0 = { '{', '[', '(', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1461() throws Exception {
    char[] marg0 = { '{', '[', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1462() throws Exception {
    char[] marg0 = { '{', '[', '(', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1463() throws Exception {
    char[] marg0 = { '{', '[', '(', '}', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1464() throws Exception {
    char[] marg0 = { '{', '[', '(', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1465() throws Exception {
    char[] marg0 = { '{', '[', '(', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1466() throws Exception {
    char[] marg0 = { '{', '[', '(', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1467() throws Exception {
    char[] marg0 = { '{', '[', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1468() throws Exception {
    char[] marg0 = { '{', '[', '[', '(', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1469() throws Exception {
    char[] marg0 = { '{', '[', '[', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1470() throws Exception {
    char[] marg0 = { '{', '[', '[', '(', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1471() throws Exception {
    char[] marg0 = { '{', '[', '[', '(', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1472() throws Exception {
    char[] marg0 = { '{', '[', '[', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1473() throws Exception {
    char[] marg0 = { '{', '[', '[', '[', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1474() throws Exception {
    char[] marg0 = { '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1475() throws Exception {
    char[] marg0 = { '{', '[', '[', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1476() throws Exception {
    char[] marg0 = { '{', '[', '[', '[', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1477() throws Exception {
    char[] marg0 = { '{', '[', '[', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1478() throws Exception {
    char[] marg0 = { '{', '[', '[', ']', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1479() throws Exception {
    char[] marg0 = { '{', '[', '[', '\u0000', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1480() throws Exception {
    char[] marg0 = { '{', '[', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1481() throws Exception {
    char[] marg0 = { '{', '[', '[', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1482() throws Exception {
    char[] marg0 = { '{', '[', '[', '}', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1483() throws Exception {
    char[] marg0 = { '{', '[', '[', '{', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1484() throws Exception {
    char[] marg0 = { '{', '[', '[', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1485() throws Exception {
    char[] marg0 = { '{', '[', '[', '{', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1486() throws Exception {
    char[] marg0 = { '{', '[', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1487() throws Exception {
    char[] marg0 = { '{', '[', '\u0000', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1488() throws Exception {
    char[] marg0 = { '{', '[', '\u0000', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1489() throws Exception {
    char[] marg0 = { '{', '[', '\u0000', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1490() throws Exception {
    char[] marg0 = { '{', '[', '\u0000', '[', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1491() throws Exception {
    char[] marg0 = { '{', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1492() throws Exception {
    char[] marg0 = { '{', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1493() throws Exception {
    char[] marg0 = { '{', '[', '\u0000', ')', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1494() throws Exception {
    char[] marg0 = { '{', '[', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1495() throws Exception {
    char[] marg0 = { '{', '[', '\u0000', '\u0000', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1496() throws Exception {
    char[] marg0 = { '{', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1497() throws Exception {
    char[] marg0 = { '{', '[', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1498() throws Exception {
    char[] marg0 = { '{', '[', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1499() throws Exception {
    char[] marg0 = { '{', '[', '\u0000', '{', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1500() throws Exception {
    char[] marg0 = { '{', '[', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1501() throws Exception {
    char[] marg0 = { '{', '[', '\u0000', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1502() throws Exception {
    char[] marg0 = { '{', '[', '}', '(', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1503() throws Exception {
    char[] marg0 = { '{', '[', '}', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1504() throws Exception {
    char[] marg0 = { '{', '[', '}', '\u0000', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1505() throws Exception {
    char[] marg0 = { '{', '[', '{', '(', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1506() throws Exception {
    char[] marg0 = { '{', '[', '{', '(', '[', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1507() throws Exception {
    char[] marg0 = { '{', '[', '{', '(', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1508() throws Exception {
    char[] marg0 = { '{', '[', '{', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1509() throws Exception {
    char[] marg0 = { '{', '[', '{', '[', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1510() throws Exception {
    char[] marg0 = { '{', '[', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1511() throws Exception {
    char[] marg0 = { '{', '[', '{', '[', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1512() throws Exception {
    char[] marg0 = { '{', '[', '{', ')', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1513() throws Exception {
    char[] marg0 = { '{', '[', '{', ']', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1514() throws Exception {
    char[] marg0 = { '{', '[', '{', '\u0000', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1515() throws Exception {
    char[] marg0 = { '{', '[', '{', '\u0000', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1516() throws Exception {
    char[] marg0 = { '{', '[', '{', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1517() throws Exception {
    char[] marg0 = { '{', '[', '{', '}', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1518() throws Exception {
    char[] marg0 = { '{', '[', '{', '{', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1519() throws Exception {
    char[] marg0 = { '{', '[', '{', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1520() throws Exception {
    char[] marg0 = { '{', '[', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1521() throws Exception {
    char[] marg0 = { '{', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1522() throws Exception {
    char[] marg0 = { '{', '\u0000', '(', '(', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1523() throws Exception {
    char[] marg0 = { '{', '\u0000', '(', '(', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1524() throws Exception {
    char[] marg0 = { '{', '\u0000', '(', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1525() throws Exception {
    char[] marg0 = { '{', '\u0000', '(', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1526() throws Exception {
    char[] marg0 = { '{', '\u0000', '(', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1527() throws Exception {
    char[] marg0 = { '{', '\u0000', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1528() throws Exception {
    char[] marg0 = { '{', '\u0000', '(', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1529() throws Exception {
    char[] marg0 = { '{', '\u0000', '(', '[', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1530() throws Exception {
    char[] marg0 = { '{', '\u0000', '(', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1531() throws Exception {
    char[] marg0 = { '{', '\u0000', '(', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1532() throws Exception {
    char[] marg0 = { '{', '\u0000', '(', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1533() throws Exception {
    char[] marg0 = { '{', '\u0000', '(', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1534() throws Exception {
    char[] marg0 = { '{', '\u0000', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1535() throws Exception {
    char[] marg0 = { '{', '\u0000', '(', '}', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1536() throws Exception {
    char[] marg0 = { '{', '\u0000', '(', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1537() throws Exception {
    char[] marg0 = { '{', '\u0000', '(', '{', '[', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1538() throws Exception {
    char[] marg0 = { '{', '\u0000', '(', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1539() throws Exception {
    char[] marg0 = { '{', '\u0000', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1540() throws Exception {
    char[] marg0 = { '{', '\u0000', '[', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1541() throws Exception {
    char[] marg0 = { '{', '\u0000', '[', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1542() throws Exception {
    char[] marg0 = { '{', '\u0000', '[', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1543() throws Exception {
    char[] marg0 = { '{', '\u0000', '[', '[', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1544() throws Exception {
    char[] marg0 = { '{', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1545() throws Exception {
    char[] marg0 = { '{', '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1546() throws Exception {
    char[] marg0 = { '{', '\u0000', '[', ')', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1547() throws Exception {
    char[] marg0 = { '{', '\u0000', '[', ']', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1548() throws Exception {
    char[] marg0 = { '{', '\u0000', '[', '\u0000', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1549() throws Exception {
    char[] marg0 = { '{', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1550() throws Exception {
    char[] marg0 = { '{', '\u0000', '[', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1551() throws Exception {
    char[] marg0 = { '{', '\u0000', '[', '}', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1552() throws Exception {
    char[] marg0 = { '{', '\u0000', '[', '{', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1553() throws Exception {
    char[] marg0 = { '{', '\u0000', '[', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1554() throws Exception {
    char[] marg0 = { '{', '\u0000', '[', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1555() throws Exception {
    char[] marg0 = { '{', '\u0000', '\u0000', '(', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1556() throws Exception {
    char[] marg0 = { '{', '\u0000', '\u0000', '(', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1557() throws Exception {
    char[] marg0 = { '{', '\u0000', '\u0000', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1558() throws Exception {
    char[] marg0 = { '{', '\u0000', '\u0000', '[', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1559() throws Exception {
    char[] marg0 = { '{', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1560() throws Exception {
    char[] marg0 = { '{', '\u0000', '\u0000', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1561() throws Exception {
    char[] marg0 = { '{', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1562() throws Exception {
    char[] marg0 = { '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1563() throws Exception {
    char[] marg0 = { '{', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1564() throws Exception {
    char[] marg0 = { '{', '\u0000', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1565() throws Exception {
    char[] marg0 = { '{', '\u0000', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1566() throws Exception {
    char[] marg0 = { '{', '\u0000', '\u0000', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1567() throws Exception {
    char[] marg0 = { '{', '\u0000', '{', '(', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1568() throws Exception {
    char[] marg0 = { '{', '\u0000', '{', '(', '[', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1569() throws Exception {
    char[] marg0 = { '{', '\u0000', '{', '(', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1570() throws Exception {
    char[] marg0 = { '{', '\u0000', '{', '[', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1571() throws Exception {
    char[] marg0 = { '{', '\u0000', '{', '[', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1572() throws Exception {
    char[] marg0 = { '{', '\u0000', '{', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1573() throws Exception {
    char[] marg0 = { '{', '\u0000', '{', ')', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1574() throws Exception {
    char[] marg0 = { '{', '\u0000', '{', ']', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1575() throws Exception {
    char[] marg0 = { '{', '\u0000', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1576() throws Exception {
    char[] marg0 = { '{', '\u0000', '{', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1577() throws Exception {
    char[] marg0 = { '{', '\u0000', '{', '}', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1578() throws Exception {
    char[] marg0 = { '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1579() throws Exception {
    char[] marg0 = { '{', '\u0000', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1580() throws Exception {
    char[] marg0 = { '{', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1581() throws Exception {
    char[] marg0 = { '{', '{', '(', '(', '[', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1582() throws Exception {
    char[] marg0 = { '{', '{', '(', '(', ')', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1583() throws Exception {
    char[] marg0 = { '{', '{', '(', '(', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1584() throws Exception {
    char[] marg0 = { '{', '{', '(', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1585() throws Exception {
    char[] marg0 = { '{', '{', '(', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1586() throws Exception {
    char[] marg0 = { '{', '{', '(', '[', '[', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1587() throws Exception {
    char[] marg0 = { '{', '{', '(', '[', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1588() throws Exception {
    char[] marg0 = { '{', '{', '(', '[', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1589() throws Exception {
    char[] marg0 = { '{', '{', '(', ')', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1590() throws Exception {
    char[] marg0 = { '{', '{', '(', ']', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1591() throws Exception {
    char[] marg0 = { '{', '{', '(', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1592() throws Exception {
    char[] marg0 = { '{', '{', '(', '\u0000', '[', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1593() throws Exception {
    char[] marg0 = { '{', '{', '(', '\u0000', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1594() throws Exception {
    char[] marg0 = { '{', '{', '(', '}', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1595() throws Exception {
    char[] marg0 = { '{', '{', '(', '{', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1596() throws Exception {
    char[] marg0 = { '{', '{', '(', '{', '[', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1597() throws Exception {
    char[] marg0 = { '{', '{', '(', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1598() throws Exception {
    char[] marg0 = { '{', '{', '[', '(', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1599() throws Exception {
    char[] marg0 = { '{', '{', '[', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1600() throws Exception {
    char[] marg0 = { '{', '{', '[', '(', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1601() throws Exception {
    char[] marg0 = { '{', '{', '[', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1602() throws Exception {
    char[] marg0 = { '{', '{', '[', '[', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1603() throws Exception {
    char[] marg0 = { '{', '{', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1604() throws Exception {
    char[] marg0 = { '{', '{', '[', '[', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1605() throws Exception {
    char[] marg0 = { '{', '{', '[', ')', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1606() throws Exception {
    char[] marg0 = { '{', '{', '[', ']', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1607() throws Exception {
    char[] marg0 = { '{', '{', '[', '\u0000', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1608() throws Exception {
    char[] marg0 = { '{', '{', '[', '\u0000', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1609() throws Exception {
    char[] marg0 = { '{', '{', '[', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1610() throws Exception {
    char[] marg0 = { '{', '{', '[', '}', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1611() throws Exception {
    char[] marg0 = { '{', '{', '[', '{', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1612() throws Exception {
    char[] marg0 = { '{', '{', '[', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1613() throws Exception {
    char[] marg0 = { '{', '{', '[', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1614() throws Exception {
    char[] marg0 = { '{', '{', '\u0000', '(', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1615() throws Exception {
    char[] marg0 = { '{', '{', '\u0000', '(', '[', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1616() throws Exception {
    char[] marg0 = { '{', '{', '\u0000', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1617() throws Exception {
    char[] marg0 = { '{', '{', '\u0000', '[', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1618() throws Exception {
    char[] marg0 = { '{', '{', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1619() throws Exception {
    char[] marg0 = { '{', '{', '\u0000', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1620() throws Exception {
    char[] marg0 = { '{', '{', '\u0000', ')', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1621() throws Exception {
    char[] marg0 = { '{', '{', '\u0000', ']', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1622() throws Exception {
    char[] marg0 = { '{', '{', '\u0000', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1623() throws Exception {
    char[] marg0 = { '{', '{', '\u0000', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1624() throws Exception {
    char[] marg0 = { '{', '{', '\u0000', '}', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1625() throws Exception {
    char[] marg0 = { '{', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1626() throws Exception {
    char[] marg0 = { '{', '{', '\u0000', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1627() throws Exception {
    char[] marg0 = { '{', '{', '}', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1628() throws Exception {
    char[] marg0 = { '{', '{', '}', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1629() throws Exception {
    char[] marg0 = { '{', '{', '}' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1630() throws Exception {
    char[] marg0 = { '{', '{', '{', '(', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1631() throws Exception {
    char[] marg0 = { '{', '{', '{', '(', '[', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1632() throws Exception {
    char[] marg0 = { '{', '{', '{', '(', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1633() throws Exception {
    char[] marg0 = { '{', '{', '{', '[', '(', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1634() throws Exception {
    char[] marg0 = { '{', '{', '{', '[', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1635() throws Exception {
    char[] marg0 = { '{', '{', '{', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1636() throws Exception {
    char[] marg0 = { '{', '{', '{', ')', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1637() throws Exception {
    char[] marg0 = { '{', '{', '{', ']', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1638() throws Exception {
    char[] marg0 = { '{', '{', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1639() throws Exception {
    char[] marg0 = { '{', '{', '{', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1640() throws Exception {
    char[] marg0 = { '{', '{', '{', '}', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1641() throws Exception {
    char[] marg0 = { '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1642() throws Exception {
    char[] marg0 = { '{', '{', '{', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1643() throws Exception {
    char[] marg0 = { '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1644() throws Exception {
    char[] marg0 = { '(', '(', '(', '(', '(', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1645() throws Exception {
    char[] marg0 = { '(', '(', '(', '(', '(', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1646() throws Exception {
    char[] marg0 = { '(', '(', '(', '(', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1647() throws Exception {
    char[] marg0 = { '(', '(', '(', '(', '[', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1648() throws Exception {
    char[] marg0 = { '(', '(', '(', '(', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1649() throws Exception {
    char[] marg0 = { '(', '(', '(', '(', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1650() throws Exception {
    char[] marg0 = { '(', '(', '(', '(', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1651() throws Exception {
    char[] marg0 = { '(', '(', '(', '(', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1652() throws Exception {
    char[] marg0 = { '(', '(', '(', '(', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1653() throws Exception {
    char[] marg0 = { '(', '(', '(', '(', '}', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1654() throws Exception {
    char[] marg0 = { '(', '(', '(', '(', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1655() throws Exception {
    char[] marg0 = { '(', '(', '(', '(', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1656() throws Exception {
    char[] marg0 = { '(', '(', '(', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1657() throws Exception {
    char[] marg0 = { '(', '(', '(', '[', '(', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1658() throws Exception {
    char[] marg0 = { '(', '(', '(', '[', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1659() throws Exception {
    char[] marg0 = { '(', '(', '(', '[', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1660() throws Exception {
    char[] marg0 = { '(', '(', '(', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1661() throws Exception {
    char[] marg0 = { '(', '(', '(', '[', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1662() throws Exception {
    char[] marg0 = { '(', '(', '(', '[', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1663() throws Exception {
    char[] marg0 = { '(', '(', '(', '[', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1664() throws Exception {
    char[] marg0 = { '(', '(', '(', '[', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1665() throws Exception {
    char[] marg0 = { '(', '(', '(', '[', '}', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1666() throws Exception {
    char[] marg0 = { '(', '(', '(', '[', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1667() throws Exception {
    char[] marg0 = { '(', '(', '(', '[', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1668() throws Exception {
    char[] marg0 = { '(', '(', '(', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1669() throws Exception {
    char[] marg0 = { '(', '(', '(', ')', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1670() throws Exception {
    char[] marg0 = { '(', '(', '(', ')' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1671() throws Exception {
    char[] marg0 = { '(', '(', '(', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1672() throws Exception {
    char[] marg0 = { '(', '(', '(', '\u0000', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1673() throws Exception {
    char[] marg0 = { '(', '(', '(', '\u0000', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1674() throws Exception {
    char[] marg0 = { '(', '(', '(', '\u0000', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1675() throws Exception {
    char[] marg0 = { '(', '(', '(', '\u0000', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1676() throws Exception {
    char[] marg0 = { '(', '(', '(', '\u0000', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1677() throws Exception {
    char[] marg0 = { '(', '(', '(', '\u0000', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1678() throws Exception {
    char[] marg0 = { '(', '(', '(', '\u0000', '}', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1679() throws Exception {
    char[] marg0 = { '(', '(', '(', '\u0000', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1680() throws Exception {
    char[] marg0 = { '(', '(', '(', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1681() throws Exception {
    char[] marg0 = { '(', '(', '(', '{', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1682() throws Exception {
    char[] marg0 = { '(', '(', '(', '{', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1683() throws Exception {
    char[] marg0 = { '(', '(', '(', '{', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1684() throws Exception {
    char[] marg0 = { '(', '(', '(', '{', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1685() throws Exception {
    char[] marg0 = { '(', '(', '(', '{', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1686() throws Exception {
    char[] marg0 = { '(', '(', '(', '{', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1687() throws Exception {
    char[] marg0 = { '(', '(', '(', '{', '}', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1688() throws Exception {
    char[] marg0 = { '(', '(', '(', '{', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1689() throws Exception {
    char[] marg0 = { '(', '(', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1690() throws Exception {
    char[] marg0 = { '(', '(', '[', '(', '(', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1691() throws Exception {
    char[] marg0 = { '(', '(', '[', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1692() throws Exception {
    char[] marg0 = { '(', '(', '[', '(', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1693() throws Exception {
    char[] marg0 = { '(', '(', '[', '(', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1694() throws Exception {
    char[] marg0 = { '(', '(', '[', '(', ')', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1695() throws Exception {
    char[] marg0 = { '(', '(', '[', '(', ']', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1696() throws Exception {
    char[] marg0 = { '(', '(', '[', '(', '\u0000', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1697() throws Exception {
    char[] marg0 = { '(', '(', '[', '(', '\u0000' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1698() throws Exception {
    char[] marg0 = { '(', '(', '[', '(', '}', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1699() throws Exception {
    char[] marg0 = { '(', '(', '[', '(', '{', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1700() throws Exception {
    char[] marg0 = { '(', '(', '[', '(', '{' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1701() throws Exception {
    char[] marg0 = { '(', '(', '[', '[', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1702() throws Exception {
    char[] marg0 = { '(', '(', '[', '[', '(' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1703() throws Exception {
    char[] marg0 = { '(', '(', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsBalanced1704() throws Exception {
    char[] marg0 = { '(', '(', '[', '[', '[' };
    boolean retval = BracketBalancer.isBalanced(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }
}
