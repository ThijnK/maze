// Auto-generated by MAZE
package nl.uu.tests.maze.generated.benchmarks;

import java.lang.ArrayIndexOutOfBoundsException;
import java.lang.Exception;
import java.lang.IllegalArgumentException;
import java.lang.NullPointerException;
import nl.uu.maze.benchmarks.Dijkstra;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class DijkstraTest {
  @Test
  public void testInit1() throws Exception {
    int[][] carg0 = null;
    Assertions.assertThrows(NullPointerException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit2() throws Exception {
    int[][] carg0 = {};
    Assertions.assertThrows(ArrayIndexOutOfBoundsException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit3() throws Exception {
    int[][] carg0 = { {} };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit4() throws Exception {
    int[][] carg0 = { { -1 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit5() throws Exception {
    int[][] carg0 = { { 1001 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit6() throws Exception {
    int[][] carg0 = { { 489, -2147483648 }, { 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit7() throws Exception {
    int[][] carg0 = { { 489, 1001 }, { 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit8() throws Exception {
    int[][] carg0 = { { 489, 489, -2147483648 }, { 489, 489, 489 }, { 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit9() throws Exception {
    int[][] carg0 = { { 489, 489, 1129 }, { 489, 489, 489 }, { 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit10() throws Exception {
    int[][] carg0 = { { 489, 489 }, { -2147483648, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testShortestPath1() throws Exception {
    int[][] carg0 = { { 489 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = -2147483648;
    int marg1 = 0;
    Assertions.assertThrows(ArrayIndexOutOfBoundsException.class, () -> cut.shortestPath(marg0, marg1));
  }

  @Test
  public void testInit11() throws Exception {
    int[][] carg0 = { { 489, 489, 489, -2147483648, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit12() throws Exception {
    int[][] carg0 = { { 489, 489 }, { 1129, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit13() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 1001, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit14() throws Exception {
    int[][] carg0 = { { 489, 489, 489 }, { -2147483648, 489, 489 }, { 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit15() throws Exception {
    int[][] carg0 = { { 489, 489 }, { 489, -2147483648 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit16() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, -2147483648, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit17() throws Exception {
    int[][] carg0 = { { 489, 489, 489 }, { 1001, 489, 489 }, { 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit18() throws Exception {
    int[][] carg0 = { { 489, 489 }, { 489, 1001 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit19() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 1001, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit20() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489 }, { -2147483648, 489, 489, 489 }, { 489, 489, 489, 489 }, { 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit21() throws Exception {
    int[][] carg0 = { { 489, 489, 489 }, { 489, -2147483648, 489 }, { 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit22() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, -2147483648, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit23() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489 }, { 1001, 489, 489, 489 }, { 489, 489, 489, 489 }, { 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit24() throws Exception {
    int[][] carg0 = { { 489, 489, 489 }, { 489, 1001, 489 }, { 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit25() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 1001, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testReachable1() throws Exception {
    int[][] carg0 = { { 489 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 0;
    int marg1 = 0;
    boolean retval = cut.reachable(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testReachable2() throws Exception {
    int[][] carg0 = { { 489 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = -2147483648;
    int marg1 = 2147483647;
    Assertions.assertThrows(ArrayIndexOutOfBoundsException.class, () -> cut.reachable(marg0, marg1));
  }

  @Test
  public void testInit26() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489 }, { -2147483648, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit27() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489 }, { 490, -2147483648, 489, 489 }, { 489, 489, 489, 489 }, { 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit28() throws Exception {
    int[][] carg0 = { { 489, 489, 489 }, { 489, 489, -2147483648 }, { 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit29() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, -2147483648, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit30() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489 }, { 1001, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit31() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489 }, { 489, 1001, 489, 489 }, { 489, 489, 489, 489 }, { 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit32() throws Exception {
    int[][] carg0 = { { 489, 489, 489 }, { 489, 489, 1001 }, { 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testReachable3() throws Exception {
    int[][] carg0 = { { 489 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 0;
    int marg1 = -1;
    boolean retval = cut.reachable(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testInit33() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 1001, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit34() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489 }, { -2147483648, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit35() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 490 }, { 489, -2147483648, 489, 489, 489 }, { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit36() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489 }, { 489, 489, -2147483648, 489 }, { 489, 489, 489, 489 }, { 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit37() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 105, 489, 489, -2147483648, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testShortestPath2() throws Exception {
    int[][] carg0 = { { 489, 489 }, { 489, 489 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = -2147483648;
    int marg1 = 0;
    Assertions.assertThrows(ArrayIndexOutOfBoundsException.class, () -> cut.shortestPath(marg0, marg1));
  }

  @Test
  public void testInit38() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489 }, { 1001, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit39() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 233, 489 }, { 489, 1001, 489, 489, 489 }, { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit40() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489 }, { 489, 489, 1001, 489 }, { 489, 489, 489, 489 }, { 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit41() throws Exception {
    int[][] carg0 = { { 489, 105, 489, 489, 489, 489, 489, 1001, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit42() throws Exception {
    int[][] carg0 = { { 489, 489, 489 }, { 489, 489, 489 }, { -2147483648, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit43() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 105, 489, 489 }, { -2147483648, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit44() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489 }, { 489, -2147483648, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit45() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489 }, { 489, 489, -2147483648, 489, 489 }, { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit46() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489 }, { 489, 489, 489, -2147483648 }, { 489, 489, 489, 489 }, { 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit47() throws Exception {
    int[][] carg0 = { { 489, 489, 489 }, { 489, 489, 489 }, { 1001, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit48() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, -2147483648, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit49() throws Exception {
    int[][] carg0 = { { 489, 105, 489, 489, 489, 489, 489 }, { 1001, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit50() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489 }, { 489, 1001, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit51() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489 }, { 489, 489, 1001, 489, 489 }, { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit52() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489 }, { 489, 489, 489, 1001 }, { 489, 489, 489, 489 }, { 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit53() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 1001, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit54() throws Exception {
    int[][] carg0 = { { 489, 489, 489 }, { 489, 489, 489 }, { 489, -2147483648, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit55() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489 }, { -2147483648, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit56() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489 }, { 489, -2147483648, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit57() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489 }, { 489, 489, -2147483648, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit58() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489 }, { 489, 489, 489, -2147483648, 489 }, { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit59() throws Exception {
    int[][] carg0 = { { 489, 489, 489 }, { 489, 489, 489 }, { 489, 1001, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit60() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 9, 489, -2147483648, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit61() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489 }, { 1001, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit62() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489 }, { 489, 1001, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit63() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489 }, { 489, 489, 1001, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit64() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489 }, { 489, 489, 489, 1001, 489 }, { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testReachable4() throws Exception {
    int[][] carg0 = { { 489, 489 }, { 489, 489 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 0;
    int marg1 = 0;
    boolean retval = cut.reachable(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testReachable5() throws Exception {
    int[][] carg0 = { { 489, 489 }, { 489, 489 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = -2147483648;
    int marg1 = 2147483647;
    Assertions.assertThrows(ArrayIndexOutOfBoundsException.class, () -> cut.reachable(marg0, marg1));
  }

  @Test
  public void testInit65() throws Exception {
    int[][] carg0 = { { 9, 489, 489, 489, 489, 489, 489, 489, 489, 1001, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit66() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489 }, { 489, 489, 489, 489 }, { -2147483648, 489, 489, 489 }, { 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit67() throws Exception {
    int[][] carg0 = { { 489, 489, 489 }, { 489, 489, 489 }, { 489, 489, -2147483648 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit68() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 9, 489 }, { -2147483648, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit69() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, -2147483648, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit70() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, -2147483648, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit71() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, -2147483648, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit72() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, -2147483648 }, { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit73() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489 }, { 489, 489, 489, 489 }, { 1001, 489, 489, 489 }, { 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit74() throws Exception {
    int[][] carg0 = { { 489, 489, 489 }, { 489, 489, 489 }, { 489, 489, 1001 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testReachable6() throws Exception {
    int[][] carg0 = { { 489, 489 }, { 489, 489 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 0;
    int marg1 = -1;
    boolean retval = cut.reachable(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testInit75() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, -2147483648, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit76() throws Exception {
    int[][] carg0 = { { 9, 489, 489, 489, 489, 489, 489, 489, 489 }, { 1001, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit77() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 1001, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit78() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 1001, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit79() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 1001, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit80() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 1001 }, { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit81() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 1001, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit82() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489 }, { 489, 489, 489, 489 }, { 489, -2147483648, 489, 489 }, { 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit83() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { -2147483648, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit84() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, -2147483648, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit85() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, -2147483648, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit86() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, -2147483648, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit87() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, -2147483648, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit88() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489 }, { 489, 489, 489, 489 }, { 489, 1001, 489, 489 }, { 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit89() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 9, 489, 489, 489, 489, 489, 489, 489, -2147483648, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit90() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 1001, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit91() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 1001, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit92() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 9, 489, 489, 489, 489 }, { 489, 489, 1001, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit93() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 1001, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit94() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 1001, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit95() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 1001, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testShortestPath3() throws Exception {
    int[][] carg0 = { { 489 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 0;
    int marg1 = 0;
    int retval = cut.shortestPath(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testInit96() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 }, { -2147483648, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit97() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489 }, { 489, 489, 489, 489 }, { 489, 489, -2147483648, 489 }, { 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit98() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 9, 489, 489, 489, 489, 489, 489, 489 }, { -2147483648, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit99() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, -2147483648, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit100() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, -2147483648, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit101() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, -2147483648, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit102() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, -2147483648, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit103() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, -2147483648 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit104() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 }, { 1001, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit105() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489 }, { 489, 489, 489, 489 }, { 489, 489, 1001, 489 }, { 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit106() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, -2147483648, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit107() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 1001, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit108() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 1001, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit109() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 1001, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit110() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 1001, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit111() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 1001, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit112() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 1001 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit113() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 1001, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit114() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 }, { 489, -2147483648, 489, 489, 489 }, { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit115() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489 }, { 489, 489, 489, 489 }, { 489, 489, 489, -2147483648 }, { 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit116() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { -2147483648, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit117() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, -2147483648, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit118() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, -2147483648, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit119() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, -2147483648, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit120() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, -2147483648, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit121() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, -2147483648, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit122() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 }, { 489, 1001, 489, 489, 489 }, { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit123() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489 }, { 489, 489, 489, 489 }, { 489, 489, 489, 1001 }, { 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit124() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, -2147483648, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit125() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 1001, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit126() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 1001, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit127() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 1001, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit128() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 1001, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit129() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 1001, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit130() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 1001, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testShortestPath4() throws Exception {
    int[][] carg0 = { { 489, 489, 489 }, { 489, 489, 489 }, { 489, 489, 489 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = -2147483648;
    int marg1 = 0;
    Assertions.assertThrows(ArrayIndexOutOfBoundsException.class, () -> cut.shortestPath(marg0, marg1));
  }

  @Test
  public void testShortestPath5() throws Exception {
    int[][] carg0 = { { 0 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 0;
    int marg1 = -1;
    int retval = cut.shortestPath(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testInit131() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 1001, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testShortestPath6() throws Exception {
    int[][] carg0 = { { 1 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 0;
    int marg1 = -1;
    int retval = cut.shortestPath(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testInit132() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { -2147483648, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit133() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 }, { 489, 489, -2147483648, 489, 489 }, { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit134() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { -2147483648, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit135() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, -2147483648, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit136() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, -2147483648, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit137() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, -2147483648, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit138() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, -2147483648, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit139() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, -2147483648, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit140() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, -2147483648 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit141() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 1001, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit142() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 }, { 489, 489, 1001, 489, 489 }, { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit143() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 41, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, -2147483648, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit144() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 1001, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit145() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 1001, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit146() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 1001, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit147() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 1001, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit148() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 1001, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit149() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 1001, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit150() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 1001 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit151() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 1001, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit152() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489 }, { 489, 489, 489, 489 }, { 489, 489, 489, 489 }, { -2147483648, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit153() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, -2147483648, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit154() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 }, { 489, 489, 489, -2147483648, 489 }, { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit155() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489 }, { 489, 489, 489, 489 }, { 489, 489, 489, 489 }, { 1001, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit156() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 41, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { -2147483648, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit157() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, -2147483648, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit158() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, -2147483648, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit159() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, -2147483648, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit160() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, -2147483648, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit161() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, -2147483648, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit162() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, -2147483648, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit163() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 1001, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit164() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 }, { 489, 489, 489, 1001, 489 }, { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testReachable7() throws Exception {
    int[][] carg0 = { { 489, 489, 489 }, { 489, 489, 489 }, { 489, 489, 489 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 0;
    int marg1 = 0;
    boolean retval = cut.reachable(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testInit165() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, -2147483648, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testReachable8() throws Exception {
    int[][] carg0 = { { 489, 489, 489 }, { 489, 489, 489 }, { 489, 489, 489 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = -2147483648;
    int marg1 = 2147483647;
    Assertions.assertThrows(ArrayIndexOutOfBoundsException.class, () -> cut.reachable(marg0, marg1));
  }

  @Test
  public void testInit166() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 1001, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit167() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 1001, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit168() throws Exception {
    int[][] carg0 = { { 489, 9, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 1001, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit169() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 1001, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit170() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 1001, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit171() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 1001, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit172() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 1001, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit173() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 1001, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit174() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489 }, { 489, 489, 489, 489 }, { 489, 489, 489, 489 }, { 489, -2147483648, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testShortestPath7() throws Exception {
    int[][] carg0 = { { 489, 489 }, { 489, 489 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 0;
    int marg1 = 0;
    int retval = cut.shortestPath(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testInit175() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { -2147483648, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit176() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, -2147483648, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit177() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, -2147483648 }, { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit178() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489 }, { 489, 489, 489, 489 }, { 489, 489, 489, 489 }, { 489, 1001, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testReachable9() throws Exception {
    int[][] carg0 = { { 489, 489, 489 }, { 489, 489, 489 }, { 489, 489, 489 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 0;
    int marg1 = -1;
    boolean retval = cut.reachable(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testInit179() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { -2147483648, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit180() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, -2147483648, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit181() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, -2147483648, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit182() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, -2147483648, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit183() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, -2147483648, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit184() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, -2147483648, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit185() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, -2147483648, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit186() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, -2147483648 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit187() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 1001, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit188() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 1001, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit189() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 1001 }, { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit190() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, -2147483648, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit191() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 1001, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit192() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 1001, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit193() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 1001, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit194() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 1001, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit195() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 1001, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit196() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 1001, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit197() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 1001, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit198() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 1001 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit199() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 1001, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit200() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489 }, { 489, 489, 489, 489 }, { 489, 489, 489, 489 }, { 489, 489, -2147483648, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit201() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, -2147483648, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit202() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, -2147483648, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit203() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489 }, { 489, 489, 489, 489 }, { 489, 489, 489, 489 }, { 489, 489, 1001, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit204() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { -2147483648, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit205() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, -2147483648, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit206() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, -2147483648, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit207() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, -2147483648, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit208() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, -2147483648, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit209() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, -2147483648, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit210() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, -2147483648, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit211() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, -2147483648, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit212() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 1001, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit213() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489 }, { 489, 489, 105, 489, 489, 489 }, { 489, 489, 489, 1001, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit214() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, -2147483648, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit215() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 1001, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit216() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 497, 489, 489, 489, 489, 489, 489, 489 }, { 489, 1001, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit217() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 490, 489 }, { 489, 489, 1001, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit218() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 1001, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit219() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 1001, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit220() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 1001, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit221() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 1001, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit222() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 1001, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit223() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 1001, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit224() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 }, { -2147483648, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit225() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489 }, { 489, 489, 489, 489 }, { 489, 489, 489, 489 }, { 489, 489, 489, -2147483648 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit226() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 0, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    new Dijkstra(carg0);
  }

  @Test
  public void testInit227() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, -2147483648, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit228() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    new Dijkstra(carg0);
  }

  @Test
  public void testInit229() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    new Dijkstra(carg0);
  }

  @Test
  public void testInit230() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 1001, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit231() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    new Dijkstra(carg0);
  }

  @Test
  public void testInit232() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 1001, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit233() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    new Dijkstra(carg0);
  }

  @Test
  public void testInit234() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 1001, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit235() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    new Dijkstra(carg0);
  }

  @Test
  public void testInit236() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 1001, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit237() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 105, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    new Dijkstra(carg0);
  }

  @Test
  public void testInit238() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 105, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 1001, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit239() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    new Dijkstra(carg0);
  }

  @Test
  public void testInit240() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 1001, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit241() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    new Dijkstra(carg0);
  }

  @Test
  public void testInit242() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 1001, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit243() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    new Dijkstra(carg0);
  }

  @Test
  public void testInit244() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 1001, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit245() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    new Dijkstra(carg0);
  }

  @Test
  public void testInit246() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 1001 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit247() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 } };
    new Dijkstra(carg0);
  }

  @Test
  public void testInit248() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { -2147483648, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit249() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 } };
    new Dijkstra(carg0);
  }

  @Test
  public void testInit250() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, -2147483648, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit251() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 } };
    new Dijkstra(carg0);
  }

  @Test
  public void testInit252() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, -2147483648, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit253() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 } };
    new Dijkstra(carg0);
  }

  @Test
  public void testInit254() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489 }, { 489, 489, 489, 489 }, { 489, 489, 489, 489 }, { 489, 489, 489, 489 } };
    new Dijkstra(carg0);
  }

  @Test
  public void testInit255() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { -2147483648, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit256() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, -2147483648, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit257() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 9, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, -2147483648, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit258() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, -2147483648, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit259() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, -2147483648, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit260() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, -2147483648, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit261() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, -2147483648, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit262() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, -2147483648, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit263() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, -2147483648 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit264() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 1001, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit265() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 1001, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit266() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 1001, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit267() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 }, { 1001, 489, 489, 489, 489 }, { 489, 489, 489, 489, 489 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testInit268() throws Exception {
    int[][] carg0 = { { 489, 489, 489, 489 }, { 489, 489, 489, 489 }, { 489, 489, 489, 489 }, { 489, 489, 489, 1001 } };
    Assertions.assertThrows(IllegalArgumentException.class, () -> new Dijkstra(carg0));
  }

  @Test
  public void testShortestPath8() throws Exception {
    int[][] carg0 = { { 0, 0 }, { 489, 489 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 0;
    int marg1 = -1;
    int retval = cut.shortestPath(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testShortestPath9() throws Exception {
    int[][] carg0 = { { 489, 489 }, { 0, 1 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 1;
    int marg1 = -2;
    int retval = cut.shortestPath(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testShortestPath10() throws Exception {
    int[][] carg0 = { { 1, 0 }, { 489, 489 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 0;
    int marg1 = -1;
    int retval = cut.shortestPath(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testShortestPath11() throws Exception {
    int[][] carg0 = { { 489, 489, 489 }, { 489, 489, 489 }, { 489, 489, 489 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 0;
    int marg1 = 0;
    int retval = cut.shortestPath(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testShortestPath12() throws Exception {
    int[][] carg0 = { { 0, 2 }, { 489, 489 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 0;
    int marg1 = 1;
    int retval = cut.shortestPath(marg0, marg1);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testShortestPath13() throws Exception {
    int[][] carg0 = { { 489, 489 }, { 2, 0 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 1;
    int marg1 = 0;
    int retval = cut.shortestPath(marg0, marg1);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testShortestPath14() throws Exception {
    int[][] carg0 = { { 489, 489, 489 }, { 0, 0, 0 }, { 489, 489, 489 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 1;
    int marg1 = -2;
    int retval = cut.shortestPath(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testShortestPath15() throws Exception {
    int[][] carg0 = { { 1, 2 }, { 489, 489 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 0;
    int marg1 = 1;
    int retval = cut.shortestPath(marg0, marg1);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testShortestPath16() throws Exception {
    int[][] carg0 = { { 489, 489 }, { 2, 1 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 1;
    int marg1 = 0;
    int retval = cut.shortestPath(marg0, marg1);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testShortestPath17() throws Exception {
    int[][] carg0 = { { 489, 489, 489 }, { 0, 0, 2 }, { 0, 0, 1 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 2;
    int marg1 = -3;
    int retval = cut.shortestPath(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testShortestPath18() throws Exception {
    int[][] carg0 = { { 489, 489, 489 }, { 0, 1, 0 }, { 489, 489, 489 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 1;
    int marg1 = -2;
    int retval = cut.shortestPath(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testShortestPath19() throws Exception {
    int[][] carg0 = { { 1, 0, 0 }, { 2, 0, 0 }, { 489, 9, 105 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 0;
    int marg1 = -1;
    int retval = cut.shortestPath(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testShortestPath20() throws Exception {
    int[][] carg0 = { { 489, 489, 489 }, { 0, 0, 12 }, { 489, 489, 489 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 1;
    int marg1 = -2;
    int retval = cut.shortestPath(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testShortestPath21() throws Exception {
    int[][] carg0 = { { 489, 489, 489 }, { 0, 1, 8 }, { 489, 489, 489 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 1;
    int marg1 = -2;
    int retval = cut.shortestPath(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testShortestPath22() throws Exception {
    int[][] carg0 = { { 233, 0, 200 }, { 2, 1, 8 }, { 489, 489, 489 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 0;
    int marg1 = -1;
    int retval = cut.shortestPath(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testShortestPath23() throws Exception {
    int[][] carg0 = { { 0, 2 }, { 0, 0 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 0;
    int marg1 = 2;
    int retval = cut.shortestPath(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testShortestPath24() throws Exception {
    int[][] carg0 = { { 0, 0 }, { 512, 0 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 1;
    int marg1 = 2;
    int retval = cut.shortestPath(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testShortestPath25() throws Exception {
    int[][] carg0 = { { 0, 59 }, { 0, 453 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 0;
    int marg1 = 2;
    int retval = cut.shortestPath(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testShortestPath26() throws Exception {
    int[][] carg0 = { { 0, 8 }, { 512, 0 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 0;
    int marg1 = 16;
    int retval = cut.shortestPath(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testShortestPath27() throws Exception {
    int[][] carg0 = { { 1, 2 }, { 0, 0 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 0;
    int marg1 = 2;
    int retval = cut.shortestPath(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testShortestPath28() throws Exception {
    int[][] carg0 = { { 0, 128 }, { 9, 0 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 1;
    int marg1 = 16384;
    int retval = cut.shortestPath(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testShortestPath29() throws Exception {
    int[][] carg0 = { { 773, 0 }, { 251, 0 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 1;
    int marg1 = 2;
    int retval = cut.shortestPath(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testShortestPath30() throws Exception {
    int[][] carg0 = { { 0, 0 }, { 1, 2 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 1;
    int marg1 = 2;
    int retval = cut.shortestPath(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testShortestPath31() throws Exception {
    int[][] carg0 = { { 0, 511 }, { 256, 1 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 0;
    int marg1 = 2;
    int retval = cut.shortestPath(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testShortestPath32() throws Exception {
    int[][] carg0 = { { 1, 235 }, { 0, 277 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 0;
    int marg1 = 128;
    int retval = cut.shortestPath(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testShortestPath33() throws Exception {
    int[][] carg0 = { { 1, 640 }, { 896, 0 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 0;
    int marg1 = 4;
    int retval = cut.shortestPath(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testShortestPath34() throws Exception {
    int[][] carg0 = { { 1, 2 }, { 512, 0 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 1;
    int marg1 = 2;
    int retval = cut.shortestPath(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testShortestPath35() throws Exception {
    int[][] carg0 = { { 0, 1 }, { 32, 1 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 1;
    int marg1 = 1024;
    int retval = cut.shortestPath(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testShortestPath36() throws Exception {
    int[][] carg0 = { { 217, 0 }, { 551, 4 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 1;
    int marg1 = 2;
    int retval = cut.shortestPath(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testShortestPath37() throws Exception {
    int[][] carg0 = { { 1, 127 }, { 2, 449 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 0;
    int marg1 = 1024;
    int retval = cut.shortestPath(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testShortestPath38() throws Exception {
    int[][] carg0 = { { 513, 768 }, { 768, 1 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 1;
    int marg1 = 2;
    int retval = cut.shortestPath(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testShortestPath39() throws Exception {
    int[][] carg0 = { { 0, 2, 2 }, { 489, 0, 489 }, { 489, 489, 489 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 0;
    int marg1 = -1;
    int retval = cut.shortestPath(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testShortestPath40() throws Exception {
    int[][] carg0 = { { 1, 2, 2 }, { 489, 233, 489 }, { 489, 489, 489 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 0;
    int marg1 = -1;
    int retval = cut.shortestPath(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testShortestPath41() throws Exception {
    int[][] carg0 = { { 489, 489, 489 }, { 2, 0, 2 }, { 489, 489, 489 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 1;
    int marg1 = -2;
    int retval = cut.shortestPath(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testShortestPath42() throws Exception {
    int[][] carg0 = { { 489, 489, 489 }, { 2, 1, 8 }, { 489, 489, 489 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 1;
    int marg1 = -2;
    int retval = cut.shortestPath(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testShortestPath43() throws Exception {
    int[][] carg0 = { { 1, 489, 489 }, { 489, 489, 489 }, { 10, 2, 489 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 2;
    int marg1 = -3;
    int retval = cut.shortestPath(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testShortestPath44() throws Exception {
    int[][] carg0 = { { 489, 489, 489 }, { 489, 0, 489 }, { 0, 512, 0 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 2;
    int marg1 = -3;
    int retval = cut.shortestPath(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testShortestPath45() throws Exception {
    int[][] carg0 = { { 489, 489, 489 }, { 489, 0, 489 }, { 0, 512, 2 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 2;
    int marg1 = -3;
    int retval = cut.shortestPath(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testShortestPath46() throws Exception {
    int[][] carg0 = { { 41, 10, 0 }, { 489, 233, 489 }, { 2, 512, 241 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 0;
    int marg1 = -1;
    int retval = cut.shortestPath(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testShortestPath47() throws Exception {
    int[][] carg0 = { { 489, 489, 489 }, { 2, 0, 0 }, { 489, 489, 489 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 1;
    int marg1 = -2;
    int retval = cut.shortestPath(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testShortestPath48() throws Exception {
    int[][] carg0 = { { 489, 489, 106 }, { 2, 489, 489 }, { 3, 0, 1 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 2;
    int marg1 = -3;
    int retval = cut.shortestPath(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testShortestPath49() throws Exception {
    int[][] carg0 = { { 489, 489, 489 }, { 2, 1, 0 }, { 489, 489, 489 } };
    Dijkstra cut = new Dijkstra(carg0);

    int marg0 = 1;
    int marg1 = -2;
    int retval = cut.shortestPath(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }
}
