// Auto-generated by MAZE
package nl.uu.tests.maze.generated.benchmarks;

import java.lang.Exception;
import java.lang.IllegalArgumentException;
import java.lang.NullPointerException;
import nl.uu.maze.benchmarks.ExprEvaluator;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class ExprEvaluatorTest {
  @Test
  public void testParse1() throws Exception {
    char[] carg0 = null;
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(NullPointerException.class, () -> cut.parse());
  }

  @Test
  public void testParse2() throws Exception {
    char[] carg0 = { '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse3() throws Exception {
    char[] carg0 = { '\t', '\t', '\n', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse4() throws Exception {
    char[] carg0 = { '\t', '\t', '\r', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse5() throws Exception {
    char[] carg0 = { '\t', '\t', ' ', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse6() throws Exception {
    char[] carg0 = { '\t', '\n', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse7() throws Exception {
    char[] carg0 = { '\t', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse8() throws Exception {
    char[] carg0 = { '\t', '\n', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse9() throws Exception {
    char[] carg0 = { '\t', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse10() throws Exception {
    char[] carg0 = { '\t', '\r', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse11() throws Exception {
    char[] carg0 = { '\t', '\r', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse12() throws Exception {
    char[] carg0 = { '\t', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse13() throws Exception {
    char[] carg0 = { '\t', '\r', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse14() throws Exception {
    char[] carg0 = { '\t', ' ', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse15() throws Exception {
    char[] carg0 = { '\t', ' ', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse16() throws Exception {
    char[] carg0 = { '\t', ' ', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse17() throws Exception {
    char[] carg0 = { '\t', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse18() throws Exception {
    char[] carg0 = { '\n', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse19() throws Exception {
    char[] carg0 = { '\n', '\t', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse20() throws Exception {
    char[] carg0 = { '\n', '\t', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse21() throws Exception {
    char[] carg0 = { '\n', '\t', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse22() throws Exception {
    char[] carg0 = { '\n', '\n', '\t', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse23() throws Exception {
    char[] carg0 = { '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse24() throws Exception {
    char[] carg0 = { '\n', '\n', '\r', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse25() throws Exception {
    char[] carg0 = { '\n', '\n', ' ', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse26() throws Exception {
    char[] carg0 = { '\n', '\r', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse27() throws Exception {
    char[] carg0 = { '\n', '\r', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse28() throws Exception {
    char[] carg0 = { '\n', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse29() throws Exception {
    char[] carg0 = { '\n', '\r', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse30() throws Exception {
    char[] carg0 = { '\n', ' ', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse31() throws Exception {
    char[] carg0 = { '\n', ' ', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse32() throws Exception {
    char[] carg0 = { '\n', ' ', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse33() throws Exception {
    char[] carg0 = { '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse34() throws Exception {
    char[] carg0 = { '\r', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse35() throws Exception {
    char[] carg0 = { '\r', '\t', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse36() throws Exception {
    char[] carg0 = { '\r', '\t', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse37() throws Exception {
    char[] carg0 = { '\r', '\t', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse38() throws Exception {
    char[] carg0 = { '\r', '\n', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse39() throws Exception {
    char[] carg0 = { '\r', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse40() throws Exception {
    char[] carg0 = { '\r', '\n', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse41() throws Exception {
    char[] carg0 = { '\r', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse42() throws Exception {
    char[] carg0 = { '\r', '\r', '\t', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse43() throws Exception {
    char[] carg0 = { '\r', '\r', '\n', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse44() throws Exception {
    char[] carg0 = { '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse45() throws Exception {
    char[] carg0 = { '\r', '\r', ' ', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse46() throws Exception {
    char[] carg0 = { '\r', ' ', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse47() throws Exception {
    char[] carg0 = { '\r', ' ', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse48() throws Exception {
    char[] carg0 = { '\r', ' ', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse49() throws Exception {
    char[] carg0 = { '\r', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse50() throws Exception {
    char[] carg0 = { ' ', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse51() throws Exception {
    char[] carg0 = { ' ', '\t', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse52() throws Exception {
    char[] carg0 = { ' ', '\t', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse53() throws Exception {
    char[] carg0 = { ' ', '\t', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse54() throws Exception {
    char[] carg0 = { ' ', '\n', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse55() throws Exception {
    char[] carg0 = { ' ', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse56() throws Exception {
    char[] carg0 = { ' ', '\n', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse57() throws Exception {
    char[] carg0 = { ' ', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse58() throws Exception {
    char[] carg0 = { ' ', '\r', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse59() throws Exception {
    char[] carg0 = { ' ', '\r', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse60() throws Exception {
    char[] carg0 = { ' ', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse61() throws Exception {
    char[] carg0 = { ' ', '\r', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse62() throws Exception {
    char[] carg0 = { ' ', ' ', '\t', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse63() throws Exception {
    char[] carg0 = { ' ', ' ', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse64() throws Exception {
    char[] carg0 = { ' ', ' ', '\r', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse65() throws Exception {
    char[] carg0 = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse66() throws Exception {
    char[] carg0 = { '2' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    int retval = cut.parse();

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testParse67() throws Exception {
    char[] carg0 = { '(', '\t', '\t' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse68() throws Exception {
    char[] carg0 = { '(', '\t', '\n' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse69() throws Exception {
    char[] carg0 = { '(', '\t', '\r' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse70() throws Exception {
    char[] carg0 = { '(', '\t', ' ' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse71() throws Exception {
    char[] carg0 = { '(', '\n', '\t' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse72() throws Exception {
    char[] carg0 = { '(', '\n', '\n' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse73() throws Exception {
    char[] carg0 = { '(', '\n', '\r' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse74() throws Exception {
    char[] carg0 = { '(', '\n', ' ' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse75() throws Exception {
    char[] carg0 = { '(', '\r', '\t' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse76() throws Exception {
    char[] carg0 = { '(', '\r', '\n' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse77() throws Exception {
    char[] carg0 = { '(', '\r', '\r' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse78() throws Exception {
    char[] carg0 = { '(', '\r', ' ' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse79() throws Exception {
    char[] carg0 = { '(', ' ', '\t' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse80() throws Exception {
    char[] carg0 = { '(', ' ', '\n' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse81() throws Exception {
    char[] carg0 = { '(', ' ', '\r' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse82() throws Exception {
    char[] carg0 = { '(', ' ', ' ' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse83() throws Exception {
    char[] carg0 = { '2', '\u0000' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse84() throws Exception {
    char[] carg0 = { '(', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse85() throws Exception {
    char[] carg0 = { '(', '\t', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse86() throws Exception {
    char[] carg0 = { '(', '\t', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse87() throws Exception {
    char[] carg0 = { '(', '\t', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse88() throws Exception {
    char[] carg0 = { '(', '\n', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse89() throws Exception {
    char[] carg0 = { '(', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse90() throws Exception {
    char[] carg0 = { '(', '\n', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse91() throws Exception {
    char[] carg0 = { '(', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse92() throws Exception {
    char[] carg0 = { '(', '\r', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse93() throws Exception {
    char[] carg0 = { '(', '\r', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse94() throws Exception {
    char[] carg0 = { '(', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse95() throws Exception {
    char[] carg0 = { '(', '\r', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse96() throws Exception {
    char[] carg0 = { '(', ' ', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t', '\t' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse97() throws Exception {
    char[] carg0 = { '(', ' ', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse98() throws Exception {
    char[] carg0 = { '(', ' ', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r', '\r' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse99() throws Exception {
    char[] carg0 = { '(', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse100() throws Exception {
    char[] carg0 = { '2', '<' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse101() throws Exception {
    char[] carg0 = { '2', '2' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    int retval = cut.parse();

    int expected = 22;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testParse102() throws Exception {
    char[] carg0 = { '2', '2', '2' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    int retval = cut.parse();

    int expected = 222;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testParse103() throws Exception {
    char[] carg0 = { '\u0000' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse104() throws Exception {
    char[] carg0 = { ':' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse105() throws Exception {
    char[] carg0 = { '(' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse106() throws Exception {
    char[] carg0 = { '(', '\t' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse107() throws Exception {
    char[] carg0 = { '(', '\t', '\u0000' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse108() throws Exception {
    char[] carg0 = { '(', '\t', '(' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse109() throws Exception {
    char[] carg0 = { '(', '\n' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse110() throws Exception {
    char[] carg0 = { '(', '\n', '\u0000' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse111() throws Exception {
    char[] carg0 = { '(', '\n', '(' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse112() throws Exception {
    char[] carg0 = { '(', '\r' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse113() throws Exception {
    char[] carg0 = { '(', '\r', '\u0000' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse114() throws Exception {
    char[] carg0 = { '(', '\r', '(' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse115() throws Exception {
    char[] carg0 = { '(', ' ' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse116() throws Exception {
    char[] carg0 = { '(', ' ', '\u0000' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse117() throws Exception {
    char[] carg0 = { '(', ' ', '(' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse118() throws Exception {
    char[] carg0 = { '(', '\u0000' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse119() throws Exception {
    char[] carg0 = { '(', ':' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse120() throws Exception {
    char[] carg0 = { '(', '2' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse121() throws Exception {
    char[] carg0 = { '(', '2', '(' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse122() throws Exception {
    char[] carg0 = { '(', '(' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse123() throws Exception {
    char[] carg0 = { '(', '(', '\t' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse124() throws Exception {
    char[] carg0 = { '(', '(', '\n' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse125() throws Exception {
    char[] carg0 = { '(', '(', '\r' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse126() throws Exception {
    char[] carg0 = { '(', '(', ' ' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse127() throws Exception {
    char[] carg0 = { '(', '(', '\u0000' };
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }

  @Test
  public void testParse128() throws Exception {
    char[] carg0 = {};
    ExprEvaluator cut = new ExprEvaluator(carg0);

    Assertions.assertThrows(IllegalArgumentException.class, () -> cut.parse());
  }
}
