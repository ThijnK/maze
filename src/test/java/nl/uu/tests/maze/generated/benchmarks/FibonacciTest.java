// Auto-generated by MAZE
package nl.uu.tests.maze.generated.benchmarks;

import java.lang.Exception;
import nl.uu.maze.benchmarks.Fibonacci;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class FibonacciTest {
  @Test
  public void testRecursive1() throws Exception {
    int marg0 = 1;
    int retval = Fibonacci.recursive(marg0);

    int expected = marg0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIterative1() throws Exception {
    int marg0 = 1;
    int retval = Fibonacci.iterative(marg0);

    int expected = marg0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testRecursive2() throws Exception {
    int marg0 = 2;
    int retval = Fibonacci.recursive(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIterative2() throws Exception {
    int marg0 = 2;
    int retval = Fibonacci.iterative(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIterative3() throws Exception {
    int marg0 = 3;
    int retval = Fibonacci.iterative(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testRecursive3() throws Exception {
    int marg0 = 3;
    int retval = Fibonacci.recursive(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIterative4() throws Exception {
    int marg0 = 4;
    int retval = Fibonacci.iterative(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIterative5() throws Exception {
    int marg0 = 5;
    int retval = Fibonacci.iterative(marg0);

    int expected = marg0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIterative6() throws Exception {
    int marg0 = 6;
    int retval = Fibonacci.iterative(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIterative7() throws Exception {
    int marg0 = 7;
    int retval = Fibonacci.iterative(marg0);

    int expected = 13;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testRecursive4() throws Exception {
    int marg0 = 4;
    int retval = Fibonacci.recursive(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIterative8() throws Exception {
    int marg0 = 8;
    int retval = Fibonacci.iterative(marg0);

    int expected = 21;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIterative9() throws Exception {
    int marg0 = 9;
    int retval = Fibonacci.iterative(marg0);

    int expected = 34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIterative10() throws Exception {
    int marg0 = 15;
    int retval = Fibonacci.iterative(marg0);

    int expected = 610;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testRecursive5() throws Exception {
    int marg0 = 40;
    int retval = Fibonacci.recursive(marg0);

    int expected = 102334155;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testRecursive6() throws Exception {
    int marg0 = 17;
    int retval = Fibonacci.recursive(marg0);

    int expected = 1597;
    Assertions.assertEquals(expected, retval);
  }
}
