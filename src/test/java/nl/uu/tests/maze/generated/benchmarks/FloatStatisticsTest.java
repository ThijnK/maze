// Auto-generated by MAZE
package nl.uu.tests.maze.generated.benchmarks;

import java.lang.Exception;
import java.lang.IllegalArgumentException;
import java.lang.NullPointerException;
import nl.uu.maze.benchmarks.FloatStatistics;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class FloatStatisticsTest {
  @Test
  public void testMean1() throws Exception {
    float[] marg0 = null;
    Assertions.assertThrows(NullPointerException.class, () -> FloatStatistics.mean(marg0));
  }

  @Test
  public void testAbs1() throws Exception {
    float marg0 = 5.877472E-39F;
    float retval = FloatStatistics.abs(marg0);

    float expected = 5.877472E-39F;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAbs2() throws Exception {
    float marg0 = -8.224535E15F;
    float retval = FloatStatistics.abs(marg0);

    float expected = 8.224535E15F;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testVariance1() throws Exception {
    float[] marg0 = null;
    Assertions.assertThrows(NullPointerException.class, () -> FloatStatistics.variance(marg0));
  }

  @Test
  public void testSqrt1() throws Exception {
    float marg0 = -1.0842023E-19F;
    Assertions.assertThrows(IllegalArgumentException.class, () -> FloatStatistics.sqrt(marg0));
  }

  @Test
  public void testStandardDeviation1() throws Exception {
    float[] marg0 = null;
    Assertions.assertThrows(NullPointerException.class, () -> FloatStatistics.standardDeviation(marg0));
  }

  @Test
  public void testMean2() throws Exception {
    float[] marg0 = {};
    float retval = FloatStatistics.mean(marg0);

    float expected = Float.NaN;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMean3() throws Exception {
    float[] marg0 = { Float.NaN };
    float retval = FloatStatistics.mean(marg0);

    float expected = Float.NaN;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSqrt2() throws Exception {
    float marg0 = 4.0000005F;
    float retval = FloatStatistics.sqrt(marg0);

    float expected = 2.0000002F;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSqrt3() throws Exception {
    float marg0 = 3.3428412E-18F;
    float retval = FloatStatistics.sqrt(marg0);

    float expected = 1.6714206E-18F;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMean4() throws Exception {
    float[] marg0 = { Float.NaN, Float.NaN };
    float retval = FloatStatistics.mean(marg0);

    float expected = Float.NaN;
    Assertions.assertEquals(expected, retval);
  }
}
