// Auto-generated by MAZE
package nl.uu.tests.maze.generated.benchmarks;

import java.lang.Exception;
import java.lang.IllegalArgumentException;
import java.lang.NullPointerException;
import nl.uu.maze.benchmarks.FloatStatistics;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class FloatStatisticsTest {
  @Test
  public void testAbs1() throws Exception {
    float marg0 = 1.4E-45F;
    float retval = FloatStatistics.abs(marg0);

    float expected = 1.4E-45F;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMean1() throws Exception {
    float[] marg0 = null;
    Assertions.assertThrows(NullPointerException.class, () -> FloatStatistics.mean(marg0));
  }

  @Test
  public void testAbs2() throws Exception {
    float marg0 = -2.503709E-32F;
    float retval = FloatStatistics.abs(marg0);

    float expected = 2.503709E-32F;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testVariance1() throws Exception {
    float[] marg0 = null;
    Assertions.assertThrows(NullPointerException.class, () -> FloatStatistics.variance(marg0));
  }

  @Test
  public void testStandardDeviation1() throws Exception {
    float[] marg0 = null;
    Assertions.assertThrows(NullPointerException.class, () -> FloatStatistics.standardDeviation(marg0));
  }

  @Test
  public void testSqrt1() throws Exception {
    float marg0 = -1.0842023E-19F;
    Assertions.assertThrows(IllegalArgumentException.class, () -> FloatStatistics.sqrt(marg0));
  }

  @Test
  public void testMean2() throws Exception {
    float[] marg0 = {};
    float retval = FloatStatistics.mean(marg0);

    float expected = Float.NaN;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSqrt2() throws Exception {
    float marg0 = Float.POSITIVE_INFINITY;
    float retval = FloatStatistics.sqrt(marg0);

    float expected = Float.POSITIVE_INFINITY;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMean3() throws Exception {
    float[] marg0 = { Float.NaN };
    float retval = FloatStatistics.mean(marg0);

    float expected = Float.NaN;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSqrt3() throws Exception {
    float marg0 = 7.703723E-34F;
    float retval = FloatStatistics.sqrt(marg0);

    float expected = 3.8518617E-34F;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMean4() throws Exception {
    float[] marg0 = { Float.NaN, Float.NaN };
    float retval = FloatStatistics.mean(marg0);

    float expected = Float.NaN;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testVariance2() throws Exception {
    float[] marg0 = {};
    float retval = FloatStatistics.variance(marg0);

    float expected = Float.NaN;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMean5() throws Exception {
    float[] marg0 = { Float.NaN, Float.NaN, Float.NaN };
    float retval = FloatStatistics.mean(marg0);

    float expected = Float.NaN;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSqrt4() throws Exception {
    float marg0 = 4.0046983F;
    float retval = FloatStatistics.sqrt(marg0);

    float expected = 2.0011744F;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSqrt5() throws Exception {
    float marg0 = 4.000794F;
    float retval = FloatStatistics.sqrt(marg0);

    float expected = 2.0001984F;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSqrt6() throws Exception {
    float marg0 = 3.9986854F;
    float retval = FloatStatistics.sqrt(marg0);

    float expected = 1.9996713F;
    Assertions.assertEquals(expected, retval);
  }
}
