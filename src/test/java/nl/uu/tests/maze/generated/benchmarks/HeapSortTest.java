// Auto-generated by MAZE
package nl.uu.tests.maze.generated.benchmarks;

import java.lang.Exception;
import java.lang.NullPointerException;
import nl.uu.maze.benchmarks.HeapSort;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class HeapSortTest {
  @Test
  public void testSort1() throws Exception {
    float[] marg0 = null;
    Assertions.assertThrows(NullPointerException.class, () -> HeapSort.sort(marg0));
  }

  @Test
  public void testSort2() throws Exception {
    float[] marg0 = {};
    float[] retval = HeapSort.sort(marg0);

    float[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort3() throws Exception {
    float[] marg0 = { Float.NaN };
    float[] retval = HeapSort.sort(marg0);

    float[] expected = { Float.NaN };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort4() throws Exception {
    float[] marg0 = { Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN };
    float[] retval = HeapSort.sort(marg0);

    float[] expected = { Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort5() throws Exception {
    float[] marg0 = { Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN };
    float[] retval = HeapSort.sort(marg0);

    float[] expected = { Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort6() throws Exception {
    float[] marg0 = { Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN };
    float[] retval = HeapSort.sort(marg0);

    float[] expected = { Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort7() throws Exception {
    float[] marg0 = { -1.0617564F, -5.1617546F };
    float[] retval = HeapSort.sort(marg0);

    float[] expected = { -5.1617546F, -1.0617564F };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort8() throws Exception {
    float[] marg0 = { -1.2511921E-38F, -3.577662E-39F };
    float[] retval = HeapSort.sort(marg0);

    float[] expected = { -1.2511921E-38F, -3.577662E-39F };
    Assertions.assertArrayEquals(expected, retval);
  }
}
