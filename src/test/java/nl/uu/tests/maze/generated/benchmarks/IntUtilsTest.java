// Auto-generated by MAZE
package nl.uu.tests.maze.generated.benchmarks;

import java.lang.Exception;
import java.lang.IllegalArgumentException;
import nl.uu.maze.benchmarks.IntUtils;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class IntUtilsTest {
  @Test
  public void testIsPrime1() throws Exception {
    int marg0 = 1;
    boolean retval = IntUtils.isPrime(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFibonacci1() throws Exception {
    int marg0 = 0;
    int retval = IntUtils.fibonacci(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAbs1() throws Exception {
    int marg0 = 0;
    int retval = IntUtils.abs(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLcm1() throws Exception {
    int marg0 = 0;
    int marg1 = 0;
    int retval = IntUtils.lcm(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testGcd1() throws Exception {
    int marg0 = 0;
    int marg1 = 0;
    int retval = IntUtils.gcd(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFibonacci2() throws Exception {
    int marg0 = 1;
    int retval = IntUtils.fibonacci(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAbs2() throws Exception {
    int marg0 = -1;
    int retval = IntUtils.abs(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLcm2() throws Exception {
    int marg0 = -1;
    int marg1 = 0;
    int retval = IntUtils.lcm(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPrime2() throws Exception {
    int marg0 = 2;
    boolean retval = IntUtils.isPrime(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFactorial1() throws Exception {
    int marg0 = 0;
    long retval = IntUtils.factorial(marg0);

    long expected = 1L;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFibonacci3() throws Exception {
    int marg0 = -1;
    Assertions.assertThrows(IllegalArgumentException.class, () -> IntUtils.fibonacci(marg0));
  }

  @Test
  public void testIsPrime3() throws Exception {
    int marg0 = 1073741824;
    boolean retval = IntUtils.isPrime(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFactorial2() throws Exception {
    int marg0 = -1;
    Assertions.assertThrows(IllegalArgumentException.class, () -> IntUtils.factorial(marg0));
  }

  @Test
  public void testGcd2() throws Exception {
    int marg0 = -2147483648;
    int marg1 = -2147483648;
    int retval = IntUtils.gcd(marg0, marg1);

    int expected = -2147483648;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFactorial3() throws Exception {
    int marg0 = 2;
    long retval = IntUtils.factorial(marg0);

    long expected = 2L;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPrime4() throws Exception {
    int marg0 = 5;
    boolean retval = IntUtils.isPrime(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPrime5() throws Exception {
    int marg0 = 722241945;
    boolean retval = IntUtils.isPrime(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testGcd3() throws Exception {
    int marg0 = 1900112772;
    int marg1 = -98305;
    int retval = IntUtils.gcd(marg0, marg1);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFibonacci4() throws Exception {
    int marg0 = 2;
    int retval = IntUtils.fibonacci(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFactorial4() throws Exception {
    int marg0 = 3;
    long retval = IntUtils.factorial(marg0);

    long expected = 6L;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPrime6() throws Exception {
    int marg0 = 13;
    boolean retval = IntUtils.isPrime(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFibonacci5() throws Exception {
    int marg0 = 3;
    int retval = IntUtils.fibonacci(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFactorial5() throws Exception {
    int marg0 = 4;
    long retval = IntUtils.factorial(marg0);

    long expected = 24L;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLcm3() throws Exception {
    int marg0 = 1543504016;
    int marg1 = -1543504016;
    int retval = IntUtils.lcm(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLcm4() throws Exception {
    int marg0 = -2147483648;
    int marg1 = -1;
    int retval = IntUtils.lcm(marg0, marg1);

    int expected = -2147483648;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPrime7() throws Exception {
    int marg0 = 17;
    boolean retval = IntUtils.isPrime(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPrime8() throws Exception {
    int marg0 = 1073741825;
    boolean retval = IntUtils.isPrime(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFactorial6() throws Exception {
    int marg0 = 5;
    long retval = IntUtils.factorial(marg0);

    long expected = 120L;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFibonacci6() throws Exception {
    int marg0 = 4;
    int retval = IntUtils.fibonacci(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLcm5() throws Exception {
    int marg0 = -604511744;
    int marg1 = 336076288;
    int retval = IntUtils.lcm(marg0, marg1);

    int expected = 933376;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLcm6() throws Exception {
    int marg0 = -1073741824;
    int marg1 = 1084098993;
    int retval = IntUtils.lcm(marg0, marg1);

    int expected = 1073741824;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPrime9() throws Exception {
    int marg0 = 31;
    boolean retval = IntUtils.isPrime(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFactorial7() throws Exception {
    int marg0 = 6;
    long retval = IntUtils.factorial(marg0);

    long expected = 720L;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFibonacci7() throws Exception {
    int marg0 = 5;
    int retval = IntUtils.fibonacci(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPrime10() throws Exception {
    int marg0 = 43;
    boolean retval = IntUtils.isPrime(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFactorial8() throws Exception {
    int marg0 = 7;
    long retval = IntUtils.factorial(marg0);

    long expected = 5040L;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPrime11() throws Exception {
    int marg0 = 1073741837;
    boolean retval = IntUtils.isPrime(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFibonacci8() throws Exception {
    int marg0 = 6;
    int retval = IntUtils.fibonacci(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFactorial9() throws Exception {
    int marg0 = 8;
    long retval = IntUtils.factorial(marg0);

    long expected = 40320L;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPrime12() throws Exception {
    int marg0 = 61;
    boolean retval = IntUtils.isPrime(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFibonacci9() throws Exception {
    int marg0 = 7;
    int retval = IntUtils.fibonacci(marg0);

    int expected = 13;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFactorial10() throws Exception {
    int marg0 = 9;
    long retval = IntUtils.factorial(marg0);

    long expected = 362880L;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPrime13() throws Exception {
    int marg0 = 73;
    boolean retval = IntUtils.isPrime(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFibonacci10() throws Exception {
    int marg0 = 8;
    int retval = IntUtils.fibonacci(marg0);

    int expected = 21;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFactorial11() throws Exception {
    int marg0 = 10;
    long retval = IntUtils.factorial(marg0);

    long expected = 3628800L;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPrime14() throws Exception {
    int marg0 = 97;
    boolean retval = IntUtils.isPrime(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFactorial12() throws Exception {
    int marg0 = 11;
    long retval = IntUtils.factorial(marg0);

    long expected = 39916800L;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFibonacci11() throws Exception {
    int marg0 = 9;
    int retval = IntUtils.fibonacci(marg0);

    int expected = 34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPrime15() throws Exception {
    int marg0 = 109;
    boolean retval = IntUtils.isPrime(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFactorial13() throws Exception {
    int marg0 = 12;
    long retval = IntUtils.factorial(marg0);

    long expected = 479001600L;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPrime16() throws Exception {
    int marg0 = 1439476313;
    boolean retval = IntUtils.isPrime(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFibonacci12() throws Exception {
    int marg0 = 10;
    int retval = IntUtils.fibonacci(marg0);

    int expected = 55;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPrime17() throws Exception {
    int marg0 = 137;
    boolean retval = IntUtils.isPrime(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFactorial14() throws Exception {
    int marg0 = 13;
    long retval = IntUtils.factorial(marg0);

    long expected = 6227020800L;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFibonacci13() throws Exception {
    int marg0 = 11;
    int retval = IntUtils.fibonacci(marg0);

    int expected = 89;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFactorial15() throws Exception {
    int marg0 = 14;
    long retval = IntUtils.factorial(marg0);

    long expected = 87178291200L;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPrime18() throws Exception {
    int marg0 = 167;
    boolean retval = IntUtils.isPrime(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPrime19() throws Exception {
    int marg0 = 247463957;
    boolean retval = IntUtils.isPrime(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFibonacci14() throws Exception {
    int marg0 = 12;
    int retval = IntUtils.fibonacci(marg0);

    int expected = 144;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFactorial16() throws Exception {
    int marg0 = 15;
    long retval = IntUtils.factorial(marg0);

    long expected = 1307674368000L;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPrime20() throws Exception {
    int marg0 = 173;
    boolean retval = IntUtils.isPrime(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFibonacci15() throws Exception {
    int marg0 = 13;
    int retval = IntUtils.fibonacci(marg0);

    int expected = 233;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFactorial17() throws Exception {
    int marg0 = 16;
    long retval = IntUtils.factorial(marg0);

    long expected = 20922789888000L;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPrime21() throws Exception {
    int marg0 = 197;
    boolean retval = IntUtils.isPrime(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFactorial18() throws Exception {
    int marg0 = 17;
    long retval = IntUtils.factorial(marg0);

    long expected = 355687428096000L;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFibonacci16() throws Exception {
    int marg0 = 14;
    int retval = IntUtils.fibonacci(marg0);

    int expected = 377;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPrime22() throws Exception {
    int marg0 = 241;
    boolean retval = IntUtils.isPrime(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFactorial19() throws Exception {
    int marg0 = 18;
    long retval = IntUtils.factorial(marg0);

    long expected = 6402373705728000L;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFibonacci17() throws Exception {
    int marg0 = 15;
    int retval = IntUtils.fibonacci(marg0);

    int expected = 610;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPrime23() throws Exception {
    int marg0 = 271;
    boolean retval = IntUtils.isPrime(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFactorial20() throws Exception {
    int marg0 = 19;
    long retval = IntUtils.factorial(marg0);

    long expected = 121645100408832000L;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPrime24() throws Exception {
    int marg0 = 144145193;
    boolean retval = IntUtils.isPrime(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFibonacci18() throws Exception {
    int marg0 = 16;
    int retval = IntUtils.fibonacci(marg0);

    int expected = 987;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFactorial21() throws Exception {
    int marg0 = 20;
    long retval = IntUtils.factorial(marg0);

    long expected = 2432902008176640000L;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPrime25() throws Exception {
    int marg0 = 293;
    boolean retval = IntUtils.isPrime(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFibonacci19() throws Exception {
    int marg0 = 17;
    int retval = IntUtils.fibonacci(marg0);

    int expected = 1597;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFactorial22() throws Exception {
    int marg0 = 21;
    long retval = IntUtils.factorial(marg0);

    long expected = -4249290049419214848L;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPrime26() throws Exception {
    int marg0 = 349;
    boolean retval = IntUtils.isPrime(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPrime27() throws Exception {
    int marg0 = 1073741927;
    boolean retval = IntUtils.isPrime(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFibonacci20() throws Exception {
    int marg0 = 18;
    int retval = IntUtils.fibonacci(marg0);

    int expected = 2584;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFactorial23() throws Exception {
    int marg0 = 22;
    long retval = IntUtils.factorial(marg0);

    long expected = -1250660718674968576L;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPrime28() throws Exception {
    int marg0 = 383;
    boolean retval = IntUtils.isPrime(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFactorial24() throws Exception {
    int marg0 = 23;
    long retval = IntUtils.factorial(marg0);

    long expected = 8128291617894825984L;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFibonacci21() throws Exception {
    int marg0 = 19;
    int retval = IntUtils.fibonacci(marg0);

    int expected = 4181;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPrime29() throws Exception {
    int marg0 = 421;
    boolean retval = IntUtils.isPrime(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFactorial25() throws Exception {
    int marg0 = 24;
    long retval = IntUtils.factorial(marg0);

    long expected = -7835185981329244160L;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFibonacci22() throws Exception {
    int marg0 = 20;
    int retval = IntUtils.fibonacci(marg0);

    int expected = 6765;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPrime30() throws Exception {
    int marg0 = 449;
    boolean retval = IntUtils.isPrime(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFactorial26() throws Exception {
    int marg0 = 25;
    long retval = IntUtils.factorial(marg0);

    long expected = 7034535277573963776L;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFibonacci23() throws Exception {
    int marg0 = 21;
    int retval = IntUtils.fibonacci(marg0);

    int expected = 10946;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFactorial27() throws Exception {
    int marg0 = 26;
    long retval = IntUtils.factorial(marg0);

    long expected = -1569523520172457984L;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPrime31() throws Exception {
    int marg0 = 491;
    boolean retval = IntUtils.isPrime(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPrime32() throws Exception {
    int marg0 = 1073742097;
    boolean retval = IntUtils.isPrime(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFibonacci24() throws Exception {
    int marg0 = 22;
    int retval = IntUtils.fibonacci(marg0);

    int expected = 17711;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFactorial28() throws Exception {
    int marg0 = 27;
    long retval = IntUtils.factorial(marg0);

    long expected = -5483646897237262336L;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPrime33() throws Exception {
    int marg0 = 547;
    boolean retval = IntUtils.isPrime(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFibonacci25() throws Exception {
    int marg0 = 23;
    int retval = IntUtils.fibonacci(marg0);

    int expected = 28657;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testFactorial29() throws Exception {
    int marg0 = 28;
    long retval = IntUtils.factorial(marg0);

    long expected = -5968160532966932480L;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPrime34() throws Exception {
    int marg0 = 607;
    boolean retval = IntUtils.isPrime(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }
}
