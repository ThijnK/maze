// Auto-generated by MAZE
package nl.uu.tests.maze.generated.benchmarks;

import java.lang.Exception;
import nl.uu.maze.benchmarks.MatrixAnalyzer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class MatrixAnalyzerTest {
  @Test
  public void testAnalyze1() throws Exception {
    int[][] marg0 = null;
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze2() throws Exception {
    int[][] marg0 = {};
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze3() throws Exception {
    int[][] marg0 = { {} };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze4() throws Exception {
    int[][] marg0 = { { 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze5() throws Exception {
    int[][] marg0 = { { 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze6() throws Exception {
    int[][] marg0 = { { 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze7() throws Exception {
    int[][] marg0 = { { -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze8() throws Exception {
    int[][] marg0 = { { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze9() throws Exception {
    int[][] marg0 = { { 37, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze10() throws Exception {
    int[][] marg0 = { { 101, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze11() throws Exception {
    int[][] marg0 = { { 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze12() throws Exception {
    int[][] marg0 = { { 0, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze13() throws Exception {
    int[][] marg0 = { { 101, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze14() throws Exception {
    int[][] marg0 = { { 37, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze15() throws Exception {
    int[][] marg0 = { { 0, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze16() throws Exception {
    int[][] marg0 = { { 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze17() throws Exception {
    int[][] marg0 = { { -2147483547, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze18() throws Exception {
    int[][] marg0 = { { 101, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze19() throws Exception {
    int[][] marg0 = { { 37, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze20() throws Exception {
    int[][] marg0 = { { -2147483547, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze21() throws Exception {
    int[][] marg0 = { { 0, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze22() throws Exception {
    int[][] marg0 = { { -2147483547, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze23() throws Exception {
    int[][] marg0 = { { -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze24() throws Exception {
    int[][] marg0 = { { 101 }, { 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze25() throws Exception {
    int[][] marg0 = { { 37 }, { 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze26() throws Exception {
    int[][] marg0 = { { 101 }, { 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze27() throws Exception {
    int[][] marg0 = { { 37 }, { 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze28() throws Exception {
    int[][] marg0 = { { 0 }, { 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze29() throws Exception {
    int[][] marg0 = { { 101 }, { 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze30() throws Exception {
    int[][] marg0 = { { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze31() throws Exception {
    int[][] marg0 = { { 37 }, { 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze32() throws Exception {
    int[][] marg0 = { { 37, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze33() throws Exception {
    int[][] marg0 = { { 0 }, { 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze34() throws Exception {
    int[][] marg0 = { { 101, 37, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze35() throws Exception {
    int[][] marg0 = { { 101, 101, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze36() throws Exception {
    int[][] marg0 = { { 37, 37, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze37() throws Exception {
    int[][] marg0 = { { 37, 101, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze38() throws Exception {
    int[][] marg0 = { { 0 }, { 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze39() throws Exception {
    int[][] marg0 = { { 0, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze40() throws Exception {
    int[][] marg0 = { { -2147483547 }, { 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze41() throws Exception {
    int[][] marg0 = { { 101 }, { -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze42() throws Exception {
    int[][] marg0 = { { 101, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze43() throws Exception {
    int[][] marg0 = { { 101, 0, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze44() throws Exception {
    int[][] marg0 = { { 101, 101, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze45() throws Exception {
    int[][] marg0 = { { 37 }, { -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze46() throws Exception {
    int[][] marg0 = { { 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze47() throws Exception {
    int[][] marg0 = { { 37, 0, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze48() throws Exception {
    int[][] marg0 = { { 37, 101, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze49() throws Exception {
    int[][] marg0 = { { 0, 37, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze50() throws Exception {
    int[][] marg0 = { { 0, 101, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze51() throws Exception {
    int[][] marg0 = { { -2147483547 }, { 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze52() throws Exception {
    int[][] marg0 = { { 101, 37, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze53() throws Exception {
    int[][] marg0 = { { 101, 0, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze54() throws Exception {
    int[][] marg0 = { { 37, 37, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze55() throws Exception {
    int[][] marg0 = { { 37, 0, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze56() throws Exception {
    int[][] marg0 = { { 0 }, { -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze57() throws Exception {
    int[][] marg0 = { { 0, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze58() throws Exception {
    int[][] marg0 = { { 0, 0, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze59() throws Exception {
    int[][] marg0 = { { 0, 101, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze60() throws Exception {
    int[][] marg0 = { { -2147483547 }, { 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze61() throws Exception {
    int[][] marg0 = { { -2147483547, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze62() throws Exception {
    int[][] marg0 = { { 101, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze63() throws Exception {
    int[][] marg0 = { { 101, -2147483547, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze64() throws Exception {
    int[][] marg0 = { { 101, 101, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze65() throws Exception {
    int[][] marg0 = { { 37, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze66() throws Exception {
    int[][] marg0 = { { 37, -2147483547, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze67() throws Exception {
    int[][] marg0 = { { 37, 101, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze68() throws Exception {
    int[][] marg0 = { { 0, 37, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze69() throws Exception {
    int[][] marg0 = { { 0, 0, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze70() throws Exception {
    int[][] marg0 = { { -2147483547, 37, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze71() throws Exception {
    int[][] marg0 = { { -2147483547, 101, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze72() throws Exception {
    int[][] marg0 = { { 101, 37, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze73() throws Exception {
    int[][] marg0 = { { 101, -2147483547, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze74() throws Exception {
    int[][] marg0 = { { 37, 37, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze75() throws Exception {
    int[][] marg0 = { { 37, -2147483547, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze76() throws Exception {
    int[][] marg0 = { { 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze77() throws Exception {
    int[][] marg0 = { { 0, -2147483547, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze78() throws Exception {
    int[][] marg0 = { { 0, 101, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze79() throws Exception {
    int[][] marg0 = { { -2147483547 }, { -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze80() throws Exception {
    int[][] marg0 = { { -2147483547, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze81() throws Exception {
    int[][] marg0 = { { -2147483547, 0, 102 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze82() throws Exception {
    int[][] marg0 = { { -2147483547, 101, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze83() throws Exception {
    int[][] marg0 = { { 101, 0, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze84() throws Exception {
    int[][] marg0 = { { 101, -2147483547, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze85() throws Exception {
    int[][] marg0 = { { 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze86() throws Exception {
    int[][] marg0 = { { 37, 0, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze87() throws Exception {
    int[][] marg0 = { { 37, -2147483547, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze88() throws Exception {
    int[][] marg0 = { { 0, 37, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze89() throws Exception {
    int[][] marg0 = { { 0, -2147483547, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze90() throws Exception {
    int[][] marg0 = { { -2147483547, 37, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze91() throws Exception {
    int[][] marg0 = { { -2147483547, 0, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze92() throws Exception {
    int[][] marg0 = { { 37 }, { 37 }, { 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze93() throws Exception {
    int[][] marg0 = { { 37, 37 }, { 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze94() throws Exception {
    int[][] marg0 = { { 37, 37 }, { -2147483547, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze95() throws Exception {
    int[][] marg0 = { { 37, 37, 37 }, { 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze96() throws Exception {
    int[][] marg0 = { { 37, 37, 37, 0, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze97() throws Exception {
    int[][] marg0 = { { 37, 37, 37, -2147483547, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze98() throws Exception {
    int[][] marg0 = { { 37, 37, 37, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze99() throws Exception {
    int[][] marg0 = { { 37, 37, 0, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze100() throws Exception {
    int[][] marg0 = { { 37, 37, 101, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze101() throws Exception {
    int[][] marg0 = { { 37, 0, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze102() throws Exception {
    int[][] marg0 = { { 37, -2147483547 }, { 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze103() throws Exception {
    int[][] marg0 = { { 37, -2147483547, 37 }, { 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze104() throws Exception {
    int[][] marg0 = { { 37, -2147483547, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze105() throws Exception {
    int[][] marg0 = { { 37, 101, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze106() throws Exception {
    int[][] marg0 = { { 0, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze107() throws Exception {
    int[][] marg0 = { { 0, 0, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze108() throws Exception {
    int[][] marg0 = { { 0, -2147483547, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze109() throws Exception {
    int[][] marg0 = { { -2147483547, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze110() throws Exception {
    int[][] marg0 = { { -2147483547, -2147483547, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze111() throws Exception {
    int[][] marg0 = { { -2147483547, 101, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze112() throws Exception {
    int[][] marg0 = { { 101, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze113() throws Exception {
    int[][] marg0 = { { 101, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze114() throws Exception {
    int[][] marg0 = { { 37 }, { 37 }, { -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze115() throws Exception {
    int[][] marg0 = { { 37 }, { 37 }, { 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze116() throws Exception {
    int[][] marg0 = { { 37 }, { 0 }, { 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze117() throws Exception {
    int[][] marg0 = { { 37 }, { -2147483547 }, { -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze118() throws Exception {
    int[][] marg0 = { { 37 }, { 101 }, { 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze119() throws Exception {
    int[][] marg0 = { { 37, 37 }, { 0, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze120() throws Exception {
    int[][] marg0 = { { 37, 37 }, { 101, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze121() throws Exception {
    int[][] marg0 = { { 37, 37, 37, 101, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze122() throws Exception {
    int[][] marg0 = { { 37, 37, 0 }, { 0, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze123() throws Exception {
    int[][] marg0 = { { 37, 37, 0, 0, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze124() throws Exception {
    int[][] marg0 = { { 37, 37, 0, -2147483547, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze125() throws Exception {
    int[][] marg0 = { { 37, 37, 0, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze126() throws Exception {
    int[][] marg0 = { { 37, 37, -2147483547, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze127() throws Exception {
    int[][] marg0 = { { 38, 37, 101 }, { 37, 37, 37 }, { 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze128() throws Exception {
    int[][] marg0 = { { 37, 37, 101, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze129() throws Exception {
    int[][] marg0 = { { 37, 37, 101, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze130() throws Exception {
    int[][] marg0 = { { 37, 37, 101, -2147483547, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze131() throws Exception {
    int[][] marg0 = { { 37, 37, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze132() throws Exception {
    int[][] marg0 = { { 37, 0 }, { 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze133() throws Exception {
    int[][] marg0 = { { 37, 0 }, { -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze134() throws Exception {
    int[][] marg0 = { { 37, 0, 37 }, { 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze135() throws Exception {
    int[][] marg0 = { { 37, 0, 37, 0, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze136() throws Exception {
    int[][] marg0 = { { 37, 0, 37, -2147483547, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze137() throws Exception {
    int[][] marg0 = { { 37, 0, 37, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze138() throws Exception {
    int[][] marg0 = { { 37, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze139() throws Exception {
    int[][] marg0 = { { 37, 0, 101, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze140() throws Exception {
    int[][] marg0 = { { 37, -2147483547 }, { 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze141() throws Exception {
    int[][] marg0 = { { 37, -2147483547 }, { -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze142() throws Exception {
    int[][] marg0 = { { 37, -2147483547, 37, 0, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze143() throws Exception {
    int[][] marg0 = { { 37, -2147483547, 37, -2147483547, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 }, { 37, -2147483547, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze144() throws Exception {
    int[][] marg0 = { { 37, -2147483547, 37, 101, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze145() throws Exception {
    int[][] marg0 = { { 37, -2147483547, 0 }, { 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze146() throws Exception {
    int[][] marg0 = { { 37, -2147483547, 0, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze147() throws Exception {
    int[][] marg0 = { { 37, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze148() throws Exception {
    int[][] marg0 = { { 37, -2147483547, 101, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze149() throws Exception {
    int[][] marg0 = { { 37, 101 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze150() throws Exception {
    int[][] marg0 = { { 38, 101, 37 }, { 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze151() throws Exception {
    int[][] marg0 = { { 37, 101, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze152() throws Exception {
    int[][] marg0 = { { 37, 101, 37, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze153() throws Exception {
    int[][] marg0 = { { 37, 101, 37, -2147483547, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze154() throws Exception {
    int[][] marg0 = { { 37, 101, 37, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze155() throws Exception {
    int[][] marg0 = { { 37, 101, 0, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze156() throws Exception {
    int[][] marg0 = { { 37, 101, 101, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze157() throws Exception {
    int[][] marg0 = { { 0 }, { 37 }, { 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze158() throws Exception {
    int[][] marg0 = { { 0, 37 }, { 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze159() throws Exception {
    int[][] marg0 = { { 0, 37 }, { -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze160() throws Exception {
    int[][] marg0 = { { 0, 37, 37 }, { 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze161() throws Exception {
    int[][] marg0 = { { 0, 37, 37, 0, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze162() throws Exception {
    int[][] marg0 = { { 0, 37, 37, -2147483547, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze163() throws Exception {
    int[][] marg0 = { { 0, 37, 37, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze164() throws Exception {
    int[][] marg0 = { { 0, 37, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze165() throws Exception {
    int[][] marg0 = { { 0, 37, 101, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze166() throws Exception {
    int[][] marg0 = { { 0, 0, 37, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze167() throws Exception {
    int[][] marg0 = { { 0, -2147483547 }, { 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze168() throws Exception {
    int[][] marg0 = { { 0, -2147483547, 37 }, { 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze169() throws Exception {
    int[][] marg0 = { { 0, -2147483547, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze170() throws Exception {
    int[][] marg0 = { { 0, 101, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze171() throws Exception {
    int[][] marg0 = { { -2147483547, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze172() throws Exception {
    int[][] marg0 = { { -2147483547, 37, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze173() throws Exception {
    int[][] marg0 = { { -2147483547, -2147483547, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze174() throws Exception {
    int[][] marg0 = { { 101 }, { 37 }, { 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze175() throws Exception {
    int[][] marg0 = { { 101, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze176() throws Exception {
    int[][] marg0 = { { 102, 37, 37 }, { 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze177() throws Exception {
    int[][] marg0 = { { 101, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze178() throws Exception {
    int[][] marg0 = { { 101, 37, 37, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze179() throws Exception {
    int[][] marg0 = { { 101, 37, 37, -2147483547, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze180() throws Exception {
    int[][] marg0 = { { 101, 37, 37, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze181() throws Exception {
    int[][] marg0 = { { 101, 37, 0, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze182() throws Exception {
    int[][] marg0 = { { 101, 37, 101, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze183() throws Exception {
    int[][] marg0 = { { 101, 0, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze184() throws Exception {
    int[][] marg0 = { { 101, -2147483547, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze185() throws Exception {
    int[][] marg0 = { { 101, 101, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze186() throws Exception {
    int[][] marg0 = { { 37 }, { 0 }, { -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze187() throws Exception {
    int[][] marg0 = { { 37 }, { 0 }, { 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze188() throws Exception {
    int[][] marg0 = { { 37 }, { -2147483547 }, { 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze189() throws Exception {
    int[][] marg0 = { { 37 }, { 101 }, { 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze190() throws Exception {
    int[][] marg0 = { { 37 }, { 101 }, { 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze191() throws Exception {
    int[][] marg0 = { { 37, 37 }, { 101, -2147483547 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze192() throws Exception {
    int[][] marg0 = { { 37, 37 }, { 101, 101 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze193() throws Exception {
    int[][] marg0 = { { 37, 37, 0, 101, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze194() throws Exception {
    int[][] marg0 = { { 37, 37, -2147483547 }, { -2147483547, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze195() throws Exception {
    int[][] marg0 = { { 37, 37, -2147483547, 0, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze196() throws Exception {
    int[][] marg0 = { { 37, 37, -2147483547, -2147483547, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 }, { -2147483547, -2147483547, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze197() throws Exception {
    int[][] marg0 = { { 37, 37, -2147483547, 101, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze198() throws Exception {
    int[][] marg0 = { { 38, 37, 101 }, { -2147483547, 101, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze199() throws Exception {
    int[][] marg0 = { { 37, 37, 101 }, { 101, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze200() throws Exception {
    int[][] marg0 = { { 37, 37, 101, 0, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze201() throws Exception {
    int[][] marg0 = { { 37, 37, 101, 101, -2147483547, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze202() throws Exception {
    int[][] marg0 = { { 37, 0 }, { 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze203() throws Exception {
    int[][] marg0 = { { 37, 0 }, { 101, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze204() throws Exception {
    int[][] marg0 = { { 37, 0, 37, 101, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze205() throws Exception {
    int[][] marg0 = { { 37, 0, 0 }, { 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze206() throws Exception {
    int[][] marg0 = { { 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze207() throws Exception {
    int[][] marg0 = { { 37, 0, 0, -2147483547, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze208() throws Exception {
    int[][] marg0 = { { 37, 0, 0, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze209() throws Exception {
    int[][] marg0 = { { 37, 0, -2147483547, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze210() throws Exception {
    int[][] marg0 = { { 37, 0, 101 }, { 37, 37, 37 }, { 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze211() throws Exception {
    int[][] marg0 = { { 37, 0, 101, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze212() throws Exception {
    int[][] marg0 = { { 37, 0, 105, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze213() throws Exception {
    int[][] marg0 = { { 37, 0, 101, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 31;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze214() throws Exception {
    int[][] marg0 = { { 37, 0, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze215() throws Exception {
    int[][] marg0 = { { 37, -2147483547 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze216() throws Exception {
    int[][] marg0 = { { 37, -2147483547, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze217() throws Exception {
    int[][] marg0 = { { 37, -2147483547, 0, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 31;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze218() throws Exception {
    int[][] marg0 = { { 37, -2147483547, 0, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -31;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze219() throws Exception {
    int[][] marg0 = { { 37, -2147483547, -2147483547 }, { -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze220() throws Exception {
    int[][] marg0 = { { 37, -2147483547, -2147483547, 37, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 }, { -2147483547, 37, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 66;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze221() throws Exception {
    int[][] marg0 = { { 37, -2147483547, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze222() throws Exception {
    int[][] marg0 = { { 37, -2147483547, 101, 0, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 31;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze223() throws Exception {
    int[][] marg0 = { { 37, -2147483547, 101, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze224() throws Exception {
    int[][] marg0 = { { 37, -2147483547, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze225() throws Exception {
    int[][] marg0 = { { 37, 101 }, { 37, -2147483547 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze226() throws Exception {
    int[][] marg0 = { { 37, 101 }, { 37, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 196;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze227() throws Exception {
    int[][] marg0 = { { 37, 101 }, { 0, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze228() throws Exception {
    int[][] marg0 = { { 37, 101 }, { -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze229() throws Exception {
    int[][] marg0 = { { 37, 101 }, { 101, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze230() throws Exception {
    int[][] marg0 = { { 38, 101, 37 }, { -2147483547, 37, 37 }, { 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze231() throws Exception {
    int[][] marg0 = { { 37, 101, 37 }, { 101, 37, 37 }, { 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze232() throws Exception {
    int[][] marg0 = { { 37, 101, 37, 0, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze233() throws Exception {
    int[][] marg0 = { { 37, 101, 37, 101, -2147483547, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze234() throws Exception {
    int[][] marg0 = { { 37, 101, 0 }, { 37, 37, 37 }, { 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze235() throws Exception {
    int[][] marg0 = { { 37, 101, 0, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze236() throws Exception {
    int[][] marg0 = { { 37, 101, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze237() throws Exception {
    int[][] marg0 = { { 37, 101, 0, -2147483547, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -31;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze238() throws Exception {
    int[][] marg0 = { { 37, 101, 0, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze239() throws Exception {
    int[][] marg0 = { { 37, 101, -2147483547, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze240() throws Exception {
    int[][] marg0 = { { 37, 101, 101 }, { 37, 101, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze241() throws Exception {
    int[][] marg0 = { { 37, 101, 101, 37, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze242() throws Exception {
    int[][] marg0 = { { 37, 101, 101, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze243() throws Exception {
    int[][] marg0 = { { 37, 101, 101, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze244() throws Exception {
    int[][] marg0 = { { 37, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze245() throws Exception {
    int[][] marg0 = { { 0 }, { 37 }, { -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze246() throws Exception {
    int[][] marg0 = { { 0 }, { 37 }, { 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze247() throws Exception {
    int[][] marg0 = { { 0 }, { 0 }, { 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze248() throws Exception {
    int[][] marg0 = { { 0 }, { -2147483547 }, { -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze249() throws Exception {
    int[][] marg0 = { { 0 }, { 101 }, { 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze250() throws Exception {
    int[][] marg0 = { { 0, 37 }, { 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze251() throws Exception {
    int[][] marg0 = { { 0, 37 }, { 101, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze252() throws Exception {
    int[][] marg0 = { { 0, 37, 37, 101, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze253() throws Exception {
    int[][] marg0 = { { 0, 37, 0 }, { 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze254() throws Exception {
    int[][] marg0 = { { 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze255() throws Exception {
    int[][] marg0 = { { 0, 37, 0, -2147483547, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze256() throws Exception {
    int[][] marg0 = { { 0, 37, 0, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze257() throws Exception {
    int[][] marg0 = { { 0, 37, -2147483547, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze258() throws Exception {
    int[][] marg0 = { { 0, 37, 101 }, { 37, 37, 37 }, { 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze259() throws Exception {
    int[][] marg0 = { { 0, 37, 101, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze260() throws Exception {
    int[][] marg0 = { { 0, 37, 105, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze261() throws Exception {
    int[][] marg0 = { { 0, 37, 101, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 31;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze262() throws Exception {
    int[][] marg0 = { { 0, 37, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze263() throws Exception {
    int[][] marg0 = { { 0, 0 }, { 37, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze264() throws Exception {
    int[][] marg0 = { { 0, 0 }, { -2147483547, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze265() throws Exception {
    int[][] marg0 = { { 0, 0, 37 }, { 37, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze266() throws Exception {
    int[][] marg0 = { { 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze267() throws Exception {
    int[][] marg0 = { { 0, 0, 37, -2147483547, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze268() throws Exception {
    int[][] marg0 = { { 0, 0, 37, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze269() throws Exception {
    int[][] marg0 = { { 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze270() throws Exception {
    int[][] marg0 = { { 0, 0, 101, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze271() throws Exception {
    int[][] marg0 = { { 0, -2147483547 }, { 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze272() throws Exception {
    int[][] marg0 = { { 0, -2147483547 }, { -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze273() throws Exception {
    int[][] marg0 = { { 0, -2147483547, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze274() throws Exception {
    int[][] marg0 = { { 0, -2147483547, 37, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 31;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze275() throws Exception {
    int[][] marg0 = { { 0, -2147483547, 37, 101, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze276() throws Exception {
    int[][] marg0 = { { 0, -2147483547, 0 }, { 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze277() throws Exception {
    int[][] marg0 = { { 0, -2147483547, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze278() throws Exception {
    int[][] marg0 = { { 0, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze279() throws Exception {
    int[][] marg0 = { { 0, -2147483547, 101, 37, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 31;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze280() throws Exception {
    int[][] marg0 = { { 0, 101 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze281() throws Exception {
    int[][] marg0 = { { 0, 101, 37 }, { 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze282() throws Exception {
    int[][] marg0 = { { 0, 101, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze283() throws Exception {
    int[][] marg0 = { { 0, 101, 37, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze284() throws Exception {
    int[][] marg0 = { { 0, 101, 37, -2147483547, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze285() throws Exception {
    int[][] marg0 = { { 0, 101, 37, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze286() throws Exception {
    int[][] marg0 = { { 0, 101, 0, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze287() throws Exception {
    int[][] marg0 = { { 0, 101, 101, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze288() throws Exception {
    int[][] marg0 = { { -2147483547 }, { 37 }, { 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze289() throws Exception {
    int[][] marg0 = { { -2147483547, 37 }, { 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze290() throws Exception {
    int[][] marg0 = { { -2147483547, 37 }, { -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze291() throws Exception {
    int[][] marg0 = { { -2147483547, 37, 37 }, { 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze292() throws Exception {
    int[][] marg0 = { { -2147483547, 37, 37, 0, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze293() throws Exception {
    int[][] marg0 = { { -2147483547, 37, 37, -2147483547, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 }, { 37, -2147483547, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze294() throws Exception {
    int[][] marg0 = { { -2147483547, 37, 37, 101, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze295() throws Exception {
    int[][] marg0 = { { -2147483547, 37, 0, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze296() throws Exception {
    int[][] marg0 = { { -2147483547, 37, 101, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze297() throws Exception {
    int[][] marg0 = { { -2147483547, 0, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze298() throws Exception {
    int[][] marg0 = { { -2147483547, 0, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze299() throws Exception {
    int[][] marg0 = { { -2147483547, -2147483547 }, { 37, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze300() throws Exception {
    int[][] marg0 = { { -2147483547, -2147483547, 37 }, { 37, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze301() throws Exception {
    int[][] marg0 = { { -2147483547, -2147483547, 37, 37, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 }, { 37, 37, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 66;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze302() throws Exception {
    int[][] marg0 = { { -2147483547, -2147483547, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze303() throws Exception {
    int[][] marg0 = { { -2147483547, 101, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze304() throws Exception {
    int[][] marg0 = { { 101 }, { 37 }, { 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze305() throws Exception {
    int[][] marg0 = { { 101 }, { 37 }, { 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze306() throws Exception {
    int[][] marg0 = { { 101 }, { 0 }, { 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze307() throws Exception {
    int[][] marg0 = { { 101 }, { -2147483547 }, { 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze308() throws Exception {
    int[][] marg0 = { { 101 }, { 101 }, { 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze309() throws Exception {
    int[][] marg0 = { { 101, 37 }, { 37, -2147483547 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze310() throws Exception {
    int[][] marg0 = { { 101, 37 }, { 37, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 196;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze311() throws Exception {
    int[][] marg0 = { { 101, 37 }, { 0, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze312() throws Exception {
    int[][] marg0 = { { 101, 37 }, { -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze313() throws Exception {
    int[][] marg0 = { { 101, 37 }, { 101, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze314() throws Exception {
    int[][] marg0 = { { 102, 37, 37 }, { -2147483547, 37, 37 }, { 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze315() throws Exception {
    int[][] marg0 = { { 101, 37, 37 }, { 101, 37, 37 }, { 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze316() throws Exception {
    int[][] marg0 = { { 101, 37, 37, 0, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze317() throws Exception {
    int[][] marg0 = { { 101, 37, 37, 101, -2147483547, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze318() throws Exception {
    int[][] marg0 = { { 101, 37, 0 }, { 37, 37, 37 }, { 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze319() throws Exception {
    int[][] marg0 = { { 101, 37, 0, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze320() throws Exception {
    int[][] marg0 = { { 101, 37, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze321() throws Exception {
    int[][] marg0 = { { 101, 37, 0, -2147483547, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -31;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze322() throws Exception {
    int[][] marg0 = { { 101, 37, 0, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze323() throws Exception {
    int[][] marg0 = { { 101, 37, -2147483547, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze324() throws Exception {
    int[][] marg0 = { { 101, 37, 101 }, { 37, 101, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze325() throws Exception {
    int[][] marg0 = { { 101, 37, 101, 37, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze326() throws Exception {
    int[][] marg0 = { { 101, 37, 101, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze327() throws Exception {
    int[][] marg0 = { { 101, 37, 101, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze328() throws Exception {
    int[][] marg0 = { { 101, 37, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze329() throws Exception {
    int[][] marg0 = { { 101, 0 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze330() throws Exception {
    int[][] marg0 = { { 101, 0, 37 }, { 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze331() throws Exception {
    int[][] marg0 = { { 101, 0, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze332() throws Exception {
    int[][] marg0 = { { 101, 0, 37, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze333() throws Exception {
    int[][] marg0 = { { 101, 0, 37, -2147483547, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze334() throws Exception {
    int[][] marg0 = { { 101, 0, 37, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze335() throws Exception {
    int[][] marg0 = { { 101, 0, 0, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze336() throws Exception {
    int[][] marg0 = { { 101, 0, 101, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze337() throws Exception {
    int[][] marg0 = { { 101, -2147483547 }, { 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze338() throws Exception {
    int[][] marg0 = { { 101, -2147483547 }, { -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze339() throws Exception {
    int[][] marg0 = { { 101, -2147483547, 37 }, { 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze340() throws Exception {
    int[][] marg0 = { { 101, -2147483547, 37, 0, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze341() throws Exception {
    int[][] marg0 = { { 101, -2147483547, 37, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze342() throws Exception {
    int[][] marg0 = { { 101, -2147483547, 37, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze343() throws Exception {
    int[][] marg0 = { { 101, -2147483547, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -31;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze344() throws Exception {
    int[][] marg0 = { { 101, -2147483547, 101, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze345() throws Exception {
    int[][] marg0 = { { 101, 101 }, { 37, 37 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 196;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze346() throws Exception {
    int[][] marg0 = { { 101, 101, 37 }, { 37, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze347() throws Exception {
    int[][] marg0 = { { 101, 101, 37, 37, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze348() throws Exception {
    int[][] marg0 = { { 101, 101, 37, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze349() throws Exception {
    int[][] marg0 = { { 101, 101, 37, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze350() throws Exception {
    int[][] marg0 = { { 101, 101, 37, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze351() throws Exception {
    int[][] marg0 = { { 101, 101, 0, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze352() throws Exception {
    int[][] marg0 = { { 101, 101, 101, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze353() throws Exception {
    int[][] marg0 = { { 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze354() throws Exception {
    int[][] marg0 = { { 37 }, { 101 }, { -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze355() throws Exception {
    int[][] marg0 = { { 37, 37, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze356() throws Exception {
    int[][] marg0 = { { 37, 0 }, { 101, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 196;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze357() throws Exception {
    int[][] marg0 = { { 37, 0 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 195;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze358() throws Exception {
    int[][] marg0 = { { 37, 0, 0, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze359() throws Exception {
    int[][] marg0 = { { 37, 0, -2147483547 }, { -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze360() throws Exception {
    int[][] marg0 = { { 37, 0, -2147483547, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -31;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze361() throws Exception {
    int[][] marg0 = { { 37, 0, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze362() throws Exception {
    int[][] marg0 = { { 37, 0, -2147483547, 101, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze363() throws Exception {
    int[][] marg0 = { { 37, 0, 101 }, { -2147483547, 101, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze364() throws Exception {
    int[][] marg0 = { { 37, 0, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze365() throws Exception {
    int[][] marg0 = { { 37, 0, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze366() throws Exception {
    int[][] marg0 = { { 37, 0, 101, 101, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze367() throws Exception {
    int[][] marg0 = { { 37, -2147483547, -2147483547, 0, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze368() throws Exception {
    int[][] marg0 = { { 37, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze369() throws Exception {
    int[][] marg0 = { { 37, -2147483547, -2147483547, 101, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 35;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze370() throws Exception {
    int[][] marg0 = { { 37, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze371() throws Exception {
    int[][] marg0 = { { 37, 101 }, { 0, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 196;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze372() throws Exception {
    int[][] marg0 = { { 37, 101 }, { 0, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 195;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze373() throws Exception {
    int[][] marg0 = { { 37, 101 }, { 101, 1 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 195;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze374() throws Exception {
    int[][] marg0 = { { 37, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 197;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze375() throws Exception {
    int[][] marg0 = { { 37, 101, 37, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze376() throws Exception {
    int[][] marg0 = { { 37, 101, 0 }, { -2147483547, 0, 0 }, { 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze377() throws Exception {
    int[][] marg0 = { { 37, 101, 0 }, { 101, 101, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze378() throws Exception {
    int[][] marg0 = { { 37, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze379() throws Exception {
    int[][] marg0 = { { 37, 101, 0, 101, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze380() throws Exception {
    int[][] marg0 = { { 37, 101, -2147483547 }, { -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze381() throws Exception {
    int[][] marg0 = { { 37, 101, -2147483547, 0, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze382() throws Exception {
    int[][] marg0 = { { 37, 101, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 35;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze383() throws Exception {
    int[][] marg0 = { { 37, 101, -2147483547, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze384() throws Exception {
    int[][] marg0 = { { 37, 101, 101 }, { 0, 101, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze385() throws Exception {
    int[][] marg0 = { { 37, 101, 101 }, { -2147483547, 101, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze386() throws Exception {
    int[][] marg0 = { { 37, 101, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze387() throws Exception {
    int[][] marg0 = { { 37, 101, 101, 37, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze388() throws Exception {
    int[][] marg0 = { { 37, 101, 101, 0, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze389() throws Exception {
    int[][] marg0 = { { 37, 101, 101, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze390() throws Exception {
    int[][] marg0 = { { 37, 101, 101, 101 }, { 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze391() throws Exception {
    int[][] marg0 = { { 37, 101, 101, 101, 37, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze392() throws Exception {
    int[][] marg0 = { { 0 }, { 0 }, { -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze393() throws Exception {
    int[][] marg0 = { { 0 }, { 0 }, { 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze394() throws Exception {
    int[][] marg0 = { { 0 }, { -2147483547 }, { 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze395() throws Exception {
    int[][] marg0 = { { 0 }, { 101 }, { 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze396() throws Exception {
    int[][] marg0 = { { 0 }, { 101 }, { 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze397() throws Exception {
    int[][] marg0 = { { 0, 37 }, { 101, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 196;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze398() throws Exception {
    int[][] marg0 = { { 0, 37 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 195;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze399() throws Exception {
    int[][] marg0 = { { 0, 37, 0, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze400() throws Exception {
    int[][] marg0 = { { 0, 37, -2147483547 }, { -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze401() throws Exception {
    int[][] marg0 = { { 0, 37, -2147483547, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -31;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze402() throws Exception {
    int[][] marg0 = { { 0, 37, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze403() throws Exception {
    int[][] marg0 = { { 0, 37, -2147483547, 101, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze404() throws Exception {
    int[][] marg0 = { { 0, 37, 101 }, { -2147483547, 101, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze405() throws Exception {
    int[][] marg0 = { { 0, 37, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze406() throws Exception {
    int[][] marg0 = { { 0, 37, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze407() throws Exception {
    int[][] marg0 = { { 0, 37, 101, 101, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze408() throws Exception {
    int[][] marg0 = { { 0, 0 }, { 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze409() throws Exception {
    int[][] marg0 = { { 0, 0 }, { 101, 37 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -98;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze410() throws Exception {
    int[][] marg0 = { { 0, 0, 37, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze411() throws Exception {
    int[][] marg0 = { { 0, 0, 0 }, { 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze412() throws Exception {
    int[][] marg0 = { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -35;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze413() throws Exception {
    int[][] marg0 = { { 0, 0, 0, -2147483547, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze414() throws Exception {
    int[][] marg0 = { { 0, 0, 0, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze415() throws Exception {
    int[][] marg0 = { { 0, 0, -2147483547, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -31;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze416() throws Exception {
    int[][] marg0 = { { 0, 0, 101 }, { 37, 0, 0 }, { 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze417() throws Exception {
    int[][] marg0 = { { 0, 0, 101, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze418() throws Exception {
    int[][] marg0 = { { 0, 0, 101, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze419() throws Exception {
    int[][] marg0 = { { 0, 0, 101, -2147483547, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze420() throws Exception {
    int[][] marg0 = { { 0, 0, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze421() throws Exception {
    int[][] marg0 = { { 0, -2147483547 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze422() throws Exception {
    int[][] marg0 = { { 0, -2147483547, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze423() throws Exception {
    int[][] marg0 = { { 0, -2147483547, 0, -2147483547, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze424() throws Exception {
    int[][] marg0 = { { 0, -2147483547, 0, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze425() throws Exception {
    int[][] marg0 = { { 0, -2147483547, -2147483547 }, { -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze426() throws Exception {
    int[][] marg0 = { { 0, -2147483547, -2147483547, 37, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze427() throws Exception {
    int[][] marg0 = { { 0, -2147483547, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze428() throws Exception {
    int[][] marg0 = { { 0, -2147483547, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze429() throws Exception {
    int[][] marg0 = { { 0, -2147483547, 101, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze430() throws Exception {
    int[][] marg0 = { { 0, -2147483547, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze431() throws Exception {
    int[][] marg0 = { { 0, 101 }, { 37, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 196;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze432() throws Exception {
    int[][] marg0 = { { 0, 165 }, { 37, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 195;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze433() throws Exception {
    int[][] marg0 = { { 0, 101 }, { 0, 37 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -98;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze434() throws Exception {
    int[][] marg0 = { { 0, 101 }, { -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze435() throws Exception {
    int[][] marg0 = { { 0, 165 }, { 101, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 }, { 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze436() throws Exception {
    int[][] marg0 = { { 0, 101, 37 }, { -2147483547, 37, 37 }, { 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze437() throws Exception {
    int[][] marg0 = { { 0, 101, 37 }, { 101, 101, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze438() throws Exception {
    int[][] marg0 = { { 0, 101, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze439() throws Exception {
    int[][] marg0 = { { 0, 101, 37, 101, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze440() throws Exception {
    int[][] marg0 = { { 0, 101, 0 }, { 37, 0, 0 }, { 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze441() throws Exception {
    int[][] marg0 = { { 0, 101, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze442() throws Exception {
    int[][] marg0 = { { 0, 101, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze443() throws Exception {
    int[][] marg0 = { { 0, 101, 0, -2147483547, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze444() throws Exception {
    int[][] marg0 = { { 0, 101, 0, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze445() throws Exception {
    int[][] marg0 = { { 0, 101, -2147483547, 37, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze446() throws Exception {
    int[][] marg0 = { { 0, 101, 101 }, { 37, 101, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze447() throws Exception {
    int[][] marg0 = { { 0, 101, 101, 37, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze448() throws Exception {
    int[][] marg0 = { { 0, 101, 101, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze449() throws Exception {
    int[][] marg0 = { { 0, 101, 101, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze450() throws Exception {
    int[][] marg0 = { { 0, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze451() throws Exception {
    int[][] marg0 = { { -2147483547 }, { 37 }, { -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze452() throws Exception {
    int[][] marg0 = { { -2147483547 }, { 37 }, { 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze453() throws Exception {
    int[][] marg0 = { { -2147483547 }, { 0 }, { 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze454() throws Exception {
    int[][] marg0 = { { -2147483547 }, { -2147483547 }, { -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze455() throws Exception {
    int[][] marg0 = { { -2147483547 }, { 101 }, { 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze456() throws Exception {
    int[][] marg0 = { { -2147483547, 37 }, { 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze457() throws Exception {
    int[][] marg0 = { { -2147483547, 37 }, { 101, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 199;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze458() throws Exception {
    int[][] marg0 = { { -2147483547, 37, 0 }, { 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze459() throws Exception {
    int[][] marg0 = { { -2147483547, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -31;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze460() throws Exception {
    int[][] marg0 = { { -2147483547, 37, 0, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze461() throws Exception {
    int[][] marg0 = { { -2147483547, 37, 0, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -29;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze462() throws Exception {
    int[][] marg0 = { { -2147483547, 37, -2147483547 }, { -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze463() throws Exception {
    int[][] marg0 = { { -2147483547, 37, -2147483547, 37, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 36;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze464() throws Exception {
    int[][] marg0 = { { -2147483547, 37, 101 }, { -2147483547, -2147483547, -2147483547 }, { -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze465() throws Exception {
    int[][] marg0 = { { -2147483547, 37, 101, 0, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze466() throws Exception {
    int[][] marg0 = { { -2147483547, 37, 101, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 35;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze467() throws Exception {
    int[][] marg0 = { { -2147483547, 37, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze468() throws Exception {
    int[][] marg0 = { { -2147483547, 0 }, { 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze469() throws Exception {
    int[][] marg0 = { { -2147483547, 0 }, { -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze470() throws Exception {
    int[][] marg0 = { { -2147483547, 0, 37 }, { 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze471() throws Exception {
    int[][] marg0 = { { -2147483547, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -31;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze472() throws Exception {
    int[][] marg0 = { { -2147483547, 0, 37, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze473() throws Exception {
    int[][] marg0 = { { -2147483547, 0, 37, 101, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze474() throws Exception {
    int[][] marg0 = { { -2147483547, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -31;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze475() throws Exception {
    int[][] marg0 = { { -2147483547, 0, 101, 37, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze476() throws Exception {
    int[][] marg0 = { { -2147483547, -2147483547 }, { 0, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze477() throws Exception {
    int[][] marg0 = { { -2147483547, -2147483547 }, { -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze478() throws Exception {
    int[][] marg0 = { { -2147483547, -2147483547, 37, 0, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze479() throws Exception {
    int[][] marg0 = { { -2147483547, -2147483547, 37, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze480() throws Exception {
    int[][] marg0 = { { -2147483547, -2147483547, 37, 101, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 35;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze481() throws Exception {
    int[][] marg0 = { { -2147483547, -2147483547, 0 }, { 0, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze482() throws Exception {
    int[][] marg0 = { { -2147483547, -2147483547, 0, 37, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze483() throws Exception {
    int[][] marg0 = { { -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze484() throws Exception {
    int[][] marg0 = { { -2147483547, -2147483547, 101, 37, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 35;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze485() throws Exception {
    int[][] marg0 = { { -2147483547, 101 }, { 37, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 199;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze486() throws Exception {
    int[][] marg0 = { { -2147483547, 101, 37 }, { -2147483547, -2147483547, -2147483547 }, { -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze487() throws Exception {
    int[][] marg0 = { { -2147483547, 101, 37, 0, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze488() throws Exception {
    int[][] marg0 = { { -2147483547, 101, 37, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 35;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze489() throws Exception {
    int[][] marg0 = { { -2147483547, 101, 37, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze490() throws Exception {
    int[][] marg0 = { { -2147483547, 101, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -29;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze491() throws Exception {
    int[][] marg0 = { { -2147483547, 101, 101, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze492() throws Exception {
    int[][] marg0 = { { 101 }, { 37 }, { -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze493() throws Exception {
    int[][] marg0 = { { 101 }, { 0 }, { 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze494() throws Exception {
    int[][] marg0 = { { 101 }, { 0 }, { 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze495() throws Exception {
    int[][] marg0 = { { 101 }, { -2147483547 }, { -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze496() throws Exception {
    int[][] marg0 = { { 101 }, { -2147483547 }, { 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze497() throws Exception {
    int[][] marg0 = { { 101 }, { 101 }, { 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze498() throws Exception {
    int[][] marg0 = { { 101 }, { 101 }, { 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze499() throws Exception {
    int[][] marg0 = { { 101, 37 }, { 0, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 196;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze500() throws Exception {
    int[][] marg0 = { { 101, 37 }, { 0, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 195;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze501() throws Exception {
    int[][] marg0 = { { 101, 37 }, { 101, 1 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 195;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze502() throws Exception {
    int[][] marg0 = { { 101, 37 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 197;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze503() throws Exception {
    int[][] marg0 = { { 101, 37, 37, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze504() throws Exception {
    int[][] marg0 = { { 101, 37, 0 }, { -2147483547, 0, 0 }, { 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze505() throws Exception {
    int[][] marg0 = { { 101, 37, 0 }, { 101, 101, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze506() throws Exception {
    int[][] marg0 = { { 101, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze507() throws Exception {
    int[][] marg0 = { { 101, 37, 0, 101, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze508() throws Exception {
    int[][] marg0 = { { 101, 37, -2147483547 }, { -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze509() throws Exception {
    int[][] marg0 = { { 101, 37, -2147483547, 0, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze510() throws Exception {
    int[][] marg0 = { { 101, 37, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 35;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze511() throws Exception {
    int[][] marg0 = { { 101, 37, -2147483547, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze512() throws Exception {
    int[][] marg0 = { { 101, 37, 101 }, { 0, 101, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze513() throws Exception {
    int[][] marg0 = { { 101, 37, 101 }, { -2147483547, 101, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze514() throws Exception {
    int[][] marg0 = { { 101, 37, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze515() throws Exception {
    int[][] marg0 = { { 101, 37, 101, 37, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze516() throws Exception {
    int[][] marg0 = { { 101, 37, 101, 0, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze517() throws Exception {
    int[][] marg0 = { { 101, 37, 101, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze518() throws Exception {
    int[][] marg0 = { { 101, 37, 101, 101 }, { 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze519() throws Exception {
    int[][] marg0 = { { 101, 37, 101, 101, 37, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze520() throws Exception {
    int[][] marg0 = { { 101, 0 }, { 37, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 196;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze521() throws Exception {
    int[][] marg0 = { { 101, 0 }, { 37, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 195;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze522() throws Exception {
    int[][] marg0 = { { 101, 0 }, { 0, 37 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -98;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze523() throws Exception {
    int[][] marg0 = { { 101, 0 }, { -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze524() throws Exception {
    int[][] marg0 = { { 101, 0 }, { 101, 37 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 195;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze525() throws Exception {
    int[][] marg0 = { { 101, 0, 37 }, { -2147483547, 37, 37 }, { 37, 37, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze526() throws Exception {
    int[][] marg0 = { { 101, 0, 37 }, { 101, 101, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze527() throws Exception {
    int[][] marg0 = { { 101, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze528() throws Exception {
    int[][] marg0 = { { 101, 0, 37, 101, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze529() throws Exception {
    int[][] marg0 = { { 101, 0, 0 }, { 37, 0, 0 }, { 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze530() throws Exception {
    int[][] marg0 = { { 101, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze531() throws Exception {
    int[][] marg0 = { { 101, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze532() throws Exception {
    int[][] marg0 = { { 101, 0, 0, -2147483547, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze533() throws Exception {
    int[][] marg0 = { { 101, 0, 0, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze534() throws Exception {
    int[][] marg0 = { { 101, 0, -2147483547, 37, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze535() throws Exception {
    int[][] marg0 = { { 101, 0, 101 }, { 37, 101, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze536() throws Exception {
    int[][] marg0 = { { 101, 0, 101, 37, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze537() throws Exception {
    int[][] marg0 = { { 101, 0, 101, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze538() throws Exception {
    int[][] marg0 = { { 101, 0, 101, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze539() throws Exception {
    int[][] marg0 = { { 101, 0, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze540() throws Exception {
    int[][] marg0 = { { 101, -2147483547 }, { 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze541() throws Exception {
    int[][] marg0 = { { 101, -2147483547 }, { 101, 37 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 196;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze542() throws Exception {
    int[][] marg0 = { { 101, -2147483547, 37, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze543() throws Exception {
    int[][] marg0 = { { 101, -2147483547, 0 }, { 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze544() throws Exception {
    int[][] marg0 = { { 101, -2147483547, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze545() throws Exception {
    int[][] marg0 = { { 101, -2147483547, 0, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze546() throws Exception {
    int[][] marg0 = { { 101, -2147483547, 0, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze547() throws Exception {
    int[][] marg0 = { { 101, -2147483547, -2147483547, 37, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 35;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze548() throws Exception {
    int[][] marg0 = { { 101, -2147483547, 101 }, { 37, 101, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze549() throws Exception {
    int[][] marg0 = { { 101, -2147483547, 101, 37, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze550() throws Exception {
    int[][] marg0 = { { 101, -2147483547, 101, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze551() throws Exception {
    int[][] marg0 = { { 101, -2147483547, 101, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze552() throws Exception {
    int[][] marg0 = { { 101, -2147483547, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze553() throws Exception {
    int[][] marg0 = { { 101, 101 }, { 37, 1 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 195;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze554() throws Exception {
    int[][] marg0 = { { 101, 101 }, { 37, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 197;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze555() throws Exception {
    int[][] marg0 = { { 101, 101 }, { 0, 37 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 195;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze556() throws Exception {
    int[][] marg0 = { { 101, 101 }, { -2147483547, 37 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 196;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze557() throws Exception {
    int[][] marg0 = { { 101, 101 }, { 101, 37 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 197;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze558() throws Exception {
    int[][] marg0 = { { 101, 101, 37 }, { 0, 101, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze559() throws Exception {
    int[][] marg0 = { { 101, 101, 37 }, { -2147483547, 101, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze560() throws Exception {
    int[][] marg0 = { { 101, 101, 37 }, { 101, 101, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze561() throws Exception {
    int[][] marg0 = { { 101, 101, 37, 37, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze562() throws Exception {
    int[][] marg0 = { { 101, 101, 37, 0, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze563() throws Exception {
    int[][] marg0 = { { 101, 101, 37, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze564() throws Exception {
    int[][] marg0 = { { 101, 101, 37, 101 }, { 37, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze565() throws Exception {
    int[][] marg0 = { { 101, 101, 37, 101, 37, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze566() throws Exception {
    int[][] marg0 = { { 101, 101, 0 }, { 37, 101, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze567() throws Exception {
    int[][] marg0 = { { 101, 101, 0, 37, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze568() throws Exception {
    int[][] marg0 = { { 101, 101, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze569() throws Exception {
    int[][] marg0 = { { 101, 101, 0, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze570() throws Exception {
    int[][] marg0 = { { 101, 101, 0, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze571() throws Exception {
    int[][] marg0 = { { 101, 101, -2147483547, 37 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze572() throws Exception {
    int[][] marg0 = { { 101, 101, 101 }, { 37, 101, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze573() throws Exception {
    int[][] marg0 = { { 101, 101, 101, 37 }, { 101, 37, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze574() throws Exception {
    int[][] marg0 = { { 101, 101, 101, 37, 37, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze575() throws Exception {
    int[][] marg0 = { { 101, 101, 101, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze576() throws Exception {
    int[][] marg0 = { { 101, 101, 101, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze577() throws Exception {
    int[][] marg0 = { { 37, 0, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze578() throws Exception {
    int[][] marg0 = { { 37, 101 }, { 101, -2147483547 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 198;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze579() throws Exception {
    int[][] marg0 = { { 37, 101, 0, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze580() throws Exception {
    int[][] marg0 = { { 37, 101, -2147483547 }, { 101, 101, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze581() throws Exception {
    int[][] marg0 = { { 37, 101, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 35;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze582() throws Exception {
    int[][] marg0 = { { 37, 101, 101, 0, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze583() throws Exception {
    int[][] marg0 = { { 37, 101, 101, 101, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 35;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze584() throws Exception {
    int[][] marg0 = { { 37, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze585() throws Exception {
    int[][] marg0 = { { 0 }, { 101 }, { -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze586() throws Exception {
    int[][] marg0 = { { 0, 37, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze587() throws Exception {
    int[][] marg0 = { { 0, 0 }, { 101, -2147483547 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -96;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze588() throws Exception {
    int[][] marg0 = { { 0, 0 }, { 101, 101 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -97;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze589() throws Exception {
    int[][] marg0 = { { 0, 0, 0, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze590() throws Exception {
    int[][] marg0 = { { 0, 0, -2147483547 }, { -2147483547, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze591() throws Exception {
    int[][] marg0 = { { 0, 0, -2147483547, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze592() throws Exception {
    int[][] marg0 = { { 0, 0, -2147483547, -2147483547, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -31;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze593() throws Exception {
    int[][] marg0 = { { 0, 0, -2147483547, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -30;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze594() throws Exception {
    int[][] marg0 = { { 0, 0, 101 }, { -2147483547, 0, 0 }, { 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze595() throws Exception {
    int[][] marg0 = { { 0, 0, 101 }, { 101, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze596() throws Exception {
    int[][] marg0 = { { 0, 0, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze597() throws Exception {
    int[][] marg0 = { { 0, 0, 101, 101, -2147483547, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -28;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze598() throws Exception {
    int[][] marg0 = { { 0, -2147483547, -2147483547, 0, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze599() throws Exception {
    int[][] marg0 = { { 0, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze600() throws Exception {
    int[][] marg0 = { { 0, -2147483547, -2147483543, 101, -2147483543, -2147483543, -2147483543, -2147483543, -2147483543, -2147483543, -2147483543, -2147483543, -2147483543, -2147483543, -2147483543, -2147483543, -2147483543, -2147483543, -2147483543, -2147483543, -2147483543, -2147483543, -2147483543, -2147483543, -2147483543, -2147483543, -2147483543, -2147483543, -2147483543, -2147483543, -2147483543, -2147483543, -2147483543, -2147483543, -2147483543 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze601() throws Exception {
    int[][] marg0 = { { 0, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze602() throws Exception {
    int[][] marg0 = { { 0, 101 }, { 0, -2147483547 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -96;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze603() throws Exception {
    int[][] marg0 = { { 0, 101 }, { 0, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 194;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze604() throws Exception {
    int[][] marg0 = { { 0, 101 }, { 101, 1 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 194;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze605() throws Exception {
    int[][] marg0 = { { 0, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 196;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze606() throws Exception {
    int[][] marg0 = { { 0, 101, 37, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze607() throws Exception {
    int[][] marg0 = { { 0, 101, 0 }, { -2147483547, 0, 0 }, { 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze608() throws Exception {
    int[][] marg0 = { { 0, 101, 0 }, { 101, 0, 0 }, { 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze609() throws Exception {
    int[][] marg0 = { { 0, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze610() throws Exception {
    int[][] marg0 = { { 0, 165, 0, 101, -2147483547, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -28;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze611() throws Exception {
    int[][] marg0 = { { 0, 101, -2147483483 }, { -2147483547, -2147483483, -2147483483 }, { -2147483483, -2147483483, -2147483483 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze612() throws Exception {
    int[][] marg0 = { { 0, 101, -2147483547, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -30;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze613() throws Exception {
    int[][] marg0 = { { 0, 101, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze614() throws Exception {
    int[][] marg0 = { { 0, 101, -2147483483, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze615() throws Exception {
    int[][] marg0 = { { 0, 101, 101 }, { 0, 101, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze616() throws Exception {
    int[][] marg0 = { { 0, 101, 165 }, { -2147483547, 165, 165 }, { 165, 165, 165 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze617() throws Exception {
    int[][] marg0 = { { 0, 101, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze618() throws Exception {
    int[][] marg0 = { { 0, 101, 101, 37, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze619() throws Exception {
    int[][] marg0 = { { 0, 165, 101, 0, -2147483547, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -28;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze620() throws Exception {
    int[][] marg0 = { { 0, 101, 101, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze621() throws Exception {
    int[][] marg0 = { { 0, 101, 101, 101 }, { 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze622() throws Exception {
    int[][] marg0 = { { 0, 101, 101, 101, 37, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze623() throws Exception {
    int[][] marg0 = { { -2147483547 }, { 0 }, { -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze624() throws Exception {
    int[][] marg0 = { { -2147483547 }, { 0 }, { 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze625() throws Exception {
    int[][] marg0 = { { -2147483547 }, { 101 }, { 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze626() throws Exception {
    int[][] marg0 = { { -2147483547 }, { 101 }, { 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze627() throws Exception {
    int[][] marg0 = { { -2147483547, 37 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 198;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze628() throws Exception {
    int[][] marg0 = { { -2147483547, 37, -2147483547, 0, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 35;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze629() throws Exception {
    int[][] marg0 = { { -2147483547, 37, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 36;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze630() throws Exception {
    int[][] marg0 = { { -2147483547, 37, -2147483547, 101, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 37;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze631() throws Exception {
    int[][] marg0 = { { -2147483547, 37, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze632() throws Exception {
    int[][] marg0 = { { -2147483547, 37, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 35;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze633() throws Exception {
    int[][] marg0 = { { -2147483547, 0 }, { 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze634() throws Exception {
    int[][] marg0 = { { -2147483547, 0 }, { 101, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 198;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze635() throws Exception {
    int[][] marg0 = { { -2147483547, 0, 0 }, { 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze636() throws Exception {
    int[][] marg0 = { { -2147483547, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze637() throws Exception {
    int[][] marg0 = { { -2147483547, 0, 0, -2147483547, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -31;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze638() throws Exception {
    int[][] marg0 = { { -2147483547, 0, 0, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -30;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze639() throws Exception {
    int[][] marg0 = { { -2147483547, 0, -2147483547 }, { -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze640() throws Exception {
    int[][] marg0 = { { -2147483547, 0, -2147483547, 37, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 35;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze641() throws Exception {
    int[][] marg0 = { { -2147483547, 0, 133 }, { -2147483547, -2147483547, -2147483547 }, { -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze642() throws Exception {
    int[][] marg0 = { { -2147483547, 0, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -30;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze643() throws Exception {
    int[][] marg0 = { { -2147483547, 0, 101, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze644() throws Exception {
    int[][] marg0 = { { -2147483547, 0, 133, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze645() throws Exception {
    int[][] marg0 = { { -2147483547, -2147483547 }, { 101, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze646() throws Exception {
    int[][] marg0 = { { -2147483547, -2147483547, 0, 0, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze647() throws Exception {
    int[][] marg0 = { { -2147483547, -2147483547, 0, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze648() throws Exception {
    int[][] marg0 = { { -2147483547, -2147483547, 0, 101, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze649() throws Exception {
    int[][] marg0 = { { -2147483547, -2147483547, -2147483547 }, { -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze650() throws Exception {
    int[][] marg0 = { { -2147483547, -2147483547, -2147483547, 37, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 36;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze651() throws Exception {
    int[][] marg0 = { { -2147483547, -2147483547, 101 }, { 101, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze652() throws Exception {
    int[][] marg0 = { { -2147483547, -2147483547, 101, 0, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze653() throws Exception {
    int[][] marg0 = { { -2147483547, -2147483547, 101, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 35;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze654() throws Exception {
    int[][] marg0 = { { -2147483547, -2147483547, 101, 101, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 36;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze655() throws Exception {
    int[][] marg0 = { { -2147483547, 101 }, { 37, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 198;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze656() throws Exception {
    int[][] marg0 = { { -2147483547, 101 }, { 0, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 198;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze657() throws Exception {
    int[][] marg0 = { { -2147483547, 101 }, { -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze658() throws Exception {
    int[][] marg0 = { { -2147483547, 101 }, { 101, 37 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 198;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze659() throws Exception {
    int[][] marg0 = { { -2147483547, 101, 37 }, { 101, 101, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze660() throws Exception {
    int[][] marg0 = { { -2147483547, 101, 37, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 35;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze661() throws Exception {
    int[][] marg0 = { { -2147483547, 101, 0 }, { -2147483547, -2147483547, -2147483547 }, { -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze662() throws Exception {
    int[][] marg0 = { { -2147483547, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -30;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze663() throws Exception {
    int[][] marg0 = { { -2147483547, 101, 0, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze664() throws Exception {
    int[][] marg0 = { { -2147483547, 101, 0, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze665() throws Exception {
    int[][] marg0 = { { -2147483547, 101, -2147483547, 37, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 37;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze666() throws Exception {
    int[][] marg0 = { { -2147483547, 101, 101 }, { 37, 101, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze667() throws Exception {
    int[][] marg0 = { { -2147483547, 101, 101, 37, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 35;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze668() throws Exception {
    int[][] marg0 = { { -2147483547, 101, 101, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze669() throws Exception {
    int[][] marg0 = { { -2147483547, 101, 101, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 35;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze670() throws Exception {
    int[][] marg0 = { { -2147483547, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze671() throws Exception {
    int[][] marg0 = { { 101 }, { 0 }, { -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze672() throws Exception {
    int[][] marg0 = { { 101 }, { 101 }, { -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze673() throws Exception {
    int[][] marg0 = { { 101, 37 }, { 101, -2147483547 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 198;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze674() throws Exception {
    int[][] marg0 = { { 101, 37, 0, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze675() throws Exception {
    int[][] marg0 = { { 101, 37, -2147483547 }, { 101, 101, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze676() throws Exception {
    int[][] marg0 = { { 101, 37, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 35;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze677() throws Exception {
    int[][] marg0 = { { 101, 37, 101, 0, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze678() throws Exception {
    int[][] marg0 = { { 101, 37, 101, 101, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 35;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze679() throws Exception {
    int[][] marg0 = { { 101, 37, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze680() throws Exception {
    int[][] marg0 = { { 101, 0 }, { 0, -2147483547 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -96;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze681() throws Exception {
    int[][] marg0 = { { 101, 0 }, { 0, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 194;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze682() throws Exception {
    int[][] marg0 = { { 101, 0 }, { 101, 1 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 194;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze683() throws Exception {
    int[][] marg0 = { { 101, 0 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 196;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze684() throws Exception {
    int[][] marg0 = { { 101, 0, 37, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze685() throws Exception {
    int[][] marg0 = { { 101, 0, 0 }, { -2147483547, 0, 0 }, { 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze686() throws Exception {
    int[][] marg0 = { { 101, 0, 0 }, { 101, 0, 0 }, { 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze687() throws Exception {
    int[][] marg0 = { { 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze688() throws Exception {
    int[][] marg0 = { { 101, 0, 0, 101, -2147483547, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -28;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze689() throws Exception {
    int[][] marg0 = { { 101, 0, -2147483483 }, { -2147483547, -2147483483, -2147483483 }, { -2147483483, -2147483483, -2147483483 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze690() throws Exception {
    int[][] marg0 = { { 101, 0, -2147483547, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -30;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze691() throws Exception {
    int[][] marg0 = { { 101, 0, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze692() throws Exception {
    int[][] marg0 = { { 101, 0, -2147483483, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze693() throws Exception {
    int[][] marg0 = { { 101, 0, 101 }, { 0, 101, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze694() throws Exception {
    int[][] marg0 = { { 101, 0, 165 }, { -2147483547, 165, 165 }, { 165, 165, 165 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze695() throws Exception {
    int[][] marg0 = { { 101, 0, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze696() throws Exception {
    int[][] marg0 = { { 101, 0, 101, 37, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze697() throws Exception {
    int[][] marg0 = { { 101, 0, 101, 0, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze698() throws Exception {
    int[][] marg0 = { { 101, 0, 101, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze699() throws Exception {
    int[][] marg0 = { { 101, 0, 101, 101 }, { 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze700() throws Exception {
    int[][] marg0 = { { 101, 0, 101, 101, 37, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze701() throws Exception {
    int[][] marg0 = { { 101, -2147483547 }, { 101, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 198;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze702() throws Exception {
    int[][] marg0 = { { 101, -2147483547 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 197;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze703() throws Exception {
    int[][] marg0 = { { 101, -2147483547, 0, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze704() throws Exception {
    int[][] marg0 = { { 101, -2147483547, -2147483547 }, { -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze705() throws Exception {
    int[][] marg0 = { { 101, -2147483547, -2147483547, 0, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze706() throws Exception {
    int[][] marg0 = { { 101, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 35;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze707() throws Exception {
    int[][] marg0 = { { 101, -2147483547, -2147483547, 101, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 36;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze708() throws Exception {
    int[][] marg0 = { { 101, -2147483547, 101 }, { -2147483547, 101, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze709() throws Exception {
    int[][] marg0 = { { 101, -2147483547, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze710() throws Exception {
    int[][] marg0 = { { 101, -2147483547, 101, 0, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze711() throws Exception {
    int[][] marg0 = { { 101, -2147483547, 101, 101, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 35;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze712() throws Exception {
    int[][] marg0 = { { 101, 101 }, { 37, -2147483547 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 198;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze713() throws Exception {
    int[][] marg0 = { { 101, 101 }, { 0, 1 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 194;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze714() throws Exception {
    int[][] marg0 = { { 101, 101 }, { 0, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 196;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze715() throws Exception {
    int[][] marg0 = { { 101, 101 }, { -2147483547, -2147483547 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 198;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze716() throws Exception {
    int[][] marg0 = { { 101, 101 }, { -2147483547, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 197;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze717() throws Exception {
    int[][] marg0 = { { 101, 101 }, { 101, 1 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 196;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze718() throws Exception {
    int[][] marg0 = { { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 198;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze719() throws Exception {
    int[][] marg0 = { { 101, 101, 37, 0, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze720() throws Exception {
    int[][] marg0 = { { 101, 101, 37, 101, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 35;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze721() throws Exception {
    int[][] marg0 = { { 101, 101, 37, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze722() throws Exception {
    int[][] marg0 = { { 101, 101, 0 }, { 0, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze723() throws Exception {
    int[][] marg0 = { { 101, 101, 0 }, { -2147483547, 101, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze724() throws Exception {
    int[][] marg0 = { { 101, 101, 0 }, { 101, 101, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze725() throws Exception {
    int[][] marg0 = { { 101, 101, 0, 37, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze726() throws Exception {
    int[][] marg0 = { { 101, 101, 0, 0, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze727() throws Exception {
    int[][] marg0 = { { 101, 101, 0, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze728() throws Exception {
    int[][] marg0 = { { 101, 101, 0, 101 }, { 0, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze729() throws Exception {
    int[][] marg0 = { { 101, 101, 0, 101, 37, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze730() throws Exception {
    int[][] marg0 = { { 101, 101, -2147483547 }, { 37, 101, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze731() throws Exception {
    int[][] marg0 = { { 101, 101, -2147483547, 37, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 35;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze732() throws Exception {
    int[][] marg0 = { { 101, 101, -2147483547, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze733() throws Exception {
    int[][] marg0 = { { 101, 101, -2147483547, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 35;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze734() throws Exception {
    int[][] marg0 = { { 101, 101, -2147483547, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze735() throws Exception {
    int[][] marg0 = { { 101, 101, 101 }, { 0, 101, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze736() throws Exception {
    int[][] marg0 = { { 101, 101, 101 }, { -2147483547, 101, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze737() throws Exception {
    int[][] marg0 = { { 101, 101, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze738() throws Exception {
    int[][] marg0 = { { 101, 101, 101, 37, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 35;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze739() throws Exception {
    int[][] marg0 = { { 101, 101, 101, 37, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze740() throws Exception {
    int[][] marg0 = { { 101, 101, 101, 0 }, { 101, 0, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze741() throws Exception {
    int[][] marg0 = { { 101, 101, 101, 0, 37, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 32;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze742() throws Exception {
    int[][] marg0 = { { 101, 101, 133, -2147483547, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 35;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze743() throws Exception {
    int[][] marg0 = { { 101, 101, 101, 101 }, { 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze744() throws Exception {
    int[][] marg0 = { { 101, 101, 101, 101, 37, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze745() throws Exception {
    int[][] marg0 = { { 0, 0, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 31;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze746() throws Exception {
    int[][] marg0 = { { 0, 101 }, { 101, -2147483547 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 197;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze747() throws Exception {
    int[][] marg0 = { { 0, 165, 0, 101, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = -29;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze748() throws Exception {
    int[][] marg0 = { { 0, 101, -2147483483 }, { 101, 101, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze749() throws Exception {
    int[][] marg0 = { { 0, 101, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze750() throws Exception {
    int[][] marg0 = { { 0, 165, 101, 0, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 31;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze751() throws Exception {
    int[][] marg0 = { { 0, 101, 101, 101, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze752() throws Exception {
    int[][] marg0 = { { 0, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze753() throws Exception {
    int[][] marg0 = { { -2147483547 }, { 101 }, { -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze754() throws Exception {
    int[][] marg0 = { { -2147483547, 0 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 197;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze755() throws Exception {
    int[][] marg0 = { { -2147483547, 0, -2147483547, 0, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze756() throws Exception {
    int[][] marg0 = { { -2147483547, 0, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 35;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze757() throws Exception {
    int[][] marg0 = { { -2147483547, 0, -2147483547, 101, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 36;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze758() throws Exception {
    int[][] marg0 = { { -2147483547, 0, 133 }, { 101, 133, 133 }, { 133, 133, 133 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze759() throws Exception {
    int[][] marg0 = { { -2147483547, 0, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze760() throws Exception {
    int[][] marg0 = { { -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 36;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze761() throws Exception {
    int[][] marg0 = { { -2147483547, -2147483547, -2147483547, 101, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 37;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze762() throws Exception {
    int[][] marg0 = { { -2147483547, 101 }, { 0, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 197;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze763() throws Exception {
    int[][] marg0 = { { -2147483547, 101 }, { 101, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 }, { -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 200;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze764() throws Exception {
    int[][] marg0 = { { -2147483547, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 199;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze765() throws Exception {
    int[][] marg0 = { { -2147483547, 101, 0 }, { 101, 101, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze766() throws Exception {
    int[][] marg0 = { { -2147483547, 101, 0, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze767() throws Exception {
    int[][] marg0 = { { -2147483547, 101, -2147483547 }, { -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze768() throws Exception {
    int[][] marg0 = { { -2147483547, 101, -2147483547, 0, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 36;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze769() throws Exception {
    int[][] marg0 = { { -2147483547, 101, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 37;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze770() throws Exception {
    int[][] marg0 = { { -2147483547, 101, -2147483547, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze771() throws Exception {
    int[][] marg0 = { { -2147483547, 101, 101 }, { -2147483547, 101, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze772() throws Exception {
    int[][] marg0 = { { -2147483547, 101, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze773() throws Exception {
    int[][] marg0 = { { -2147483547, 101, 101, 0, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze774() throws Exception {
    int[][] marg0 = { { -2147483547, 101, 101, 101, 37, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 35;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze775() throws Exception {
    int[][] marg0 = { { 101, 0 }, { 101, -2147483547 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 197;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze776() throws Exception {
    int[][] marg0 = { { 101, 0, 0, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 31;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze777() throws Exception {
    int[][] marg0 = { { 101, 0, -2147483483 }, { 101, 101, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze778() throws Exception {
    int[][] marg0 = { { 101, 0, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze779() throws Exception {
    int[][] marg0 = { { 101, 0, 101, 0, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 31;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze780() throws Exception {
    int[][] marg0 = { { 101, 0, 101, 101, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze781() throws Exception {
    int[][] marg0 = { { 101, 0, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze782() throws Exception {
    int[][] marg0 = { { 101, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze783() throws Exception {
    int[][] marg0 = { { 101, 101 }, { 0, -2147483547 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 197;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze784() throws Exception {
    int[][] marg0 = { { 101, 101 }, { 101, -2147483547 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 }, { 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 199;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze785() throws Exception {
    int[][] marg0 = { { 101, 101, 0, 0, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 31;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze786() throws Exception {
    int[][] marg0 = { { 101, 101, 0, 101, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze787() throws Exception {
    int[][] marg0 = { { 101, 101, 0, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze788() throws Exception {
    int[][] marg0 = { { 101, 101, -2147483547 }, { -2147483547, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze789() throws Exception {
    int[][] marg0 = { { 101, 101, -2147483547 }, { 101, 101, 101 }, { 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 10;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze790() throws Exception {
    int[][] marg0 = { { 101, 101, -2147483547, 0, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze791() throws Exception {
    int[][] marg0 = { { 101, 101, -2147483515, 101, 37, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 35;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze792() throws Exception {
    int[][] marg0 = { { 101, 101, 101, 0, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze793() throws Exception {
    int[][] marg0 = { { 101, 101, 101, 0, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze794() throws Exception {
    int[][] marg0 = { { 101, 101, 133, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 34;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze795() throws Exception {
    int[][] marg0 = { { 101, 101, 101, 101, 0, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 33;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze796() throws Exception {
    int[][] marg0 = { { 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 35;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze797() throws Exception {
    int[][] marg0 = { { -2147483547, 101, -2147483547, 101, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547, -2147483547 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 38;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze798() throws Exception {
    int[][] marg0 = { { -2147483547, 101, 101, 101, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 37;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze799() throws Exception {
    int[][] marg0 = { { -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 36;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze800() throws Exception {
    int[][] marg0 = { { 101, 101, -2147483515, 101, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 37;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze801() throws Exception {
    int[][] marg0 = { { 101, 101, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 36;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAnalyze802() throws Exception {
    int[][] marg0 = { { 101, 101, 101, 101, -2147483547, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101 } };
    int retval = MatrixAnalyzer.analyze(marg0);

    int expected = 36;
    Assertions.assertEquals(expected, retval);
  }
}
