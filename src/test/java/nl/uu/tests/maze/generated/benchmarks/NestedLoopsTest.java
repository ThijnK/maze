// Auto-generated by MAZE
package nl.uu.tests.maze.generated.benchmarks;

import java.lang.Exception;
import java.lang.NullPointerException;
import nl.uu.maze.benchmarks.NestedLoops;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class NestedLoopsTest {
  @Test
  public void testComplexNested1() throws Exception {
    int[] marg0 = null;
    Assertions.assertThrows(NullPointerException.class, () -> NestedLoops.complexNested(marg0));
  }

  @Test
  public void testComplexNested2() throws Exception {
    int[] marg0 = {};
    int retval = NestedLoops.complexNested(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested3() throws Exception {
    int[] marg0 = { 74428311, 75672468 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested4() throws Exception {
    int[] marg0 = { 1, 8 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 5000;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested5() throws Exception {
    int[] marg0 = { 16624851, 1078209728 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 4000;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested6() throws Exception {
    int[] marg0 = { 265160220, 265160220 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested7() throws Exception {
    int[] marg0 = { 8, 8 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 5000;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested8() throws Exception {
    int[] marg0 = { 207402472, 207402472 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 4000;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested9() throws Exception {
    int[] marg0 = { 2147483647, 2147483647 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 3000;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested10() throws Exception {
    int[] marg0 = { -1811934747, -738193084 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested11() throws Exception {
    int[] marg0 = { 42, 1073741825 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested12() throws Exception {
    int[] marg0 = { -2147483639, 8 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 5000;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested13() throws Exception {
    int[] marg0 = { -122709824, 35 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 4000;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested14() throws Exception {
    int[] marg0 = { -1701307991, 167778728 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 2000;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested15() throws Exception {
    int[] marg0 = { 42, 613569696 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 4000;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested16() throws Exception {
    int[] marg0 = { -2147468216, 8 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 9000;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested17() throws Exception {
    int[] marg0 = { -850269865, -850269865 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested18() throws Exception {
    int[] marg0 = { -420482365, 1684533440 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 6000;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested19() throws Exception {
    int[] marg0 = { 42, 42 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested20() throws Exception {
    int[] marg0 = { 1249903040, 1249927619 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested21() throws Exception {
    int[] marg0 = { -1818015208, -1818015208 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 4000;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested22() throws Exception {
    int[] marg0 = { 8, 9 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested23() throws Exception {
    int[] marg0 = { 750548288, 1012720869 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 4000;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested24() throws Exception {
    int[] marg0 = { 8, 15432 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 4000;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested25() throws Exception {
    int[] marg0 = { -1073673178, -1054110169 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested26() throws Exception {
    int[] marg0 = { 1, 42 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested27() throws Exception {
    int[] marg0 = { -735776576, -726860093 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 4000;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested28() throws Exception {
    int[] marg0 = { 8, 42 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested29() throws Exception {
    int[] marg0 = { -1533913952, 42 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 4000;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested30() throws Exception {
    int[] marg0 = { 969972996, 1231913923, 1037551342, 1037551342, 1037551342, 1037551342, 1037551342, 1037551342 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested31() throws Exception {
    int[] marg0 = { 11, 42, 1 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested32() throws Exception {
    int[] marg0 = { -515355852, 1665818493, 0 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 2000;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested33() throws Exception {
    int[] marg0 = { -2076946870, 38, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384, 1412570384 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested34() throws Exception {
    int[] marg0 = { 42, 1677721601, -1074151875, -1074151875, -1074151875, -1074151875, -1074151875, -1074151875, -1074151875, -1074151875, -1074151875, -1074151875, -1074151875, -1074151875, -1074151875, -1074151875, -1074151875, -1074151875, -1074151875, -1074151875, -1074151875, -1074151875, -1074151875, -1074151875, -1074151875, -1074151875, -1074151875, -1074151875, -1074151875, -1074151875, -1074151875, -1074151875, -1074151875, -1074151875 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested35() throws Exception {
    int[] marg0 = { 42, 42, 0 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested36() throws Exception {
    int[] marg0 = { 42, 42, 42 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested37() throws Exception {
    int[] marg0 = { 42, 42, -42 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 32000;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested38() throws Exception {
    int[] marg0 = { -42, 42 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested39() throws Exception {
    int[] marg0 = { -42, 42, 42 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested40() throws Exception {
    int[] marg0 = { 40104688, 1073807552, 50462339, 50462339, 50462339, 50462339, 50462339, 50462339, 50462339, 50462339, 50462339, 50462339, 50462339, 50462339, 50462339, 50462339, 50462339, 50462339, 50462339, 50462339, 50462339, 50462339, 50462339, 50462339, 50462339, 50462339, 50462339, 50462339, 50462339, 50462339, 50462339, 50462339 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 120000;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested41() throws Exception {
    int[] marg0 = { 1384181838, 1417674817, 1417674817 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested42() throws Exception {
    int[] marg0 = { 347615301, 475837928, 475837928 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 4000;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested43() throws Exception {
    int[] marg0 = { 0, 2147483647, 2147483647 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 3000;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested44() throws Exception {
    int[] marg0 = { 11, 42, 613569696 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 4000;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested45() throws Exception {
    int[] marg0 = { 11, 42, 42 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested46() throws Exception {
    int[] marg0 = { 11, 42, -42 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 31000;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested47() throws Exception {
    int[] marg0 = { -2147483648, 0, 0 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested48() throws Exception {
    int[] marg0 = { 1, 8, 0 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 5000;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested49() throws Exception {
    int[] marg0 = { 1, 8, 15432 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 14000;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested50() throws Exception {
    int[] marg0 = { 1, 8, 8 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 10000;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested51() throws Exception {
    int[] marg0 = { 8, 9, 0 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested52() throws Exception {
    int[] marg0 = { 8, 9, 9 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testComplexNested53() throws Exception {
    int[] marg0 = { 8, 2147483647, 2147483647 };
    int retval = NestedLoops.complexNested(marg0);

    int expected = 3000;
    Assertions.assertEquals(expected, retval);
  }
}
