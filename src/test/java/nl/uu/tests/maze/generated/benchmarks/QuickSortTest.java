// Auto-generated by MAZE
package nl.uu.tests.maze.generated.benchmarks;

import java.lang.Exception;
import java.lang.NullPointerException;
import nl.uu.maze.benchmarks.QuickSort;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class QuickSortTest {
  @Test
  public void testSort1() throws Exception {
    int[] marg0 = null;
    Assertions.assertThrows(NullPointerException.class, () -> QuickSort.sort(marg0));
  }

  @Test
  public void testSort2() throws Exception {
    int[] marg0 = {};
    int[] retval = QuickSort.sort(marg0);

    int[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort3() throws Exception {
    int[] marg0 = { 0, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort4() throws Exception {
    int[] marg0 = { -2147483647, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort5() throws Exception {
    int[] marg0 = { -2147483647, -1073741824, 1073741825 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -1073741824, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort6() throws Exception {
    int[] marg0 = { -2147483647, 0, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort7() throws Exception {
    int[] marg0 = { -2147483648, 0, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, 0, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort8() throws Exception {
    int[] marg0 = { -2097152000, 1509949441, 1526726656, 1526726657 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2097152000, 1509949441, 1526726656, 1526726657 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort9() throws Exception {
    int[] marg0 = { -2146435072, 1, 1048576, 1048577 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2146435072, 1, 1048576, 1048577 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort10() throws Exception {
    int[] marg0 = { -805306368, 570425344, 1342177281, 1610612736 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -805306368, 570425344, 1342177281, 1610612736 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort11() throws Exception {
    int[] marg0 = { -2147483648, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, 0, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort12() throws Exception {
    int[] marg0 = { -2147483648, -2147483647, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483647, 0, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort13() throws Exception {
    int[] marg0 = { -2147483640, 1, 37, 135, 4 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483640, 1, 4, 37, 135 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort14() throws Exception {
    int[] marg0 = { -2147483632, 1, 25, -2147483509, 8 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483632, -2147483509, 1, 8, 25 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort15() throws Exception {
    int[] marg0 = { -2147483648, 1, 33, 5, 4 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, 1, 4, 5, 33 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort16() throws Exception {
    int[] marg0 = { -2147483648, 1, 9, -2147483643, 4 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483643, 1, 4, 9 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort17() throws Exception {
    int[] marg0 = { -1073741824, 1073741824, 1, 1073741825, 1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741824, 1, 1073741824, 1073741824, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort18() throws Exception {
    int[] marg0 = { -2147483648, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, 0, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort19() throws Exception {
    int[] marg0 = { -2147483648, 1, 1, -2147483647, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483647, 0, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort20() throws Exception {
    int[] marg0 = { -1073741824, 1, 1073741825, 1073741825, 1073741825, 1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741824, 1, 1073741824, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort21() throws Exception {
    int[] marg0 = { -2147483648, 0, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, 0, 0, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort22() throws Exception {
    int[] marg0 = { -402653184, 1073741824, 1610612737, 268435457, 1342177281, 1744830464 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -402653184, 268435457, 1073741824, 1342177281, 1610612737, 1744830464 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort23() throws Exception {
    int[] marg0 = { -2147483648, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, 0, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort24() throws Exception {
    int[] marg0 = { -2013003776, 541065217, 134217729, 1611661313, 1208221697, 1208221697, 536870912 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2013003776, 134217729, 536870912, 541065217, 1208221697, 1208221697, 1611661313 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort25() throws Exception {
    int[] marg0 = { -2147483648, 1, 1, 1, 1, 1, 1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, 1, 1, 1, 1, 1, 1073741824 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort26() throws Exception {
    int[] marg0 = { -2147483648, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, 0, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort27() throws Exception {
    int[] marg0 = { -536870912, 1073741825, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612736 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -536870912, 1073741825, 1610612736, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort28() throws Exception {
    int[] marg0 = { 0, 1, 1, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort29() throws Exception {
    int[] marg0 = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort30() throws Exception {
    int[] marg0 = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort31() throws Exception {
    int[] marg0 = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort32() throws Exception {
    int[] marg0 = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort33() throws Exception {
    int[] marg0 = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort34() throws Exception {
    int[] marg0 = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort35() throws Exception {
    int[] marg0 = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort36() throws Exception {
    int[] marg0 = { -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort37() throws Exception {
    int[] marg0 = { -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort38() throws Exception {
    int[] marg0 = { 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 1, 1073741824, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort39() throws Exception {
    int[] marg0 = { 1, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 1, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort40() throws Exception {
    int[] marg0 = { -2147483648, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -2147483648 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort41() throws Exception {
    int[] marg0 = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort42() throws Exception {
    int[] marg0 = { 536870913, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 536870913, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088640 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 536870913, 536870913, 671088640, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort43() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort44() throws Exception {
    int[] marg0 = { 637534209, 654311424, 654311425, 654311425, 654311425, 654311425, 654311425, 654311425, 654311425, 654311425, 654311425 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 637534209, 654311424, 654311425, 654311425, 654311425, 654311425, 654311425, 654311425, 654311425, 654311425, 654311425 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort45() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort46() throws Exception {
    int[] marg0 = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort47() throws Exception {
    int[] marg0 = { -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort48() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort49() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -2147483648 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, -2147483648, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort50() throws Exception {
    int[] marg0 = { 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort51() throws Exception {
    int[] marg0 = { -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort52() throws Exception {
    int[] marg0 = { -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort53() throws Exception {
    int[] marg0 = { -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort54() throws Exception {
    int[] marg0 = { -805306367, 1073741825, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177280 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -805306367, 1073741825, 1342177280, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort55() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, -1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort56() throws Exception {
    int[] marg0 = { -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort57() throws Exception {
    int[] marg0 = { -612368383, -612368383, 2071986177, 2071986177, 2071986177, 2071986177, 2071986177, 2071986177, 2071986177, 2071986177, 2071986177, -83886079, 2071986177, 2071986177, 2071986177, 2071986177, 2071986177, 2071986177, 2071986177, 2071986177, 2071986177, 2071986177, 2071986177, 2071986177, 2071986177, 2071986177, 2071986177, 2071986177, 2071986177, 2071986177, 2071986177, -75497472 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -612368383, -612368383, -83886079, -75497472, 2071986177, 2071986177, 2071986177, 2071986177, 2071986177, 2071986177, 2071986177, 2071986177, 2071986177, 2071986177, 2071986177, 2071986177, 2071986177, 2071986177, 2071986177, 2071986177, 2071986177, 2071986177, 2071986177, 2071986177, 2071986177, 2071986177, 2071986177, 2071986177, 2071986177, 2071986177, 2071986177, 2071986177 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort58() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort59() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, 1, 1, 1, 1, 1, 1, 1, 1, 1, -2147483648 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, -2147483648, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort60() throws Exception {
    int[] marg0 = { -1375731711, -1375731711, 771751937, 771751937, 771751937, 771751937, 771751937, 771751937, 771751937, 771751937, 771751937, 738197505, 771751937, 771751937, 771751937, 771751937, 771751937, 771751937, 771751937, 771751937, 771751937, 771751937, 771751937, 771751937, 771751937, 771751937, 771751937, 771751937, 771751937, 771751937, 771751937, 771751936 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1375731711, -1375731711, 738197505, 771751936, 771751937, 771751937, 771751937, 771751937, 771751937, 771751937, 771751937, 771751937, 771751937, 771751937, 771751937, 771751937, 771751937, 771751937, 771751937, 771751937, 771751937, 771751937, 771751937, 771751937, 771751937, 771751937, 771751937, 771751937, 771751937, 771751937, 771751937, 771751937 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort61() throws Exception {
    int[] marg0 = { -1073741824, -1073741824, -2147483647, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, -1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -1073741824, -1073741824, -1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort62() throws Exception {
    int[] marg0 = { 1342177281, 1476395008, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 1342177281, 1476395008, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort63() throws Exception {
    int[] marg0 = { 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort64() throws Exception {
    int[] marg0 = { -2147483648, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -2147483648 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort65() throws Exception {
    int[] marg0 = { 0, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort66() throws Exception {
    int[] marg0 = { -1073741824, -2147483647, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, -1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -1073741824, -1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort67() throws Exception {
    int[] marg0 = { -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort68() throws Exception {
    int[] marg0 = { -1073741824, -2147483647, -1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -1073741824, -1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort69() throws Exception {
    int[] marg0 = { -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort70() throws Exception {
    int[] marg0 = { 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort71() throws Exception {
    int[] marg0 = { -1677721599, -738197503, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, -671088639, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, -603979776 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1677721599, -738197503, -671088639, -603979776, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort72() throws Exception {
    int[] marg0 = { -2147483647, -1073741824, -2147483647, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, -1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -1073741824, -1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort73() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, 0, 1, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort74() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, 1, 1, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, -2147483648, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort75() throws Exception {
    int[] marg0 = { 0, -2147483647, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort76() throws Exception {
    int[] marg0 = { -536870911, -268435456, -536870911, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, -268435456 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -536870911, -536870911, -268435456, -268435456, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort77() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort78() throws Exception {
    int[] marg0 = { 1, -1610612735, 1, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 1, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870912 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1610612735, 1, 1, 1, 536870912, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort79() throws Exception {
    int[] marg0 = { -2147483647, 0, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort80() throws Exception {
    int[] marg0 = { -2147483647, 0, 1, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort81() throws Exception {
    int[] marg0 = { 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort82() throws Exception {
    int[] marg0 = { 0, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort83() throws Exception {
    int[] marg0 = { -1610612735, -1610612735, -1342177280, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1610612735, -1610612735, -1342177280, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort84() throws Exception {
    int[] marg0 = { 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort85() throws Exception {
    int[] marg0 = { 687865856, -1459617791, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 671088641, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865856 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1459617791, 671088641, 687865856, 687865856, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort86() throws Exception {
    int[] marg0 = { 1006632961, -67108863, 2013265921, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374784 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -67108863, 1006632961, 2013265921, 2080374784, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785, 2080374785 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort87() throws Exception {
    int[] marg0 = { -1988100095, -1929379839, -1920991232, 226492417, 226492417, 226492417, 226492417, 226492417, 226492417, 226492417 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1988100095, -1929379839, -1920991232, 226492417, 226492417, 226492417, 226492417, 226492417, 226492417, 226492417 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort88() throws Exception {
    int[] marg0 = { 0, 0, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort89() throws Exception {
    int[] marg0 = { -1073741823, -1073741823, 1, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741823, -1073741823, 1, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort90() throws Exception {
    int[] marg0 = { -1610612735, -1610612735, -536870912, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, -1073741823, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, -536870912 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1610612735, -1610612735, -1073741823, -536870912, -536870912, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort91() throws Exception {
    int[] marg0 = { 1073741824, 1, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 1, 1073741824, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort92() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort93() throws Exception {
    int[] marg0 = { 1610612736, 1073741825, 1073741825, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612736 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 1073741825, 1073741825, 1610612736, 1610612736, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort94() throws Exception {
    int[] marg0 = { -2147483647, 0, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort95() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort96() throws Exception {
    int[] marg0 = { 0, -2147483647, -2147483647, 0, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort97() throws Exception {
    int[] marg0 = { -2147483647, 0, -2147483647, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort98() throws Exception {
    int[] marg0 = { 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort99() throws Exception {
    int[] marg0 = { -1509949439, 100663297, -1509949439, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 603979777, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534208 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1509949439, -1509949439, 100663297, 603979777, 637534208, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort100() throws Exception {
    int[] marg0 = { 1073741824, -1073741823, -1073741823, 1, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741823, -1073741823, 1, 1073741824, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort101() throws Exception {
    int[] marg0 = { -2147483647, -1073741824, 1, 1073741825, 1073741825, 1073741825, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -1073741824, 0, 1, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort102() throws Exception {
    int[] marg0 = { -2147483647, -2147483392, -2147483391, 1342179329, 1342179329, 1342177281, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483392, -2147483391, 0, 1342177281, 1342179329, 1342179329 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort103() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, 1, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort104() throws Exception {
    int[] marg0 = { 0, 0, 1, 1, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 0, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort105() throws Exception {
    int[] marg0 = { 0, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort106() throws Exception {
    int[] marg0 = { 0, -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort107() throws Exception {
    int[] marg0 = { -1677721599, -872415231, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, -671088639, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, -603979776 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1677721599, -872415231, -671088639, -603979776, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort108() throws Exception {
    int[] marg0 = { -1610612735, 1, 536870912, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1610612735, 1, 536870912, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort109() throws Exception {
    int[] marg0 = { -268435455, -268435455, 1610612737, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048192 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -268435455, -268435455, 1610612737, 1879048192, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort110() throws Exception {
    int[] marg0 = { -1610612735, -1610612735, 1, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870912 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1610612735, -1610612735, 1, 536870912, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort111() throws Exception {
    int[] marg0 = { -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort112() throws Exception {
    int[] marg0 = { -1543503871, 603979776, 603979776, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 536870913, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979776 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1543503871, 536870913, 603979776, 603979776, 603979776, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort113() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, -1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort114() throws Exception {
    int[] marg0 = { 0, 0, 0, 1, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 0, 0, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort115() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort116() throws Exception {
    int[] marg0 = { -536870911, 1610612736, 1073741825, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612736 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -536870911, 1073741825, 1610612736, 1610612736, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort117() throws Exception {
    int[] marg0 = { -394264575, -1199570943, -662700031, 2021654529, 2021654529, 2021654529, 2021654529, 2021654529, 2021654529, 2021654529, -134217727, 2021654529, 2021654529, 2021654529, 2021654529, 2021654529, 2021654529, 2021654529, 2021654529, 2021654529, 2021654529, 2021654529, 2021654529, 2021654529, 2021654529, 2021654529, 2021654529, 2021654529, 2021654529, 2021654529, 2021654529, -125829120 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1199570943, -662700031, -394264575, -134217727, -125829120, 2021654529, 2021654529, 2021654529, 2021654529, 2021654529, 2021654529, 2021654529, 2021654529, 2021654529, 2021654529, 2021654529, 2021654529, 2021654529, 2021654529, 2021654529, 2021654529, 2021654529, 2021654529, 2021654529, 2021654529, 2021654529, 2021654529, 2021654529, 2021654529, 2021654529, 2021654529, 2021654529 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort118() throws Exception {
    int[] marg0 = { -1073741823, -1073741823, 1, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741823, -1073741823, 1, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort119() throws Exception {
    int[] marg0 = { 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort120() throws Exception {
    int[] marg0 = { 199229441, 601882625, 601882625, 736100353, 736100353, 736100353, 736100353, 736100353, 736100353, 736100353, 734003201, 736100353, 736100353, 736100353, 736100353, 736100353, 736100353, 736100353, 736100353, 736100353, 736100353, 736100353, 736100353, 736100353, 736100353, 736100353, 736100353, 736100353, 736100353, 736100353, 736100353, 736100352 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 199229441, 601882625, 601882625, 734003201, 736100352, 736100353, 736100353, 736100353, 736100353, 736100353, 736100353, 736100353, 736100353, 736100353, 736100353, 736100353, 736100353, 736100353, 736100353, 736100353, 736100353, 736100353, 736100353, 736100353, 736100353, 736100353, 736100353, 736100353, 736100353, 736100353, 736100353, 736100353 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort121() throws Exception {
    int[] marg0 = { 1, 1, 1073741824, 1, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 1, 1, 1, 1073741824, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort122() throws Exception {
    int[] marg0 = { 0, -2147483647, 0, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort123() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, 0, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort124() throws Exception {
    int[] marg0 = { 0, -2147483647, 0, 1, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort125() throws Exception {
    int[] marg0 = { -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort126() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, -2147483647, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, -1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort127() throws Exception {
    int[] marg0 = { -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort128() throws Exception {
    int[] marg0 = { 1073741824, 1, 1, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 1, 1, 1073741824, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort129() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, 1, 1, 1, 1, 1, 1, 1, -2147483648 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, -2147483648, -2147483648, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort130() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -2147483648 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, -2147483648, -2147483648, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort131() throws Exception {
    int[] marg0 = { 583008257, -1547698175, 62914561, 599785473, 599785473, 599785473, 599785473, 599785473, 599785473, 599785473, 595591169, 599785473, 599785473, 599785473, 599785473, 599785473, 599785473, 599785473, 599785473, 599785473, 599785473, 599785473, 599785473, 599785473, 599785473, 599785473, 599785473, 599785473, 599785473, 599785473, 599785473, 599785472 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1547698175, 62914561, 583008257, 595591169, 599785472, 599785473, 599785473, 599785473, 599785473, 599785473, 599785473, 599785473, 599785473, 599785473, 599785473, 599785473, 599785473, 599785473, 599785473, 599785473, 599785473, 599785473, 599785473, 599785473, 599785473, 599785473, 599785473, 599785473, 599785473, 599785473, 599785473, 599785473 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort132() throws Exception {
    int[] marg0 = { -1459617791, 553648129, 150994945, 671088641, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865856 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1459617791, 150994945, 553648129, 671088641, 687865856, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857, 687865857 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort133() throws Exception {
    int[] marg0 = { -1073741824, -1073741824, -2147483647, -1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -1073741824, -1073741824, -1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort134() throws Exception {
    int[] marg0 = { -2147483647, 0, -2147483647, 0, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort135() throws Exception {
    int[] marg0 = { 0, -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort136() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, -2147483647, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort137() throws Exception {
    int[] marg0 = { -1073741824, -2147483647, -2147483647, -2147483647, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, -1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -1073741824, -1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort138() throws Exception {
    int[] marg0 = { -2147483647, 0, -2147483647, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort139() throws Exception {
    int[] marg0 = { -1073741824, -2147483647, -1073741824, -2147483647, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, -2147483647, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, -1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -1073741824, -1073741824, -1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort140() throws Exception {
    int[] marg0 = { -2147483647, -1610612736, 1, 1, 536870913, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -1610612736, 0, 1, 1, 536870913 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort141() throws Exception {
    int[] marg0 = { -2147483647, -1073741824, 1, -1073741823, 1073741825, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -1073741824, -1073741823, 0, 1, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort142() throws Exception {
    int[] marg0 = { -2147483584, -2147483584, -2147483551, 1073774592, 1073741824, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483584, -2147483584, -2147483551, 0, 1073741824, 1073774592 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort143() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, 0, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort144() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483647, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, -2147483647, 0, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort145() throws Exception {
    int[] marg0 = { 0, 0, 1, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 0, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort146() throws Exception {
    int[] marg0 = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort147() throws Exception {
    int[] marg0 = { -1934098431, -1666187263, -1665662976, 481820673, 481820673, 481820673, 481820673, 481820673, 481820673, 481820673, 481820673 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1934098431, -1666187263, -1665662976, 481820673, 481820673, 481820673, 481820673, 481820673, 481820673, 481820673, 481820673 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort148() throws Exception {
    int[] marg0 = { -771751935, -704643072, 1442840577, 1442840577, 1442840577, 1442840577, 1442840577, 1442840577, 1442840577, 1442840577, 1442840577, -738197503, 1442840577, 1442840577, 1442840577, 1442840577, 1442840577, 1442840577, 1442840577, 1442840577, 1442840577, 1442840577, 1442840577, 1442840577, 1442840577, 1442840577, 1442840577, 1442840577, 1442840577, 1442840577, 1442840577, -704643072 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -771751935, -738197503, -704643072, -704643072, 1442840577, 1442840577, 1442840577, 1442840577, 1442840577, 1442840577, 1442840577, 1442840577, 1442840577, 1442840577, 1442840577, 1442840577, 1442840577, 1442840577, 1442840577, 1442840577, 1442840577, 1442840577, 1442840577, 1442840577, 1442840577, 1442840577, 1442840577, 1442840577, 1442840577, 1442840577, 1442840577, 1442840577 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort149() throws Exception {
    int[] marg0 = { 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort150() throws Exception {
    int[] marg0 = { 0, -2147483647, -2147483647, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort151() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, -2147483647, 1, 1, 1, 1, 1, 1, 1, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort152() throws Exception {
    int[] marg0 = { -1098907647, 1040187393, 1048576000, 1048576001, 1048576001, 1048576001, 1048576001, 1048576001, 1048576001 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1098907647, 1040187393, 1048576000, 1048576001, 1048576001, 1048576001, 1048576001, 1048576001, 1048576001 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort153() throws Exception {
    int[] marg0 = { -2080374783, -2080374783, -1073741823, 1140850689, 1140850689, 1140850689, 1140850689, 1140850689, 1140850689, 1140850689, -1006632960 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2080374783, -2080374783, -1073741823, -1006632960, 1140850689, 1140850689, 1140850689, 1140850689, 1140850689, 1140850689, 1140850689 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort154() throws Exception {
    int[] marg0 = { -1610612735, -1610612735, -1610612735, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 1, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870912 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1610612735, -1610612735, -1610612735, 1, 536870912, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort155() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, -2147483647, 0, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, 0, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort156() throws Exception {
    int[] marg0 = { -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort157() throws Exception {
    int[] marg0 = { -1545601023, 65011713, -1545601023, 601882625, 601882625, 601882625, 601882625, 601882625, 601882625, 601882625, 599785473, 601882625, 601882625, 601882625, 601882625, 601882625, 601882625, 601882625, 601882625, 601882625, 601882625, 601882625, 601882625, 601882625, 601882625, 601882625, 601882625, 601882625, 601882625, 601882625, 601882625, 601882624 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1545601023, -1545601023, 65011713, 599785473, 601882624, 601882625, 601882625, 601882625, 601882625, 601882625, 601882625, 601882625, 601882625, 601882625, 601882625, 601882625, 601882625, 601882625, 601882625, 601882625, 601882625, 601882625, 601882625, 601882625, 601882625, 601882625, 601882625, 601882625, 601882625, 601882625, 601882625, 601882625 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort158() throws Exception {
    int[] marg0 = { -1744830463, 134217729, 402653184, 268435457, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653184 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1744830463, 134217729, 268435457, 402653184, 402653184, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort159() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, 0, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort160() throws Exception {
    int[] marg0 = { 0, -2147483647, 0, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort161() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, 1, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, -2147483648, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort162() throws Exception {
    int[] marg0 = { 0, 0, -2147483647, 1, 1, 1, 1, 1, 1, 1, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort163() throws Exception {
    int[] marg0 = { -1681915903, -742391807, -1681915903, 1539309569, 1539309569, 1539309569, 1539309569, 1539309569, 1539309569, 1539309569, -612368383, 1539309569, 1539309569, 1539309569, 1539309569, 1539309569, 1539309569, 1539309569, 1539309569, 1539309569, 1539309569, 1539309569, 1539309569, 1539309569, 1539309569, 1539309569, 1539309569, 1539309569, 1539309569, 1539309569, 1539309569, -608174080 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1681915903, -1681915903, -742391807, -612368383, -608174080, 1539309569, 1539309569, 1539309569, 1539309569, 1539309569, 1539309569, 1539309569, 1539309569, 1539309569, 1539309569, 1539309569, 1539309569, 1539309569, 1539309569, 1539309569, 1539309569, 1539309569, 1539309569, 1539309569, 1539309569, 1539309569, 1539309569, 1539309569, 1539309569, 1539309569, 1539309569, 1539309569 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort164() throws Exception {
    int[] marg0 = { 402653184, 134217729, -1744830463, 268435457, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653184 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1744830463, 134217729, 268435457, 402653184, 402653184, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort165() throws Exception {
    int[] marg0 = { -1476395007, -1476395007, 536870913, 671088640, 671088641, 671088641, 671088641, 671088641, 671088641 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1476395007, -1476395007, 536870913, 671088640, 671088641, 671088641, 671088641, 671088641, 671088641 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort166() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort167() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, -2147483647, -2147483647, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, -1610612736 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -2147483647, -1610612736, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort168() throws Exception {
    int[] marg0 = { 268435456, 268435456, -1879048191, 1, 268435457, 268435457, 268435457, 268435457, 268435457, 268435456 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1879048191, 1, 268435456, 268435456, 268435456, 268435457, 268435457, 268435457, 268435457, 268435457 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort169() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, -2147483648, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -2147483648 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort170() throws Exception {
    int[] marg0 = { -1744830463, 134217729, 134217729, -1744830463, 402653185, 402653185, 402653185, 402653185, 402653185, 268435457, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653184 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1744830463, -1744830463, 134217729, 134217729, 268435457, 402653184, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort171() throws Exception {
    int[] marg0 = { 1073741890, 134217792, 1207959552, 2013290497, 2013265921, 2013290497, 2013265921 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 134217792, 1073741890, 1207959552, 2013265921, 2013265921, 2013290497, 2013290497 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort172() throws Exception {
    int[] marg0 = { -2147483645, -536870911, 536870912, 536870913, 536870913, 536870913, 536870913 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483645, -536870911, 536870912, 536870913, 536870913, 536870913, 536870913 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort173() throws Exception {
    int[] marg0 = { 0, 0, 0, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 0, 0, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort174() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, -2147483648, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort175() throws Exception {
    int[] marg0 = { 1090519041, 553648129, 1610612737, 1627389953, 1627389953, 1627389953, 1627389953, 1627389953, 1627389953, 1627389953, 1627389952 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 553648129, 1090519041, 1610612737, 1627389952, 1627389953, 1627389953, 1627389953, 1627389953, 1627389953, 1627389953, 1627389953 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort176() throws Exception {
    int[] marg0 = { -1073741823, 1, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741823, 1, 1, 1073741824, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort177() throws Exception {
    int[] marg0 = { 1, 1, 1, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 1, 1, 1, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort178() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, -2147483647, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, 0, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort179() throws Exception {
    int[] marg0 = { 586153985, 644874241, -1494220799, 653262849, 653262849, 653262849, 653262849, 653262849, 653262849, 653262849, 652214273, 653262849, 653262849, 653262849, 653262849, 653262849, 653262849, 653262849, 653262849, 653262849, 653262849, 653262849, 653262849, 653262849, 653262849, 653262849, 653262849, 653262849, 653262849, 653262849, 653262849, 653262848 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1494220799, 586153985, 644874241, 652214273, 653262848, 653262849, 653262849, 653262849, 653262849, 653262849, 653262849, 653262849, 653262849, 653262849, 653262849, 653262849, 653262849, 653262849, 653262849, 653262849, 653262849, 653262849, 653262849, 653262849, 653262849, 653262849, 653262849, 653262849, 653262849, 653262849, 653262849, 653262849 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort180() throws Exception {
    int[] marg0 = { 1073741824, 1073741824, -1073741823, 1, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741823, 1, 1073741824, 1073741824, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort181() throws Exception {
    int[] marg0 = { -1543503871, -1543503871, -536870911, -469762048, 1677721601, 1677721601, 1677721601, 1677721601, 1677721601 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1543503871, -1543503871, -536870911, -469762048, 1677721601, 1677721601, 1677721601, 1677721601, 1677721601 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort182() throws Exception {
    int[] marg0 = { -671088640, -939524095, -1744830463, -805306367, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, -671088640 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1744830463, -939524095, -805306367, -671088640, -671088640, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009, 1476395009 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort183() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, -2147483647, -2147483647, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -2147483647, 0, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort184() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, 0, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort185() throws Exception {
    int[] marg0 = { 1, 1073741824, -1073741823, 1, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741823, 1, 1, 1, 1073741824, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort186() throws Exception {
    int[] marg0 = { 1, -1073741823, 1, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741823, 1, 1, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort187() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, -2147483647, 0, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, 0, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort188() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, -2147483648, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, -2147483648, -2147483648, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort189() throws Exception {
    int[] marg0 = { -1677721599, -1677721599, -1677721599, -1207959551, 1006632961, 1006632961, 1006632961, 1006632961, 1006632961, 1006632961, 1006632961, 1006632961, 1006632961, 1006632961, 1006632961, 1006632961, 1006632961, 1006632961, 1006632961, 1006632961, 1006632961, 1006632961, 1006632961, 1006632961, 1006632961, 1006632961, 1006632961, 1006632961, 1006632961, 1006632961, 1006632961, -1140850688 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1677721599, -1677721599, -1677721599, -1207959551, -1140850688, 1006632961, 1006632961, 1006632961, 1006632961, 1006632961, 1006632961, 1006632961, 1006632961, 1006632961, 1006632961, 1006632961, 1006632961, 1006632961, 1006632961, 1006632961, 1006632961, 1006632961, 1006632961, 1006632961, 1006632961, 1006632961, 1006632961, 1006632961, 1006632961, 1006632961, 1006632961, 1006632961 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort190() throws Exception {
    int[] marg0 = { -1879048192, -2147483647, -1879048192, -2147483647, 268435457, 268435457, 268435457, 268435457, 268435457, -1879048192 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -1879048192, -1879048192, -1879048192, 268435457, 268435457, 268435457, 268435457, 268435457 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort191() throws Exception {
    int[] marg0 = { -536870912, -536870912, -536870912, -1610612735, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, -1073741823, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, -536870912 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1610612735, -1073741823, -536870912, -536870912, -536870912, -536870912, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort192() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, -2147483647, -2147483647, 0, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -2147483647, 0, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort193() throws Exception {
    int[] marg0 = { 0, -2147483647, -2147483647, -2147483647, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, 0, 0, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort194() throws Exception {
    int[] marg0 = { 0, 0, -2147483647, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort195() throws Exception {
    int[] marg0 = { -1677721599, -1677721599, -1677721599, -872415231, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, -671088639, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, -603979776 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1677721599, -1677721599, -1677721599, -872415231, -671088639, -603979776, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort196() throws Exception {
    int[] marg0 = { -1073741824, -2147483647, -2147483647, -2147483647, -2147483647, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, -1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -2147483647, -1073741824, -1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort197() throws Exception {
    int[] marg0 = { -1073741823, 4224, 1077936261, 1073750149, 1073741956 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741823, 4224, 1073741956, 1073750149, 1077936261 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort198() throws Exception {
    int[] marg0 = { -2147483647, -2147479552, -2147479551, 1073741825, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147479552, -2147479551, 0, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort199() throws Exception {
    int[] marg0 = { -2147483647, -2139095040, 1, 8388737, 128 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2139095040, 1, 128, 8388737 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort200() throws Exception {
    int[] marg0 = { -2147483639, -2147482616, -536869887, -2147482615, 1024 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483639, -2147482616, -2147482615, -536869887, 1024 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort201() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, 0, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort202() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, 1, -2147483647, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, -2147483647, 0, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort203() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483647, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, -2147483647, 0, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort204() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, 1, 1, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort205() throws Exception {
    int[] marg0 = { -1484783615, 125829121, 662700033, 662700033, 662700033, 662700033, 662700033, 662700033, 662700033, 662700033, 662700033, 654311425, 662700033, 662700033, 662700033, 662700033, 662700033, 662700033, 662700033, 662700033, 662700033, 662700033, 662700033, 662700033, 662700033, 662700033, 662700033, 662700033, 662700033, 662700033, 662700033, 662700032 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1484783615, 125829121, 654311425, 662700032, 662700033, 662700033, 662700033, 662700033, 662700033, 662700033, 662700033, 662700033, 662700033, 662700033, 662700033, 662700033, 662700033, 662700033, 662700033, 662700033, 662700033, 662700033, 662700033, 662700033, 662700033, 662700033, 662700033, 662700033, 662700033, 662700033, 662700033, 662700033 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort206() throws Exception {
    int[] marg0 = { -1342177279, 536870913, 805306368, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1342177279, 536870913, 805306368, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort207() throws Exception {
    int[] marg0 = { -805306368, -805306368, -1073741823, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, -805306368 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741823, -805306368, -805306368, -805306368, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort208() throws Exception {
    int[] marg0 = { 1, -1073741823, 1, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741823, 1, 1, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort209() throws Exception {
    int[] marg0 = { 0, 0, -2147483647, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort210() throws Exception {
    int[] marg0 = { -905969663, -1442840575, -503316479, 1778384897, 1778384897, 1778384897, 1778384897, 1778384897, 1778384897, 1778384897, -402653183, 1778384897, 1778384897, 1778384897, 1778384897, 1778384897, 1778384897, 1778384897, 1778384897, 1778384897, 1778384897, 1778384897, 1778384897, 1778384897, 1778384897, 1778384897, 1778384897, 1778384897, 1778384897, 1778384897, 1778384897, -369098752 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1442840575, -905969663, -503316479, -402653183, -369098752, 1778384897, 1778384897, 1778384897, 1778384897, 1778384897, 1778384897, 1778384897, 1778384897, 1778384897, 1778384897, 1778384897, 1778384897, 1778384897, 1778384897, 1778384897, 1778384897, 1778384897, 1778384897, 1778384897, 1778384897, 1778384897, 1778384897, 1778384897, 1778384897, 1778384897, 1778384897, 1778384897 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort211() throws Exception {
    int[] marg0 = { -1207959551, -1207959551, 805306369, 939524096, 939524097, 939524097, 939524097, 939524097, 939524097, 939524097 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1207959551, -1207959551, 805306369, 939524096, 939524097, 939524097, 939524097, 939524097, 939524097, 939524097 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort212() throws Exception {
    int[] marg0 = { 394264577, 394264577, 394264577, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1459617793, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006400 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 394264577, 394264577, 394264577, 1459617793, 1468006400, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort213() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, -1610612736, -2147483647, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, -1610612736 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -1610612736, -1610612736, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort214() throws Exception {
    int[] marg0 = { -805306368, -1879048191, -1073741823, -805306368, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1879048191, -1073741823, -805306368, -805306368, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort215() throws Exception {
    int[] marg0 = { 48234497, 585105408, 551550977, 585105409, 585105409, 585105409, 585105409, 585105409, 585105409, 585105409, 583008257, 585105409, 585105409, 585105409, 585105409, 585105409, 585105409, 585105409, 585105409, 585105409, 585105409, 585105409, 585105409, 585105409, 585105409, 585105409, 585105409, 585105409, 585105409, 585105409, 585105409, 585105408 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 48234497, 551550977, 583008257, 585105408, 585105408, 585105409, 585105409, 585105409, 585105409, 585105409, 585105409, 585105409, 585105409, 585105409, 585105409, 585105409, 585105409, 585105409, 585105409, 585105409, 585105409, 585105409, 585105409, 585105409, 585105409, 585105409, 585105409, 585105409, 585105409, 585105409, 585105409, 585105409 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort216() throws Exception {
    int[] marg0 = { 1, 1, 536870912, 1, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870912 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 1, 1, 1, 536870912, 536870912, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort217() throws Exception {
    int[] marg0 = { 0, 0, -2147483647, 0, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 0, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort218() throws Exception {
    int[] marg0 = { 1, -1073741823, 1, 1, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741823, 1, 1, 1, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort219() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, -1610612736, -1610612736, 536870913, 536870913, 536870913, 536870913, 536870913, -2147483647, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, -1610612736 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -1610612736, -1610612736, -1610612736, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort220() throws Exception {
    int[] marg0 = { 0, -2146959360, 0, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2146959360, 0, 0, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort221() throws Exception {
    int[] marg0 = { -528482166, -398458843, 1744961572, 1879048229, 1762197509, 1761740805, 1820327973 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -528482166, -398458843, 1744961572, 1761740805, 1762197509, 1820327973, 1879048229 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort222() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, -2147483648, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort223() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, -2147483647, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, -1610612736 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -1610612736, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort224() throws Exception {
    int[] marg0 = { -2147483647, 0, -2147483647, 1, 1, 1, 1, 1, 1, 1, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort225() throws Exception {
    int[] marg0 = { -1073741823, 1073741824, 1, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741823, 1, 1073741824, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort226() throws Exception {
    int[] marg0 = { -1509949439, -1509949439, -1509949439, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 603979777, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534208 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1509949439, -1509949439, -1509949439, 603979777, 637534208, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort227() throws Exception {
    int[] marg0 = { 1073741824, -1073741823, 1, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741823, 1, 1073741824, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort228() throws Exception {
    int[] marg0 = { -2147483647, 0, 0, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort229() throws Exception {
    int[] marg0 = { -2013265920, -2013265920, -2147483647, -2147483647, 134217729, 134217729, 134217729, 134217729, 134217729, -2013265920 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2013265920, -2013265920, -2013265920, 134217729, 134217729, 134217729, 134217729, 134217729 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort230() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 1, 1, 1, 1, 1, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort231() throws Exception {
    int[] marg0 = { -536870912, -536870912, -1073741823, -536870912, 1610612737, 1610612737, 1610612737, 1610612737 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741823, -536870912, -536870912, -536870912, 1610612737, 1610612737, 1610612737, 1610612737 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort232() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, 0, 0, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort233() throws Exception {
    int[] marg0 = { 1073741824, 1, 1, 1, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 1, 1, 1, 1073741824, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort234() throws Exception {
    int[] marg0 = { -2147483647, 0, -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort235() throws Exception {
    int[] marg0 = { -2080374783, -1073741823, -2080374783, -1073741823, 1140850689, 1140850689, 1140850689, 1140850689, 1140850689, -1073741823, 1140850689, 1140850689, 1140850689, 1140850689, 1140850689, 1140850689, 1140850689, 1140850689, 1140850689, 1140850689, 1140850689, 1140850689, 1140850689, 1140850689, 1140850689, 1140850689, 1140850689, 1140850689, 1140850689, 1140850689, 1140850689, -1006632960 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2080374783, -2080374783, -1073741823, -1073741823, -1073741823, -1006632960, 1140850689, 1140850689, 1140850689, 1140850689, 1140850689, 1140850689, 1140850689, 1140850689, 1140850689, 1140850689, 1140850689, 1140850689, 1140850689, 1140850689, 1140850689, 1140850689, 1140850689, 1140850689, 1140850689, 1140850689, 1140850689, 1140850689, 1140850689, 1140850689, 1140850689, 1140850689 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort236() throws Exception {
    int[] marg0 = { -536870911, -536870911, 1610612736, 1073741825, 1610612736, 1610612737, 1610612737, 1610612737, 1610612737 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -536870911, -536870911, 1073741825, 1610612736, 1610612736, 1610612737, 1610612737, 1610612737, 1610612737 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort237() throws Exception {
    int[] marg0 = { 0, 0, 0, -2147483647, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 0, 0, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort238() throws Exception {
    int[] marg0 = { -785645567, -1855193087, -1855193087, -798228479, 1366032385, 1366032385, 1366032385, 1366032385, 1366032385, -781713407, 1366032385, 1366032385, 1366032385, 1366032385, 1366032385, 1366032385, 1366032385, 1366032385, 1366032385, 1366032385, 1366032385, 1366032385, 1366032385, 1366032385, 1366032385, 1366032385, 1366032385, 1366032385, 1366032385, 1366032385, 1366032385, -781451264 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1855193087, -1855193087, -798228479, -785645567, -781713407, -781451264, 1366032385, 1366032385, 1366032385, 1366032385, 1366032385, 1366032385, 1366032385, 1366032385, 1366032385, 1366032385, 1366032385, 1366032385, 1366032385, 1366032385, 1366032385, 1366032385, 1366032385, 1366032385, 1366032385, 1366032385, 1366032385, 1366032385, 1366032385, 1366032385, 1366032385, 1366032385 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort239() throws Exception {
    int[] marg0 = { -1073741823, 1073741824, -1073741823, 1, 1, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741823, -1073741823, 1, 1, 1073741824, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort240() throws Exception {
    int[] marg0 = { -1040187328, 134217793, 1082130432, 1342177281, 1207959553, 1090519041 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1040187328, 134217793, 1082130432, 1090519041, 1207959553, 1342177281 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort241() throws Exception {
    int[] marg0 = { -1610612719, -1073741808, 268435456, 1342177281, 1342177281, 1342177281 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1610612719, -1073741808, 268435456, 1342177281, 1342177281, 1342177281 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort242() throws Exception {
    int[] marg0 = { 0, -2147483647, 0, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort243() throws Exception {
    int[] marg0 = { -1879048190, -1610612736, 4, 1048577, 5, 5, 5 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1879048190, -1610612736, 4, 5, 5, 5, 1048577 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort244() throws Exception {
    int[] marg0 = { -2147483647, 0, 0, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort245() throws Exception {
    int[] marg0 = { -1275068415, -1275068415, 805306369, 872415232, 872415233, 872415233, 872415233, 872415233, 872415233, 872415233 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1275068415, -1275068415, 805306369, 872415232, 872415233, 872415233, 872415233, 872415233, 872415233, 872415233 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort246() throws Exception {
    int[] marg0 = { -1358954495, -1358954495, -1358954495, 788529153, 788529153, 788529153, 788529153, 788529153, 788529153, 788529153, 771751937, 788529153, 788529153, 788529153, 788529153, 788529153, 788529153, 788529153, 788529153, 788529153, 788529153, 788529153, 788529153, 788529153, 788529153, 788529153, 788529153, 788529153, 788529153, 788529153, 788529153, 788529152 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1358954495, -1358954495, -1358954495, 771751937, 788529152, 788529153, 788529153, 788529153, 788529153, 788529153, 788529153, 788529153, 788529153, 788529153, 788529153, 788529153, 788529153, 788529153, 788529153, 788529153, 788529153, 788529153, 788529153, 788529153, 788529153, 788529153, 788529153, 788529153, 788529153, 788529153, 788529153, 788529153 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort247() throws Exception {
    int[] marg0 = { 1073741824, 1, 1, 1, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 1, 1, 1, 1073741824, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort248() throws Exception {
    int[] marg0 = { -2147483647, 0, -2147483647, 0, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort249() throws Exception {
    int[] marg0 = { 0, 0, -2147483647, 0, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 0, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort250() throws Exception {
    int[] marg0 = { 0, -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort251() throws Exception {
    int[] marg0 = { 0, -2147483647, 0, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort252() throws Exception {
    int[] marg0 = { -2147483647, 0, -2147483647, -2147483647, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, 0, 0, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort253() throws Exception {
    int[] marg0 = { 0, 0, 0, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort254() throws Exception {
    int[] marg0 = { -1073741823, -1073741823, -1073741823, -1073741823, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741823, -1073741823, -1073741823, -1073741823, 1, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort255() throws Exception {
    int[] marg0 = { -2147483647, 0, -2147483647, 0, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort256() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, -2147483648, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, -2147483648, -2147483648, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort257() throws Exception {
    int[] marg0 = { -1644167167, 234881025, -1644167167, 469762049, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316480 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1644167167, -1644167167, 234881025, 469762049, 503316480, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort258() throws Exception {
    int[] marg0 = { 0, 0, -2147483647, -2147483647, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 0, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort259() throws Exception {
    int[] marg0 = { -1610612735, -1610612735, 536870912, 536870912, 536870913, 536870913, 536870913, 536870913, 536870913, 1, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870912 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1610612735, -1610612735, 1, 536870912, 536870912, 536870912, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort260() throws Exception {
    int[] marg0 = { 1, 536870912, 536870912, 1, 536870912, 536870913, 536870913, 536870913, 536870913 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 1, 1, 536870912, 536870912, 536870912, 536870913, 536870913, 536870913, 536870913 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort261() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, -2147483648, 1, 1, 1, 1, 1, -2147483648 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort262() throws Exception {
    int[] marg0 = { 0, -2147483647, 0, -2147483647, 1, 1, 1, 1, 1, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort263() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, 1073741825, 1073741825, 1073741825, 1073741825, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -1073741824, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort264() throws Exception {
    int[] marg0 = { -1610612735, -1610612735, 1, 536870912, 536870913, 536870913, 536870913 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1610612735, -1610612735, 1, 536870912, 536870913, 536870913, 536870913 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort265() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 0, 0, 0, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort266() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, 0, -2147483647, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, 0, 0, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort267() throws Exception {
    int[] marg0 = { -956301311, -1493172223, -486539263, -436207615, -419430400, 1728053249, 1728053249, 1728053249, 1728053249 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1493172223, -956301311, -486539263, -436207615, -419430400, 1728053249, 1728053249, 1728053249, 1728053249 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort268() throws Exception {
    int[] marg0 = { -2147483647, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort269() throws Exception {
    int[] marg0 = { 0, 0, -2147483647, -2147483647, 1, 1, 1, 1, 1, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort270() throws Exception {
    int[] marg0 = { -1073741823, -1073741823, -1073741823, -1073741823, 1, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741823, -1073741823, -1073741823, -1073741823, 1, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort271() throws Exception {
    int[] marg0 = { -2147483647, 0, 0, -2147483647, 0, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 0, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort272() throws Exception {
    int[] marg0 = { -2147483647, 0, -2147483647, -2147483647, 0, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, 0, 0, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort273() throws Exception {
    int[] marg0 = { 0, 0, -2147483647, 0, 1, 1, 1, 1, 1, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort274() throws Exception {
    int[] marg0 = { -268435455, -268435455, -268435455, -268435455, 1610612737, 1879048193, 1879048193, 1879048193, 1879048193, -268435455, -268435455, -268435455, -268435455, -268435455, -268435455, -268435455, -268435455, -268435455, -268435455, -268435455, -268435455, -268435455, -268435455, -268435455, -268435455, -268435455, -268435455, -268435455, -268435455, -268435455, -268435455, 1879048192 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -268435455, -268435455, -268435455, -268435455, -268435455, -268435455, -268435455, -268435455, -268435455, -268435455, -268435455, -268435455, -268435455, -268435455, -268435455, -268435455, -268435455, -268435455, -268435455, -268435455, -268435455, -268435455, -268435455, -268435455, -268435455, -268435455, 1610612737, 1879048192, 1879048193, 1879048193, 1879048193, 1879048193 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort275() throws Exception {
    int[] marg0 = { -738197503, -738197503, 1140850689, 335544321, 1342177281, 1409286145, 1409286145, 1409286145, 1409286144 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -738197503, -738197503, 335544321, 1140850689, 1342177281, 1409286144, 1409286145, 1409286145, 1409286145 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort276() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, 1, 1, 1, 1, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort277() throws Exception {
    int[] marg0 = { -2147483647, 0, -2147483647, 0, 0, 1, 1, 1, -2147483647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort278() throws Exception {
    int[] marg0 = { -2147483647, -1610612736, 0, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -1610612736, 0, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort279() throws Exception {
    int[] marg0 = { -1610612735, -1342177280, -1073741823, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1610612735, -1342177280, -1073741823, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort280() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, 0, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort281() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483647, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, -2147483647, 0, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort282() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, 0, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, 0, 0, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort283() throws Exception {
    int[] marg0 = { -2147483520, -2147483520, -2147483519, -2147483327, 64 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483520, -2147483520, -2147483519, -2147483327, 64 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort284() throws Exception {
    int[] marg0 = { 0, 0, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 0, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort285() throws Exception {
    int[] marg0 = { -1543503871, -1543503871, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 536870913, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979776 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1543503871, -1543503871, 536870913, 603979776, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort286() throws Exception {
    int[] marg0 = { 134217729, 536870913, 671088640, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 134217729, 536870913, 671088640, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort287() throws Exception {
    int[] marg0 = { 1610612736, -536870911, 1073741825, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612736 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -536870911, 1073741825, 1610612736, 1610612736, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort288() throws Exception {
    int[] marg0 = { -1073741823, -805306368, -1073741823, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, -805306368 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741823, -1073741823, -805306368, -805306368, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort289() throws Exception {
    int[] marg0 = { 8388609, 33554433, 8388609, 41943041, 41943041, 41943041, 41943041, 41943041, 41943041, 41943041, 33554433, 41943041, 41943041, 41943041, 41943041, 41943041, 41943041, 41943041, 41943041, 41943041, 41943041, 41943041, 41943041, 41943041, 41943041, 41943041, 41943041, 41943041, 41943041, 41943041, 41943041, 41943040 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 8388609, 8388609, 33554433, 33554433, 41943040, 41943041, 41943041, 41943041, 41943041, 41943041, 41943041, 41943041, 41943041, 41943041, 41943041, 41943041, 41943041, 41943041, 41943041, 41943041, 41943041, 41943041, 41943041, 41943041, 41943041, 41943041, 41943041, 41943041, 41943041, 41943041, 41943041, 41943041 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort290() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, -2147483647, -1879048192, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -1879048192, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort291() throws Exception {
    int[] marg0 = { -536870911, 1073741825, 1610612736, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -536870911, 1073741825, 1610612736, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort292() throws Exception {
    int[] marg0 = { -1509949439, 637534208, 603979777, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 603979777, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534208 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1509949439, 603979777, 603979777, 637534208, 637534208, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209, 637534209 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort293() throws Exception {
    int[] marg0 = { -1610612735, 536870912, 1, 1, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870912 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1610612735, 1, 1, 536870912, 536870912, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort294() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, -2147483647, -1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort295() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, -1073741824, -2147483647, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, -1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -1073741824, -1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort296() throws Exception {
    int[] marg0 = { -1073741823, 1, 1073741824, 1, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741823, 1, 1, 1073741824, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort297() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort298() throws Exception {
    int[] marg0 = { 1107296257, -905969663, 167772161, 167772161, 1241513985, 1241513985, 1241513985, 1241513985, 1241513985, 1207959553, 1241513985, 1241513985, 1241513985, 1241513985, 1241513985, 1241513985, 1241513985, 1241513985, 1241513985, 1241513985, 1241513985, 1241513985, 1241513985, 1241513985, 1241513985, 1241513985, 1241513985, 1241513985, 1241513985, 1241513985, 1241513985, 1241513984 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -905969663, 167772161, 167772161, 1107296257, 1207959553, 1241513984, 1241513985, 1241513985, 1241513985, 1241513985, 1241513985, 1241513985, 1241513985, 1241513985, 1241513985, 1241513985, 1241513985, 1241513985, 1241513985, 1241513985, 1241513985, 1241513985, 1241513985, 1241513985, 1241513985, 1241513985, 1241513985, 1241513985, 1241513985, 1241513985, 1241513985, 1241513985 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort299() throws Exception {
    int[] marg0 = { 838860929, 128, 1207959552, 1778384897, 1778384897, 1778384897, 1778384897 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 128, 838860929, 1207959552, 1778384897, 1778384897, 1778384897, 1778384897 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort300() throws Exception {
    int[] marg0 = { -1610612479, 256, 536870912, 536870913, 536870913, 536870913, 1073741825 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1610612479, 256, 536870912, 536870913, 536870913, 536870913, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort301() throws Exception {
    int[] marg0 = { -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort302() throws Exception {
    int[] marg0 = { 1, -1610612735, 1, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870912 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1610612735, 1, 1, 536870912, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort303() throws Exception {
    int[] marg0 = { -1073741823, 1, 1, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741823, 1, 1, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort304() throws Exception {
    int[] marg0 = { -817889279, -1623195647, -1623195647, 1598029825, 1598029825, 1598029825, 1598029825, 1598029825, 1598029825, 1598029825, -553648127, 1598029825, 1598029825, 1598029825, 1598029825, 1598029825, 1598029825, 1598029825, 1598029825, 1598029825, 1598029825, 1598029825, 1598029825, 1598029825, 1598029825, 1598029825, 1598029825, 1598029825, 1598029825, 1598029825, 1598029825, -549453824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1623195647, -1623195647, -817889279, -553648127, -549453824, 1598029825, 1598029825, 1598029825, 1598029825, 1598029825, 1598029825, 1598029825, 1598029825, 1598029825, 1598029825, 1598029825, 1598029825, 1598029825, 1598029825, 1598029825, 1598029825, 1598029825, 1598029825, 1598029825, 1598029825, 1598029825, 1598029825, 1598029825, 1598029825, 1598029825, 1598029825, 1598029825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort305() throws Exception {
    int[] marg0 = { -2013265919, -2080374783, -2080374783, -2013265919, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, -1946157056 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2080374783, -2080374783, -2013265919, -2013265919, -1946157056, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort306() throws Exception {
    int[] marg0 = { -1073741823, 1073741824, 1, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741823, 1, 1073741824, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort307() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort308() throws Exception {
    int[] marg0 = { 0, -2147483647, -2147483647, 1, 1, 1, 1, 1, 1, 1, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort309() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort310() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, -2147483647, -2147483647, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort311() throws Exception {
    int[] marg0 = { 0, -2147483647, 0, -2147483647, 0, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 0, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort312() throws Exception {
    int[] marg0 = { 0, -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort313() throws Exception {
    int[] marg0 = { -738197503, -671088639, -1677721599, -1677721599, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, -671088639, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, -603979776 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1677721599, -1677721599, -738197503, -671088639, -671088639, -603979776, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort314() throws Exception {
    int[] marg0 = { 0, 0, -2147483647, 0, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort315() throws Exception {
    int[] marg0 = { 8, 134217737, 1073741824, 1476395009, 1476395009, 1476395009 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 8, 134217737, 1073741824, 1476395009, 1476395009, 1476395009 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort316() throws Exception {
    int[] marg0 = { -587202554, -117440508, 17301504, 2030043137, 2031091713, 2080899073 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -587202554, -117440508, 17301504, 2030043137, 2031091713, 2080899073 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort317() throws Exception {
    int[] marg0 = { 1, 0, 134217728, 134217729, 134217729, 134217729, 268435457 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 1, 134217728, 134217729, 134217729, 134217729, 268435457 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort318() throws Exception {
    int[] marg0 = { 71303232, 73400352, 268435520, 268435523, 268435523, 268435589, 268435776 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 71303232, 73400352, 268435520, 268435523, 268435523, 268435589, 268435776 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort319() throws Exception {
    int[] marg0 = { -1644167167, -838860799, -838860799, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, -603979775, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, -570425344 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1644167167, -838860799, -838860799, -603979775, -570425344, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort320() throws Exception {
    int[] marg0 = { 1, -1610612735, 536870912, 1, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870912 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1610612735, 1, 1, 536870912, 536870912, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort321() throws Exception {
    int[] marg0 = { 0, -2147483647, -2147483647, 0, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort322() throws Exception {
    int[] marg0 = { -1610612736, -2147483647, -2147483647, -2147483647, 536870913, 536870913, 536870913, 536870913, 536870913, -1610612736 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -1610612736, -1610612736, 536870913, 536870913, 536870913, 536870913, 536870913 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort323() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, 0, 0, 1, 1, 1, 1, 1, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort324() throws Exception {
    int[] marg0 = { 0, -2147483647, -2147483647, 0, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort325() throws Exception {
    int[] marg0 = { 0, -2147483647, 0, 0, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 0, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort326() throws Exception {
    int[] marg0 = { 0, -2147483647, -2147483647, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort327() throws Exception {
    int[] marg0 = { 0, -2147483647, -2147483647, 0, 1, 1, 1, 1, 1, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort328() throws Exception {
    int[] marg0 = { 1073741824, -1073741823, 1073741824, 1, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741823, 1, 1073741824, 1073741824, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort329() throws Exception {
    int[] marg0 = { -2147483647, 0, 0, -2147483647, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 0, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort330() throws Exception {
    int[] marg0 = { -1409286143, 603979777, 201326593, 201326593, 738197505, 738197505, 738197505, 738197505, 738197505, 671088641, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197504 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1409286143, 201326593, 201326593, 603979777, 671088641, 738197504, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort331() throws Exception {
    int[] marg0 = { 0, -2147483647, -2147483647, -2147483647, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort332() throws Exception {
    int[] marg0 = { -2128084991, -1054343168, -1054867455, -1054343168, 1093140481, 1093140481, 1093140481 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2128084991, -1054867455, -1054343168, -1054343168, 1093140481, 1093140481, 1093140481 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort333() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, -2147483647, 0, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, 0, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }
}
