// Auto-generated by MAZE
package nl.uu.tests.maze.generated.benchmarks;

import java.lang.Exception;
import java.lang.NullPointerException;
import nl.uu.maze.benchmarks.QuickSort;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class QuickSortTest {
  @Test
  public void testSort1() throws Exception {
    int[] marg0 = null;
    Assertions.assertThrows(NullPointerException.class, () -> QuickSort.sort(marg0));
  }

  @Test
  public void testSort2() throws Exception {
    int[] marg0 = {};
    int[] retval = QuickSort.sort(marg0);

    int[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort3() throws Exception {
    int[] marg0 = { 0, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort4() throws Exception {
    int[] marg0 = { -2147483647, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort5() throws Exception {
    int[] marg0 = { 1602224129, 1603272704, 1603272705 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 1602224129, 1603272704, 1603272705 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort6() throws Exception {
    int[] marg0 = { 0, 0, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 0, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort7() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, 1, 1, 1, 1, 1, 1, 1, -2147483648 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, -2147483648, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort8() throws Exception {
    int[] marg0 = { -2147483647, 0, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort9() throws Exception {
    int[] marg0 = { 0, -2147483647, 0, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort10() throws Exception {
    int[] marg0 = { -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort11() throws Exception {
    int[] marg0 = { -390201343, -457310207, -859963391, 1824391169, 1824391169, 1824391169, 1824391169, 1824391169, -323223551, 1824391169, 1824391169, 1824391169, 1824391169, 1824391169, 1824391169, 1824391169, 1824391169, 1824391169, 1824391169, 1824391169, 1824391169, 1824391169, 1824391169, 1824391169, 1824391169, 1824391169, 1824391169, 1824391169, 1824391169, 1824391169, 1824391169, -323092480 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -859963391, -457310207, -390201343, -323223551, -323092480, 1824391169, 1824391169, 1824391169, 1824391169, 1824391169, 1824391169, 1824391169, 1824391169, 1824391169, 1824391169, 1824391169, 1824391169, 1824391169, 1824391169, 1824391169, 1824391169, 1824391169, 1824391169, 1824391169, 1824391169, 1824391169, 1824391169, 1824391169, 1824391169, 1824391169, 1824391169, 1824391169 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort12() throws Exception {
    int[] marg0 = { -1895825407, -956301311, -838860799, 1325400065, 1325400065, 1325400065, 1325400065, 1325400065, -822083584 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1895825407, -956301311, -838860799, -822083584, 1325400065, 1325400065, 1325400065, 1325400065, 1325400065 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort13() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, 0, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort14() throws Exception {
    int[] marg0 = { -2147483647, 0, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort15() throws Exception {
    int[] marg0 = { -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort16() throws Exception {
    int[] marg0 = { 0, 0, 1, 1, 1, 1, 1, 1, 1, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort17() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort18() throws Exception {
    int[] marg0 = { -201326591, -201326591, 1879048193, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157056 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -201326591, -201326591, 1879048193, 1946157056, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057, 1946157057 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort19() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort20() throws Exception {
    int[] marg0 = { 536870913, 268435457, 268435457, 805306369, 805306369, 805306369, 805306369, 805306369, 536870913, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306368 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 268435457, 268435457, 536870913, 536870913, 805306368, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort21() throws Exception {
    int[] marg0 = { 0, -2147483647, -2147483647, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort22() throws Exception {
    int[] marg0 = { -1409286143, -872415231, -469762047, 1811939329, 1811939329, 1811939329, 1811939329, 1811939329, -402653183, 1811939329, 1811939329, 1811939329, 1811939329, 1811939329, 1811939329, 1811939329, 1811939329, 1811939329, 1811939329, 1811939329, 1811939329, 1811939329, 1811939329, 1811939329, 1811939329, 1811939329, 1811939329, 1811939329, 1811939329, 1811939329, 1811939329, -335544320 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1409286143, -872415231, -469762047, -402653183, -335544320, 1811939329, 1811939329, 1811939329, 1811939329, 1811939329, 1811939329, 1811939329, 1811939329, 1811939329, 1811939329, 1811939329, 1811939329, 1811939329, 1811939329, 1811939329, 1811939329, 1811939329, 1811939329, 1811939329, 1811939329, 1811939329, 1811939329, 1811939329, 1811939329, 1811939329, 1811939329, 1811939329 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort23() throws Exception {
    int[] marg0 = { 0, -2147483647, 0, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 0, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort24() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, -2147483647, -2147483647, 1073741825, 1073741825, 1073741825, -2147483647, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, -1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort25() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, -2147483647, 0, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, 0, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort26() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, 0, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort27() throws Exception {
    int[] marg0 = { -2147483647, 0, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort28() throws Exception {
    int[] marg0 = { 0, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort29() throws Exception {
    int[] marg0 = { -1610612735, 1, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 1, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870912 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1610612735, 1, 1, 536870912, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort30() throws Exception {
    int[] marg0 = { -1073741823, -1073741823, -1073741823, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, -536870912 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741823, -1073741823, -1073741823, -536870912, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort31() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, -2147483648, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort32() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -2147483648 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, -2147483648, -2147483648, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort33() throws Exception {
    int[] marg0 = { -2013265919, -1610612735, -1476395008, 671088641, 671088641, 671088641, 671088641, 671088641, -1610612735, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, -1476395008 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2013265919, -1610612735, -1610612735, -1476395008, -1476395008, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort34() throws Exception {
    int[] marg0 = { -2147483647, 0, 0, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort35() throws Exception {
    int[] marg0 = { 0, -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort36() throws Exception {
    int[] marg0 = { -1946157055, -1409286144, -1946157055, 738197505, 738197505, 738197505, 738197505, 738197505, -1476395007, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, -1409286144 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1946157055, -1946157055, -1476395007, -1409286144, -1409286144, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505, 738197505 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort37() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, -2147483647, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, 0, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort38() throws Exception {
    int[] marg0 = { 1, 1, -1073741823, 1, 1073741825, 1073741825, 1073741825, 1, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741823, 1, 1, 1, 1, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort39() throws Exception {
    int[] marg0 = { -603979775, -1140850687, -134217727, -67108864, 2080374785, 2080374785, 2080374785, 2080374785 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1140850687, -603979775, -134217727, -67108864, 2080374785, 2080374785, 2080374785, 2080374785 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort40() throws Exception {
    int[] marg0 = { -2147483647, 0, 0, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort41() throws Exception {
    int[] marg0 = { -1476395007, -1979711487, -1476395007, 704643073, 704643073, 704643073, 704643073, 704643073, -1476395007, 704643073, 704643073, 704643073, 704643073, 704643073, 704643073, 704643073, 704643073, 704643073, 704643073, 704643073, 704643073, 704643073, 704643073, 704643073, 704643073, 704643073, 704643073, 704643073, 704643073, 704643073, 704643073, -1442840576 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1979711487, -1476395007, -1476395007, -1476395007, -1442840576, 704643073, 704643073, 704643073, 704643073, 704643073, 704643073, 704643073, 704643073, 704643073, 704643073, 704643073, 704643073, 704643073, 704643073, 704643073, 704643073, 704643073, 704643073, 704643073, 704643073, 704643073, 704643073, 704643073, 704643073, 704643073, 704643073, 704643073 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort42() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, -2147483647, -2147483647, 1, 1, 1, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort43() throws Exception {
    int[] marg0 = { 503316481, 1308622849, 503316481, 1543503873, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058304 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 503316481, 503316481, 1308622849, 1543503873, 1577058304, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305, 1577058305 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort44() throws Exception {
    int[] marg0 = { 570425345, 671088641, -1442840575, 671088641, 704643073, 704643073, 704643073, 704643072 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1442840575, 570425345, 671088641, 671088641, 704643072, 704643073, 704643073, 704643073 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort45() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, -2147483647, 0, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, 0, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort46() throws Exception {
    int[] marg0 = { -1610612735, -1073741823, -536870912, 1610612737, 1610612737, 1610612737 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1610612735, -1073741823, -536870912, 1610612737, 1610612737, 1610612737 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort47() throws Exception {
    int[] marg0 = { -2147483647, 0, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort48() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, 1, 1, 1, 1, 1, 1, 1, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort49() throws Exception {
    int[] marg0 = { 0, 0, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort50() throws Exception {
    int[] marg0 = { -2147483647, -1610612736, -2147483647, 536870913, 536870913, 536870913, 536870913, 536870913, -2147483647, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, -1610612736 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -1610612736, -1610612736, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort51() throws Exception {
    int[] marg0 = { 1862270977, -16777215, 2113929217, 2130706433, 2130706433, 2130706433, 2130706433, 2130706433, 2130706432 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -16777215, 1862270977, 2113929217, 2130706432, 2130706433, 2130706433, 2130706433, 2130706433, 2130706433 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort52() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, -2147483648, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort53() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort54() throws Exception {
    int[] marg0 = { -1006632959, -1946157055, -1946157055, 1275068417, 1275068417, 1275068417, 1275068417, 1275068417, -939524095, 1275068417, 1275068417, 1275068417, 1275068417, 1275068417, 1275068417, 1275068417, 1275068417, 1275068417, 1275068417, 1275068417, 1275068417, 1275068417, 1275068417, 1275068417, 1275068417, 1275068417, 1275068417, 1275068417, 1275068417, 1275068417, 1275068417, -872415232 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1946157055, -1946157055, -1006632959, -939524095, -872415232, 1275068417, 1275068417, 1275068417, 1275068417, 1275068417, 1275068417, 1275068417, 1275068417, 1275068417, 1275068417, 1275068417, 1275068417, 1275068417, 1275068417, 1275068417, 1275068417, 1275068417, 1275068417, 1275068417, 1275068417, 1275068417, 1275068417, 1275068417, 1275068417, 1275068417, 1275068417, 1275068417 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort55() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, 1, 1, 1, 1, 1, -2147483648 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, -2147483648, -2147483648, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort56() throws Exception {
    int[] marg0 = { 0, -2147483647, -2147483647, -2147483647, 1, 1, 1, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort57() throws Exception {
    int[] marg0 = { -234881023, 838860801, 1879048193, 1912602624, 1912602625, 1912602625, 1912602625, 1912602625 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -234881023, 838860801, 1879048193, 1912602624, 1912602625, 1912602625, 1912602625, 1912602625 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort58() throws Exception {
    int[] marg0 = { -2147483647, 0, 0, 1, 1, 1, 1, 1, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort59() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, -2147483648, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, -2147483648, -2147483648, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort60() throws Exception {
    int[] marg0 = { 0, -2147483647, -2147483647, -2147483647, 1, 1, 1, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, 0, 0, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort61() throws Exception {
    int[] marg0 = { -1073741823, 1, 1, 1, 1073741825, 1073741825, 1073741825, 1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741823, 1, 1, 1, 1073741824, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort62() throws Exception {
    int[] marg0 = { -1073741823, 1073741824, 1, 1073741824, 1073741825, 1073741825, 1073741825 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741823, 1, 1073741824, 1073741824, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort63() throws Exception {
    int[] marg0 = { -2147483647, 0, 0, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort64() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, -2147483647, 1, 1, 1, 1, 1, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort65() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, 0, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort66() throws Exception {
    int[] marg0 = { -1073741823, -1610612735, -1073741823, -1073741823, 1610612737, 1610612737, 1610612737, -1073741823, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, -536870912 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1610612735, -1073741823, -1073741823, -1073741823, -1073741823, -536870912, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort67() throws Exception {
    int[] marg0 = { -2147483647, 0, 0, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort68() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, -2147483647, -2147483647, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -2147483647, 0, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort69() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, -2147483648, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, -2147483648, -2147483648, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort70() throws Exception {
    int[] marg0 = { 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort71() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, 0, 0, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 0, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort72() throws Exception {
    int[] marg0 = { -2147483647, 0, -2147483647, -2147483647, 1, 1, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, 0, 0, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort73() throws Exception {
    int[] marg0 = { -2147483647, -1073741824, -2147483647, -2147483647, -1073741824, 1073741825, -1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -1073741824, -1073741824, -1073741824, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort74() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, -2147483647, 0, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, 0, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort75() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, -1073741824, 1073741825, 1073741825 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -1073741824, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort76() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, 0, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort77() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, 1, 1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, 1, 1073741824 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort78() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort79() throws Exception {
    int[] marg0 = { -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort80() throws Exception {
    int[] marg0 = { 0, 0, 0, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 0, 0, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort81() throws Exception {
    int[] marg0 = { -1073741823, -805306368, -1073741823, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, -1073741823, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, -805306368 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741823, -1073741823, -1073741823, -805306368, -805306368, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort82() throws Exception {
    int[] marg0 = { -1073741824, -2147483647, -2147483647, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, -1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -1073741824, -1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort83() throws Exception {
    int[] marg0 = { 134217729, 134217729, 134217729, 402653185, 402653185, 402653185, 402653185, 402653185, 268435457, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653184 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 134217729, 134217729, 134217729, 268435457, 402653184, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort84() throws Exception {
    int[] marg0 = { 1073741824, -1073741823, 1073741824, 1, 1073741825, 1073741825, 1073741825, 1, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741823, 1, 1, 1073741824, 1073741824, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort85() throws Exception {
    int[] marg0 = { 1, -1879048191, 1, 268435456, 268435457, 268435457, 268435457, 268435457 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1879048191, 1, 1, 268435456, 268435457, 268435457, 268435457, 268435457 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort86() throws Exception {
    int[] marg0 = { -2147483647, 0, -2147483647, 1, 1, 1, 1, 1, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort87() throws Exception {
    int[] marg0 = { -1291845631, -1291845631, -1291845631, -234881023, 1929379841, 1929379841, 1929379841, -234881023, 1929379841, 1929379841, 1929379841, 1929379841, 1929379841, 1929379841, 1929379841, 1929379841, 1929379841, 1929379841, 1929379841, 1929379841, 1929379841, 1929379841, 1929379841, 1929379841, 1929379841, 1929379841, 1929379841, 1929379841, 1929379841, 1929379841, 1929379841, -218103808 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1291845631, -1291845631, -1291845631, -234881023, -234881023, -218103808, 1929379841, 1929379841, 1929379841, 1929379841, 1929379841, 1929379841, 1929379841, 1929379841, 1929379841, 1929379841, 1929379841, 1929379841, 1929379841, 1929379841, 1929379841, 1929379841, 1929379841, 1929379841, 1929379841, 1929379841, 1929379841, 1929379841, 1929379841, 1929379841, 1929379841, 1929379841 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort88() throws Exception {
    int[] marg0 = { 536870912, 1, 1, 1, 536870913, 536870913, 536870913, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 536870912 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 536870912, 536870912, 536870913, 536870913, 536870913 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort89() throws Exception {
    int[] marg0 = { 0, 0, -2147483647, -2147483647, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 0, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort90() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, -2147483648, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort91() throws Exception {
    int[] marg0 = { -2147483647, 0, 0, -2147483647, 1, 1, 1, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort92() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, 0, 0, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort93() throws Exception {
    int[] marg0 = { 67108865, 67108865, 67108865, 536870913, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979776 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 67108865, 67108865, 67108865, 536870913, 603979776, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777, 603979777 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort94() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, 0, -2147483647, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, 0, 0, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort95() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, -2147483648, 1, 1, 1, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort96() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, -2147483647, -2147483647, 1, 1, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, 0, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort97() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, -2147483647, -2147483647, 0, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -2147483647, 0, 0, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort98() throws Exception {
    int[] marg0 = { -2147483647, 0, -2147483647, 0, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort99() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, 0, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort100() throws Exception {
    int[] marg0 = { -536870911, -536870911, -536870911, 1073741825, 1610612737, 1610612737, 1610612737, 1073741825, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612736 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -536870911, -536870911, -536870911, 1073741825, 1073741825, 1610612736, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort101() throws Exception {
    int[] marg0 = { 0, -2147483647, -2147483647, 0, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort102() throws Exception {
    int[] marg0 = { 0, 0, 0, -2147483647, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort103() throws Exception {
    int[] marg0 = { -2147483647, 0, 0, -2147483647, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 0, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort104() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, 0, 0, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort105() throws Exception {
    int[] marg0 = { -2147483647, 0, -2147483647, 0, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 0, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort106() throws Exception {
    int[] marg0 = { -1073741823, -1073741823, 1073741824, -1073741823, 1073741825, 1073741825, 1, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, 1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, 1, 1073741824, 1073741824, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort107() throws Exception {
    int[] marg0 = { -1610612735, -1610612735, -1610612735, -1073741823, -536870912, 1610612737, -536870912 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1610612735, -1610612735, -1610612735, -1073741823, -536870912, -536870912, 1610612737 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort108() throws Exception {
    int[] marg0 = { 0, 0, -2147483647, 0, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 0, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort109() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, -2147483647, 0, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, 0, 0, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort110() throws Exception {
    int[] marg0 = { 1, -1073741823, -1073741823, 1, 1073741825, 1073741825, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741823, -1073741823, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1073741824, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort111() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, 0, 0, 0, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 0, 0, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort112() throws Exception {
    int[] marg0 = { -939524095, 134217729, -939524095, 1073741825, 1073741825, 1207959553, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1207959552 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -939524095, -939524095, 134217729, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1207959552, 1207959553 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort113() throws Exception {
    int[] marg0 = { 536870913, -1342177279, -1342177279, -1342177279, 536870913, 805306369, 805306368 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1342177279, -1342177279, -1342177279, 536870913, 536870913, 805306368, 805306369 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort114() throws Exception {
    int[] marg0 = { -1744830463, -1476395007, -1744830463, -1342177279, -1207959552, 939524097 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1744830463, -1744830463, -1476395007, -1342177279, -1207959552, 939524097 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort115() throws Exception {
    int[] marg0 = { 402653185, 402653185, 1342177281, 1476395008, 1476395009 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 402653185, 402653185, 1342177281, 1476395008, 1476395009 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort116() throws Exception {
    int[] marg0 = { 3, 1, 536870912, 536870913 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 1, 3, 536870912, 536870913 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort117() throws Exception {
    int[] marg0 = { -1325399935, -1275068384, 352321536, 352321537 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1325399935, -1275068384, 352321536, 352321537 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort118() throws Exception {
    int[] marg0 = { -1610612735, -1610612735, -1610612735, 536870913, 536870913, 536870913, 536870913, 536870913, 1, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870912 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1610612735, -1610612735, -1610612735, 1, 536870912, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort119() throws Exception {
    int[] marg0 = { 0, 0, -2147483647, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 0, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort120() throws Exception {
    int[] marg0 = { -1879048191, -1610612735, -1879048191, 805306369, 805306369, 805306369, 805306369, 805306369, -1610612735, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, -1342177280 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1879048191, -1879048191, -1610612735, -1610612735, -1342177280, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort121() throws Exception {
    int[] marg0 = { -1476395007, 671088640, 671088640, 536870913, 671088641, 671088641, 671088641, 536870913, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088640 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1476395007, 536870913, 536870913, 671088640, 671088640, 671088640, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort122() throws Exception {
    int[] marg0 = { -1744830463, -1744830463, -1342177279, -1207959552, 939524097, 939524097, 939524097, 939524097 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1744830463, -1744830463, -1342177279, -1207959552, 939524097, 939524097, 939524097, 939524097 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort123() throws Exception {
    int[] marg0 = { 1, 1, 1073741824, 1, 1073741825, 1073741825, 1073741825, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1073741824, 1073741824, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort124() throws Exception {
    int[] marg0 = { -2147483647, 0, -2147483647, -2147483647, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, 0, 0, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort125() throws Exception {
    int[] marg0 = { 805306369, -268435455, 1610612737, 1879048192, 1879048193, 1879048193, 1879048193 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -268435455, 805306369, 1610612737, 1879048192, 1879048193, 1879048193, 1879048193 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort126() throws Exception {
    int[] marg0 = { 0, -2147483647, -2147483647, 1, 1, 1, 1, 1, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort127() throws Exception {
    int[] marg0 = { -2080374783, -2080374783, -2080374783, -2013265919, 201326593, 201326593, 201326593, -2013265919, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, -1946157056 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2080374783, -2080374783, -2080374783, -2013265919, -2013265919, -1946157056, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593, 201326593 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort128() throws Exception {
    int[] marg0 = { 0, -2147483647, 0, 0, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 0, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort129() throws Exception {
    int[] marg0 = { -2013265919, 1, 134217728, 1, 134217729, 134217729, 134217729, 134217729, 134217729, 134217729, 134217729, 134217729, 134217729, 134217729, 134217729, 134217729, 134217729, 134217729, 134217729, 134217729, 134217729, 134217729, 134217729, 134217729, 134217729, 134217729, 134217729, 134217729, 134217729, 134217729, 134217729, 134217728 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2013265919, 1, 1, 134217728, 134217728, 134217729, 134217729, 134217729, 134217729, 134217729, 134217729, 134217729, 134217729, 134217729, 134217729, 134217729, 134217729, 134217729, 134217729, 134217729, 134217729, 134217729, 134217729, 134217729, 134217729, 134217729, 134217729, 134217729, 134217729, 134217729, 134217729, 134217729 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort130() throws Exception {
    int[] marg0 = { -1879048192, -1879048192, -2147483647, -2147483647, 268435457, 268435457, 268435457, -1879048192 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -1879048192, -1879048192, -1879048192, 268435457, 268435457, 268435457 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort131() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, -2147483648, 1, 1, 1, -2147483648 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort132() throws Exception {
    int[] marg0 = { -1744830463, -671088640, -1744830463, -1744830463, 1476395009, 1476395009, -805306367, -1744830463, -1744830463, -1744830463, -1744830463, -1744830463, -1744830463, -1744830463, -1744830463, -1744830463, -1744830463, -1744830463, -1744830463, -1744830463, -1744830463, -1744830463, -1744830463, -1744830463, -1744830463, -1744830463, -1744830463, -1744830463, -1744830463, -1744830463, -1744830463, -671088640 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1744830463, -1744830463, -1744830463, -1744830463, -1744830463, -1744830463, -1744830463, -1744830463, -1744830463, -1744830463, -1744830463, -1744830463, -1744830463, -1744830463, -1744830463, -1744830463, -1744830463, -1744830463, -1744830463, -1744830463, -1744830463, -1744830463, -1744830463, -1744830463, -1744830463, -1744830463, -1744830463, -805306367, -671088640, -671088640, 1476395009, 1476395009 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort133() throws Exception {
    int[] marg0 = { -2013265919, -2013265919, -2013265919, 1, 134217728, 134217729, 134217728 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2013265919, -2013265919, -2013265919, 1, 134217728, 134217728, 134217729 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort134() throws Exception {
    int[] marg0 = { 536870913, 1073741825, 1073741825, 1610612736, 1610612737, 1610612737 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 536870913, 1073741825, 1073741825, 1610612736, 1610612737, 1610612737 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort135() throws Exception {
    int[] marg0 = { 0, 0, 0, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 0, 0, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort136() throws Exception {
    int[] marg0 = { 0, 0, -2147483647, 1, 1, 1, 1, 1, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort137() throws Exception {
    int[] marg0 = { -1342177280, -1342177280, -1610612735, -1610612735, 805306369, 805306369, 805306369, -1610612735, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, -1342177280 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1610612735, -1610612735, -1610612735, -1342177280, -1342177280, -1342177280, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort138() throws Exception {
    int[] marg0 = { -2147483647, 0, 0, 0, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 0, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort139() throws Exception {
    int[] marg0 = { 1, -1073741823, 1, 1, 1073741825, 1073741825, 1073741825, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741823, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1073741824, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort140() throws Exception {
    int[] marg0 = { -536870911, 536870913, -536870911, 1073741825, 1610612737, 1610612737, 1610612737, 1610612736 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -536870911, -536870911, 536870913, 1073741825, 1610612736, 1610612737, 1610612737, 1610612737 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort141() throws Exception {
    int[] marg0 = { -2147483647, 0, 0, 0, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 0, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort142() throws Exception {
    int[] marg0 = { -2147483647, 0, -2147483647, -2147483647, 1, 1, 1, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, 0, 0, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort143() throws Exception {
    int[] marg0 = { 0, 0, 0, -2147483647, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 0, 0, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort144() throws Exception {
    int[] marg0 = { 1073741824, 1, 1073741824, -1073741823, 1073741825, 1073741825, 1, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741823, 1, 1, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort145() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, -2147483648, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, -2147483648, -2147483648, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort146() throws Exception {
    int[] marg0 = { 0, 0, -2147483647, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort147() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, 1, -2147483648 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort148() throws Exception {
    int[] marg0 = { -1879048191, -1610612735, -1610612735, -1610612735, -1610612735, 805306369, -1610612735, -1610612735, -1610612735, -1610612735, -1610612735, -1610612735, -1610612735, -1610612735, -1610612735, -1610612735, -1610612735, -1610612735, -1610612735, -1610612735, -1610612735, -1610612735, -1610612735, -1610612735, -1610612735, -1610612735, -1610612735, -1610612735, -1610612735, -1610612735, -1610612735, -1342177280 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1879048191, -1610612735, -1610612735, -1610612735, -1610612735, -1610612735, -1610612735, -1610612735, -1610612735, -1610612735, -1610612735, -1610612735, -1610612735, -1610612735, -1610612735, -1610612735, -1610612735, -1610612735, -1610612735, -1610612735, -1610612735, -1610612735, -1610612735, -1610612735, -1610612735, -1610612735, -1610612735, -1610612735, -1610612735, -1610612735, -1342177280, 805306369 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort149() throws Exception {
    int[] marg0 = { 1073741825, 536870913, 536870913, 536870913, 1073741825, 1610612737, 1610612736 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 536870913, 536870913, 536870913, 1073741825, 1073741825, 1610612736, 1610612737 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort150() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, -2147483647, -2147483647, 0, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -2147483647, 0, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort151() throws Exception {
    int[] marg0 = { -2147483647, 0, -2147483647, 0, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort152() throws Exception {
    int[] marg0 = { 135296, 131073, 268435588, 268435589 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 131073, 135296, 268435588, 268435589 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort153() throws Exception {
    int[] marg0 = { -536870848, -268435456, 1610613760, 1610613761 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -536870848, -268435456, 1610613760, 1610613761 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort154() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, 0, 1, 1, 1, 1, 1, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort155() throws Exception {
    int[] marg0 = { -2147483647, 0, -2147483647, -2147483647, 1, 1, 1, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort156() throws Exception {
    int[] marg0 = { 1073741824, -1073741823, -1073741823, 1, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741823, -1073741823, 1, 1073741824, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort157() throws Exception {
    int[] marg0 = { -1803550719, -1803550719, -729808896, -738197503, 1417674753, 1417674753, 1417674753, -729808896 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1803550719, -1803550719, -738197503, -729808896, -729808896, 1417674753, 1417674753, 1417674753 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort158() throws Exception {
    int[] marg0 = { -2147483647, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort159() throws Exception {
    int[] marg0 = { -2147483647, 0, -2147483647, 0, 1, 1, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, 0, 0, 0, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort160() throws Exception {
    int[] marg0 = { -1073741824, -1073741824, -2147483647, -2147483647, 1073741825, 1073741825, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -1073741824, -1073741824, -1073741824, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort161() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, 0, -2147483647, 0, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, 0, 0, 0, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort162() throws Exception {
    int[] marg0 = { 0, -2147483647, -2147483647, -2147483647, -2147483647, 1, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, 0, 0, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort163() throws Exception {
    int[] marg0 = { -2147483647, 0, -2147483647, -2147483647, -2147483647, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -2147483647, 0, 0, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort164() throws Exception {
    int[] marg0 = { 1, 1, -1073741823, 1, 1073741824, 1073741825 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741823, 1, 1, 1, 1073741824, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort165() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, -2147483647, 0, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, 0, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort166() throws Exception {
    int[] marg0 = { 1, 1, 1, 1, 1, 536870913, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 536870912 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 536870912, 536870913 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort167() throws Exception {
    int[] marg0 = { -1073741823, -1073741823, -1073741823, -1073741823, 1, 1073741825, 1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741823, -1073741823, -1073741823, -1073741823, 1, 1073741824, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort168() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, 0, -2147483647, 0, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, 0, 0, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort169() throws Exception {
    int[] marg0 = { -2147483647, 0, -2147483647, -2147483647, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort170() throws Exception {
    int[] marg0 = { 0, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort171() throws Exception {
    int[] marg0 = { -2147483647, 0, -2147483647, -2147483647, -2147483647, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -2147483647, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort172() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, -2147483647, -2147483647, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -2147483647, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort173() throws Exception {
    int[] marg0 = { 0, -2147483647, -2147483647, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort174() throws Exception {
    int[] marg0 = { 1, 0, 2097152 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 1, 2097152 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort175() throws Exception {
    int[] marg0 = { -2147483647, 0, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort176() throws Exception {
    int[] marg0 = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort177() throws Exception {
    int[] marg0 = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort178() throws Exception {
    int[] marg0 = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort179() throws Exception {
    int[] marg0 = { -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort180() throws Exception {
    int[] marg0 = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort181() throws Exception {
    int[] marg0 = { -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort182() throws Exception {
    int[] marg0 = { -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort183() throws Exception {
    int[] marg0 = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort184() throws Exception {
    int[] marg0 = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort185() throws Exception {
    int[] marg0 = { -536870911, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, -536870911, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, -268435456 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -536870911, -536870911, -268435456, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort186() throws Exception {
    int[] marg0 = { -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort187() throws Exception {
    int[] marg0 = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort188() throws Exception {
    int[] marg0 = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort189() throws Exception {
    int[] marg0 = { -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort190() throws Exception {
    int[] marg0 = { 1, 1, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 1, 1, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort191() throws Exception {
    int[] marg0 = { -2147483647, -1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort192() throws Exception {
    int[] marg0 = { 0, 1, 1, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort193() throws Exception {
    int[] marg0 = { 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort194() throws Exception {
    int[] marg0 = { -1476395007, -536870911, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, -402653184 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1476395007, -536870911, -402653184, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort195() throws Exception {
    int[] marg0 = { -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort196() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, 1, 1, 1, 1, 1, 1, 1, 1, -2147483648 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, -2147483648, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort197() throws Exception {
    int[] marg0 = { -1778384895, -1275068415, 905969665, 905969665, 905969665, 905969665, 905969665, 905969665, 905969665, -1241513984 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1778384895, -1275068415, -1241513984, 905969665, 905969665, 905969665, 905969665, 905969665, 905969665, 905969665 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort198() throws Exception {
    int[] marg0 = { 1610612737, 1879048192, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 1610612737, 1879048192, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort199() throws Exception {
    int[] marg0 = { 0, 1, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort200() throws Exception {
    int[] marg0 = { -570425343, 2113929217, 2113929217, 2113929217, 2113929217, 2113929217, 2113929217, 2113929217, 2113929217, 2113929217, -67108863, 2113929217, 2113929217, 2113929217, 2113929217, 2113929217, 2113929217, 2113929217, 2113929217, 2113929217, 2113929217, 2113929217, 2113929217, 2113929217, 2113929217, 2113929217, 2113929217, 2113929217, 2113929217, 2113929217, 2113929217, -33554432 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -570425343, -67108863, -33554432, 2113929217, 2113929217, 2113929217, 2113929217, 2113929217, 2113929217, 2113929217, 2113929217, 2113929217, 2113929217, 2113929217, 2113929217, 2113929217, 2113929217, 2113929217, 2113929217, 2113929217, 2113929217, 2113929217, 2113929217, 2113929217, 2113929217, 2113929217, 2113929217, 2113929217, 2113929217, 2113929217, 2113929217, 2113929217 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort201() throws Exception {
    int[] marg0 = { -1073741823, 1, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741823, 1, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort202() throws Exception {
    int[] marg0 = { 0, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort203() throws Exception {
    int[] marg0 = { -1719664639, -914358271, 1501560833, 1501560833, 1501560833, 1501560833, 1501560833, 1501560833, 1501560833, -654311423, 1501560833, 1501560833, 1501560833, 1501560833, 1501560833, 1501560833, 1501560833, 1501560833, 1501560833, 1501560833, 1501560833, 1501560833, 1501560833, 1501560833, 1501560833, 1501560833, 1501560833, 1501560833, 1501560833, 1501560833, 1501560833, -645922816 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1719664639, -914358271, -654311423, -645922816, 1501560833, 1501560833, 1501560833, 1501560833, 1501560833, 1501560833, 1501560833, 1501560833, 1501560833, 1501560833, 1501560833, 1501560833, 1501560833, 1501560833, 1501560833, 1501560833, 1501560833, 1501560833, 1501560833, 1501560833, 1501560833, 1501560833, 1501560833, 1501560833, 1501560833, 1501560833, 1501560833, 1501560833 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort204() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, -1610612736 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -1610612736, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort205() throws Exception {
    int[] marg0 = { -2147483647, 0, 1, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort206() throws Exception {
    int[] marg0 = { -2113929215, -2113929215, -2080374783, 100663297, 100663297, 100663297, 100663297, 100663297, 100663297, 100663297, 100663297, 100663297, 100663297, 100663297, 100663297, 100663297, 100663297, 100663297, 100663297, 100663297, 100663297, 100663297, 100663297, 100663297, 100663297, 100663297, 100663297, 100663297, 100663297, 100663297, 100663297, -2046820352 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2113929215, -2113929215, -2080374783, -2046820352, 100663297, 100663297, 100663297, 100663297, 100663297, 100663297, 100663297, 100663297, 100663297, 100663297, 100663297, 100663297, 100663297, 100663297, 100663297, 100663297, 100663297, 100663297, 100663297, 100663297, 100663297, 100663297, 100663297, 100663297, 100663297, 100663297, 100663297, 100663297 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort207() throws Exception {
    int[] marg0 = { -1375731711, -335544319, -301989888, 1845493761, 1845493761, 1845493761, 1845493761, 1845493761, 1845493761 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1375731711, -335544319, -301989888, 1845493761, 1845493761, 1845493761, 1845493761, 1845493761, 1845493761 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort208() throws Exception {
    int[] marg0 = { -2147483647, -1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort209() throws Exception {
    int[] marg0 = { 0, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort210() throws Exception {
    int[] marg0 = { -2147483648, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -2147483648 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort211() throws Exception {
    int[] marg0 = { -805306367, 1073741825, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177280 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -805306367, 1073741825, 1342177280, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort212() throws Exception {
    int[] marg0 = { -369098751, -134217727, 2046820353, 2046820353, 2046820353, 2046820353, 2046820353, 2046820353, 2046820353, 2046820353, -100663296 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -369098751, -134217727, -100663296, 2046820353, 2046820353, 2046820353, 2046820353, 2046820353, 2046820353, 2046820353, 2046820353 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort213() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -2147483648 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, -2147483648, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort214() throws Exception {
    int[] marg0 = { -872415231, -872415231, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, -671088639, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, -603979776 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -872415231, -872415231, -671088639, -603979776, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873, 1543503873 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort215() throws Exception {
    int[] marg0 = { -1879048191, -1073741823, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, -805306368 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1879048191, -1073741823, -805306368, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort216() throws Exception {
    int[] marg0 = { -2147483647, -1879048192, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, -2147483647, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, -1879048192 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -1879048192, -1879048192, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort217() throws Exception {
    int[] marg0 = { 0, -2147483647, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort218() throws Exception {
    int[] marg0 = { -1073741824, -2147483647, -2147483647, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, -1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -1073741824, -1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort219() throws Exception {
    int[] marg0 = { 1, 1, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 1, 1, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort220() throws Exception {
    int[] marg0 = { 0, 0, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 0, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort221() throws Exception {
    int[] marg0 = { -1073741824, -1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, -2147483647, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, -1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -1073741824, -1073741824, -1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort222() throws Exception {
    int[] marg0 = { -805306367, -1342177279, -536870911, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, -268435456 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1342177279, -805306367, -536870911, -268435456, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort223() throws Exception {
    int[] marg0 = { -1073741823, 1, -1073741823, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741823, -1073741823, 1, 1, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort224() throws Exception {
    int[] marg0 = { 0, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort225() throws Exception {
    int[] marg0 = { -2147483648, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -2147483648 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort226() throws Exception {
    int[] marg0 = { -805306367, -536870911, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, -536870911, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, -268435456 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -805306367, -536870911, -536870911, -268435456, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort227() throws Exception {
    int[] marg0 = { -1610612735, -1073741823, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, -536870912 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1610612735, -1073741823, -536870912, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort228() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort229() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, 0, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort230() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort231() throws Exception {
    int[] marg0 = { -1610612735, -1610612735, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 1, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870912 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1610612735, -1610612735, 1, 536870912, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort232() throws Exception {
    int[] marg0 = { -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort233() throws Exception {
    int[] marg0 = { -2147483647, -1073741824, -2147483647, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, -1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -1073741824, -1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort234() throws Exception {
    int[] marg0 = { 268435457, 268435457, -805306367, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1073741825, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177280 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -805306367, 268435457, 268435457, 1073741825, 1342177280, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort235() throws Exception {
    int[] marg0 = { -2147483647, -1073741824, -2147483647, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, -1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -1073741824, -1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort236() throws Exception {
    int[] marg0 = { -1073741824, -2147483647, -1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -1073741824, -1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort237() throws Exception {
    int[] marg0 = { -1879048191, -1879048191, -1610612735, 805306369, 805306369, 805306369, 805306369, 805306369, -1610612735, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, -1342177280 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1879048191, -1879048191, -1610612735, -1610612735, -1342177280, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort238() throws Exception {
    int[] marg0 = { 0, -2147483647, 0, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort239() throws Exception {
    int[] marg0 = { 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort240() throws Exception {
    int[] marg0 = { -2003206143, -2003206143, -2003206143, 681148417, 681148417, 681148417, 681148417, 681148417, -1466367999, 681148417, 681148417, 681148417, 681148417, 681148417, 681148417, 681148417, 681148417, 681148417, 681148417, 681148417, 681148417, 681148417, 681148417, 681148417, 681148417, 681148417, 681148417, 681148417, 681148417, 681148417, 681148417, -1466335232 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2003206143, -2003206143, -2003206143, -1466367999, -1466335232, 681148417, 681148417, 681148417, 681148417, 681148417, 681148417, 681148417, 681148417, 681148417, 681148417, 681148417, 681148417, 681148417, 681148417, 681148417, 681148417, 681148417, 681148417, 681148417, 681148417, 681148417, 681148417, 681148417, 681148417, 681148417, 681148417, 681148417 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort241() throws Exception {
    int[] marg0 = { -2147483647, -1073741824, -2147483647, -2147483647, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, -1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -1073741824, -1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort242() throws Exception {
    int[] marg0 = { 0, -2147483647, 0, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort243() throws Exception {
    int[] marg0 = { -1610612735, -1476395008, 671088641, 671088641, 671088641, 671088641 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1610612735, -1476395008, 671088641, 671088641, 671088641, 671088641 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort244() throws Exception {
    int[] marg0 = { -2147483648, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, 0, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort245() throws Exception {
    int[] marg0 = { -1879048192, 536870913, 268435457, 268435457, 805306368 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1879048192, 268435457, 268435457, 536870913, 805306368 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort246() throws Exception {
    int[] marg0 = { -1610612735, 536870912, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 1, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870912 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1610612735, 1, 536870912, 536870912, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort247() throws Exception {
    int[] marg0 = { 0, 0, 1, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 0, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort248() throws Exception {
    int[] marg0 = { -1073741823, 1, 1, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741823, 1, 1, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort249() throws Exception {
    int[] marg0 = { 1073741824, 1073741824, 1, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 1, 1073741824, 1073741824, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort250() throws Exception {
    int[] marg0 = { -805306367, -805306367, -805306367, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1073741825, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177280 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -805306367, -805306367, -805306367, 1073741825, 1342177280, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort251() throws Exception {
    int[] marg0 = { -2147483647, 0, -2147483647, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort252() throws Exception {
    int[] marg0 = { 1610612736, 1073741825, 1610612736, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 1073741825, 1610612736, 1610612736, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort253() throws Exception {
    int[] marg0 = { 0, 0, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 0, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort254() throws Exception {
    int[] marg0 = { -1610612735, -1073741823, -1610612735, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, -1073741823, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, -536870912 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1610612735, -1610612735, -1073741823, -1073741823, -536870912, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort255() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, -2147483647, 536870913, 536870913, 536870913, 536870913, 536870913, -1610612736 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -1610612736, 536870913, 536870913, 536870913, 536870913, 536870913 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort256() throws Exception {
    int[] marg0 = { -1073741823, -1073741823, -1073741823, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741823, -1073741823, -1073741823, 1, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort257() throws Exception {
    int[] marg0 = { -1048576000, -2122317823, -2122317823, -1056964607, 1098907649, 1098907649, 1098907649, 1098907649, 1098907649, 1098907649, 1098907649, 1098907649, 1098907649, 1098907649, 1098907649, 1098907649, 1098907649, 1098907649, 1098907649, 1098907649, 1098907649, 1098907649, 1098907649, 1098907649, 1098907649, 1098907649, 1098907649, 1098907649, 1098907649, 1098907649, 1098907649, -1048576000 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2122317823, -2122317823, -1056964607, -1048576000, -1048576000, 1098907649, 1098907649, 1098907649, 1098907649, 1098907649, 1098907649, 1098907649, 1098907649, 1098907649, 1098907649, 1098907649, 1098907649, 1098907649, 1098907649, 1098907649, 1098907649, 1098907649, 1098907649, 1098907649, 1098907649, 1098907649, 1098907649, 1098907649, 1098907649, 1098907649, 1098907649, 1098907649 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort258() throws Exception {
    int[] marg0 = { -1073741823, -1073741823, 1, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741823, -1073741823, 1, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort259() throws Exception {
    int[] marg0 = { -1073741824, -2147483647, -1073741824, 1073741825, 1073741825, 1073741825, 1073741825 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -1073741824, -1073741824, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort260() throws Exception {
    int[] marg0 = { 0, 0, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 0, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort261() throws Exception {
    int[] marg0 = { 0, -2147483647, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort262() throws Exception {
    int[] marg0 = { -1879048191, -805306368, -1073741823, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, -1073741823, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, -805306368 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1879048191, -1073741823, -1073741823, -805306368, -805306368, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort263() throws Exception {
    int[] marg0 = { 0, 0, 0, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 0, 0, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort264() throws Exception {
    int[] marg0 = { -1461190655, -1461190655, -1461190655, 1760034817, 1760034817, 1760034817, 1760034817, 1760034817, -387973119, 1760034817, 1760034817, 1760034817, 1760034817, 1760034817, 1760034817, 1760034817, 1760034817, 1760034817, 1760034817, 1760034817, 1760034817, 1760034817, 1760034817, 1760034817, 1760034817, 1760034817, 1760034817, 1760034817, 1760034817, 1760034817, 1760034817, -387448832 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1461190655, -1461190655, -1461190655, -387973119, -387448832, 1760034817, 1760034817, 1760034817, 1760034817, 1760034817, 1760034817, 1760034817, 1760034817, 1760034817, 1760034817, 1760034817, 1760034817, 1760034817, 1760034817, 1760034817, 1760034817, 1760034817, 1760034817, 1760034817, 1760034817, 1760034817, 1760034817, 1760034817, 1760034817, 1760034817, 1760034817, 1760034817 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort265() throws Exception {
    int[] marg0 = { 125829121, -947912703, -947912703, 1191182337, 1199570945, 1199570945, 1199570945, 1199570945, 1199570945, 1199570945, 1199570945, 1199570945, 1199570945, 1199570945, 1199570945, 1199570945, 1199570945, 1199570945, 1199570945, 1199570945, 1199570945, 1199570945, 1199570945, 1199570945, 1199570945, 1199570945, 1199570945, 1199570945, 1199570945, 1199570945, 1199570945, 1199570944 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -947912703, -947912703, 125829121, 1191182337, 1199570944, 1199570945, 1199570945, 1199570945, 1199570945, 1199570945, 1199570945, 1199570945, 1199570945, 1199570945, 1199570945, 1199570945, 1199570945, 1199570945, 1199570945, 1199570945, 1199570945, 1199570945, 1199570945, 1199570945, 1199570945, 1199570945, 1199570945, 1199570945, 1199570945, 1199570945, 1199570945, 1199570945 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort266() throws Exception {
    int[] marg0 = { -1879048192, -2147483647, -2147483647, -1879048192, 268435457, 268435457, 268435457, 268435457 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -1879048192, -1879048192, 268435457, 268435457, 268435457, 268435457 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort267() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, -2147483648, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort268() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, -2147483647, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort269() throws Exception {
    int[] marg0 = { 0, 0, -2147483647, 0, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 0, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort270() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, -2147483647, -2147483647, 1, 1, 1, 1, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, -2147483647, 0, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort271() throws Exception {
    int[] marg0 = { -1476395007, 134217729, 536870913, -1476395007, 671088641, 671088641, 671088641, 536870913, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088640 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1476395007, -1476395007, 134217729, 536870913, 536870913, 671088640, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort272() throws Exception {
    int[] marg0 = { -2147483647, -1879048192, -2147483647, -2147483647, 268435457, 268435457, 268435457, -1879048192 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -1879048192, -1879048192, 268435457, 268435457, 268435457 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort273() throws Exception {
    int[] marg0 = { 1073741825, -805306367, 1073741825, 1342177280, 1342177281, 1342177281, 1342177281 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -805306367, 1073741825, 1073741825, 1342177280, 1342177281, 1342177281, 1342177281 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort274() throws Exception {
    int[] marg0 = { -1476395008, -1610612735, -1476395008, 671088641, 671088641, 671088641 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1610612735, -1476395008, -1476395008, 671088641, 671088641, 671088641 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort275() throws Exception {
    int[] marg0 = { -1040187391, -1031798784, 1115684865, 1115684865, 1115684865 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1040187391, -1031798784, 1115684865, 1115684865, 1115684865 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort276() throws Exception {
    int[] marg0 = { -2147483648, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, 0, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort277() throws Exception {
    int[] marg0 = { -2147483648, 1073741825, 1, 536870912 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, 1, 536870912, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort278() throws Exception {
    int[] marg0 = { -973078528, 1140850689, 1174405121, 1174405120 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -973078528, 1140850689, 1174405120, 1174405121 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort279() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, 1, 1, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort280() throws Exception {
    int[] marg0 = { -1610612735, -2013265919, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, -1610612735, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, -1476395008 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2013265919, -1610612735, -1610612735, -1476395008, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort281() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, 1, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort282() throws Exception {
    int[] marg0 = { 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort283() throws Exception {
    int[] marg0 = { 1, 1, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 1, 1, 1, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort284() throws Exception {
    int[] marg0 = { -1610612735, -1073741823, -1073741823, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, -536870912 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1610612735, -1073741823, -1073741823, -536870912, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort285() throws Exception {
    int[] marg0 = { -2147483647, 0, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort286() throws Exception {
    int[] marg0 = { -1879048191, -1879048191, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 1, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435456 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1879048191, -1879048191, 1, 268435456, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457, 268435457 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort287() throws Exception {
    int[] marg0 = { 0, 0, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 0, 0, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort288() throws Exception {
    int[] marg0 = { 268435457, 1342177280, 1073741825, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1073741825, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177280 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 268435457, 1073741825, 1073741825, 1342177280, 1342177280, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort289() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, -2147483647, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, -2147483647, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, -1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -2147483647, -1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort290() throws Exception {
    int[] marg0 = { 0, 0, 0, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 0, 0, 0, 0, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort291() throws Exception {
    int[] marg0 = { 268435457, 268435457, 268435457, 268435457, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653184 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 268435457, 268435457, 268435457, 268435457, 402653184, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185, 402653185 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort292() throws Exception {
    int[] marg0 = { 825229313, 825229313, 1897922561, 1898971136, 1898971137, 1898971137, 1898971137, 1898971137 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 825229313, 825229313, 1897922561, 1898971136, 1898971137, 1898971137, 1898971137, 1898971137 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort293() throws Exception {
    int[] marg0 = { -1576927231, -536739839, -503316479, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, -503185408 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1576927231, -536739839, -503316479, -503185408, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241, 1644298241 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort294() throws Exception {
    int[] marg0 = { -2147483647, 0, 0, 1, 1, 1, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort295() throws Exception {
    int[] marg0 = { 335544321, 335544321, 335544321, 1409286145, 1409286145, 1409286145, 1409286145, 1409286145, 1342177281, 1409286145, 1409286145, 1409286145, 1409286145, 1409286145, 1409286145, 1409286145, 1409286145, 1409286145, 1409286145, 1409286145, 1409286145, 1409286145, 1409286145, 1409286145, 1409286145, 1409286145, 1409286145, 1409286145, 1409286145, 1409286145, 1409286145, 1409286144 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 335544321, 335544321, 335544321, 1342177281, 1409286144, 1409286145, 1409286145, 1409286145, 1409286145, 1409286145, 1409286145, 1409286145, 1409286145, 1409286145, 1409286145, 1409286145, 1409286145, 1409286145, 1409286145, 1409286145, 1409286145, 1409286145, 1409286145, 1409286145, 1409286145, 1409286145, 1409286145, 1409286145, 1409286145, 1409286145, 1409286145, 1409286145 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort296() throws Exception {
    int[] marg0 = { -1543503872, -1543503872, -1610612735, 603979777, 603979777, 603979777, 603979777, 603979777, -1543503872 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1610612735, -1543503872, -1543503872, -1543503872, 603979777, 603979777, 603979777, 603979777, 603979777 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort297() throws Exception {
    int[] marg0 = { -1073741824, -1073741824, -1073741824, -2147483647, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, -1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -1073741824, -1073741824, -1073741824, -1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort298() throws Exception {
    int[] marg0 = { -536870911, -536870911, 1073741825, 1610612736, 1610612737, 1610612737, 1610612737, 1610612737 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -536870911, -536870911, 1073741825, 1610612736, 1610612737, 1610612737, 1610612737, 1610612737 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort299() throws Exception {
    int[] marg0 = { -1073741824, -2147483647, -1073741824, -2147483647, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, -1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -1073741824, -1073741824, -1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort300() throws Exception {
    int[] marg0 = { -2147483648, -2147483648, -2147483648, -2147483648, 1, 1, 1, 1, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, -2147483648, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort301() throws Exception {
    int[] marg0 = { -1073741824, -1073741824, -1073741824, -1073741824, 1073741825, 1073741825, 1073741825, -2147483647, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, -1073741824, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort302() throws Exception {
    int[] marg0 = { 0, -2147483647, -2147483647, -2147483647, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, 0, 0, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort303() throws Exception {
    int[] marg0 = { 0, -2147483647, 0, 1, 1, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort304() throws Exception {
    int[] marg0 = { 0, -2147483647, 1, 1, 1, 1, 1, 1, 1, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort305() throws Exception {
    int[] marg0 = { -1879048191, -1879048191, -805306368, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, -1073741823, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, -805306368 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1879048191, -1879048191, -1073741823, -805306368, -805306368, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort306() throws Exception {
    int[] marg0 = { -2109734911, -2109734911, -2046820351, 104857601, 104857601, 104857601, 104857601, 104857601, -2042626048 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2109734911, -2109734911, -2046820351, -2042626048, 104857601, 104857601, 104857601, 104857601, 104857601 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort307() throws Exception {
    int[] marg0 = { -1266155519, 814219265, -1266155519, 881328129, 881328129, 881328129, 881328129, 881328129, 880803841, 881328129, 881328129, 881328129, 881328129, 881328129, 881328129, 881328129, 881328129, 881328129, 881328129, 881328129, 881328129, 881328129, 881328129, 881328129, 881328129, 881328129, 881328129, 881328129, 881328129, 881328129, 881328129, 881328128 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1266155519, -1266155519, 814219265, 880803841, 881328128, 881328129, 881328129, 881328129, 881328129, 881328129, 881328129, 881328129, 881328129, 881328129, 881328129, 881328129, 881328129, 881328129, 881328129, 881328129, 881328129, 881328129, 881328129, 881328129, 881328129, 881328129, 881328129, 881328129, 881328129, 881328129, 881328129, 881328129 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort308() throws Exception {
    int[] marg0 = { -2147483647, 0, -2147483647, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort309() throws Exception {
    int[] marg0 = { -2080374783, -1543503872, -1610612735, -1543503872, 603979777, 603979777, 603979777, 603979777 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2080374783, -1610612735, -1543503872, -1543503872, 603979777, 603979777, 603979777, 603979777 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort310() throws Exception {
    int[] marg0 = { 0, 0, 0, 1, 1, 1, 1, 1, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort311() throws Exception {
    int[] marg0 = { -1207959551, -1207959551, -1207959551, -268435455, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, -134217728 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1207959551, -1207959551, -1207959551, -268435455, -134217728, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort312() throws Exception {
    int[] marg0 = { 1, -1073741823, -1073741823, 1, 1073741825, 1073741825, 1073741825, 1, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741823, -1073741823, 1, 1, 1, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort313() throws Exception {
    int[] marg0 = { -1610612736, -2147483647, -2147483647, -2147483647, 536870913, 536870913, 536870913, -1610612736 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -1610612736, -1610612736, 536870913, 536870913, 536870913 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort314() throws Exception {
    int[] marg0 = { 1073741824, 1, 1, 1, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 1, 1, 1, 1073741824, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort315() throws Exception {
    int[] marg0 = { 0, 0, -2147483647, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort316() throws Exception {
    int[] marg0 = { -1610612735, -2013265919, -2013265919, -1610612735, 671088641, 671088641, 671088641, -1610612735, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, -1476395008 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2013265919, -2013265919, -1610612735, -1610612735, -1610612735, -1476395008, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641, 671088641 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort317() throws Exception {
    int[] marg0 = { -2147483647, -1073741824, -1073741824, -2147483647, 1073741825, 1073741825, 1073741825, -1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -1073741824, -1073741824, -1073741824, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort318() throws Exception {
    int[] marg0 = { -2147483647, 0, 0, 0, 1, 1, 1, -2147483647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort319() throws Exception {
    int[] marg0 = { 1073741824, -1073741823, -1073741823, -1073741823, 1, 1073741825, 1, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, 1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, -1073741823, 1, 1, 1073741824, 1073741824, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort320() throws Exception {
    int[] marg0 = { -1207959551, -134217728, -1207959551, -268435455, -134217728, 2013265921, 2013265921 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1207959551, -1207959551, -268435455, -134217728, -134217728, 2013265921, 2013265921 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort321() throws Exception {
    int[] marg0 = { 536870913, -1476395007, 536870913, 671088640, 671088641, 671088641 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1476395007, 536870913, 536870913, 671088640, 671088641, 671088641 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort322() throws Exception {
    int[] marg0 = { -2147483647, -1610612736, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -1610612736, 0, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort323() throws Exception {
    int[] marg0 = { -1879048191, -1744830464, -1073741823, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1879048191, -1744830464, -1073741823, 0 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort324() throws Exception {
    int[] marg0 = { -2147483648, 0, 1 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483648, 0, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort325() throws Exception {
    int[] marg0 = { -1073741824, 1, 1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741824, 1, 1073741824 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort326() throws Exception {
    int[] marg0 = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort327() throws Exception {
    int[] marg0 = { -1342177279, -536870911, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, -536870911, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, -268435456 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1342177279, -536870911, -536870911, -268435456, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort328() throws Exception {
    int[] marg0 = { -1073741823, 1, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741823, 1, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort329() throws Exception {
    int[] marg0 = { -939524095, -536870911, -402653184, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -939524095, -536870911, -402653184, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort330() throws Exception {
    int[] marg0 = { -2147483647, -1073741824, -2147483647, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, -2147483647, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, -1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -1073741824, -1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort331() throws Exception {
    int[] marg0 = { -1610612735, 1, 1, 536870913, 536870913, 536870913, 536870913, 536870913, 536870912 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1610612735, 1, 1, 536870912, 536870913, 536870913, 536870913, 536870913, 536870913 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort332() throws Exception {
    int[] marg0 = { -1610612735, 536870912, -1610612735, 536870913, 536870913, 536870913, 536870913, 536870913, 1, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870912 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1610612735, -1610612735, 1, 536870912, 536870912, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913, 536870913 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort333() throws Exception {
    int[] marg0 = { -268435456, -1342177279, -536870911, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, -268435456 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1342177279, -536870911, -268435456, -268435456, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort334() throws Exception {
    int[] marg0 = { -1753219071, -1753219071, -1753219071, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, -687865855, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, -679477248 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1753219071, -1753219071, -1753219071, -687865855, -679477248, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401, 1468006401 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort335() throws Exception {
    int[] marg0 = { -2147483647, 0, 0, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, 0, 0, 0, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort336() throws Exception {
    int[] marg0 = { -1753219071, -1887436799, -1627389951, -1619001344, 528482305, 528482305, 528482305, 528482305 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1887436799, -1753219071, -1627389951, -1619001344, 528482305, 528482305, 528482305, 528482305 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort337() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, -1073741824, 1073741825, 1073741825, 1073741825, 1073741825 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -1073741824, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort338() throws Exception {
    int[] marg0 = { -1879048191, -1342177280, -1610612735, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, -1342177280 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1879048191, -1610612735, -1342177280, -1342177280, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369, 805306369 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort339() throws Exception {
    int[] marg0 = { -1879048191, -1879048191, -1073741823, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, -1073741823, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, -805306368 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1879048191, -1879048191, -1073741823, -1073741823, -805306368, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281, 1342177281 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort340() throws Exception {
    int[] marg0 = { -1610612735, -1610612735, 1, 536870913, 536870913, 536870913, 536870913, 536870913, 536870912 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1610612735, -1610612735, 1, 536870912, 536870913, 536870913, 536870913, 536870913, 536870913 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort341() throws Exception {
    int[] marg0 = { -939524095, -536870911, -402653184, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, -536870911, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, -402653184 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -939524095, -536870911, -536870911, -402653184, -402653184, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465, 1744830465 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort342() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, -2147483647, -2147483647, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, -1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -2147483647, -1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort343() throws Exception {
    int[] marg0 = { 1073741824, 1073741824, 1, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { 1, 1073741824, 1073741824, 1073741824, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort344() throws Exception {
    int[] marg0 = { -1971322879, -1971322879, -1568669695, 713031681, 713031681, 713031681, 713031681, 713031681, -1442840575, 713031681, 713031681, 713031681, 713031681, 713031681, 713031681, 713031681, 713031681, 713031681, 713031681, 713031681, 713031681, 713031681, 713031681, 713031681, 713031681, 713031681, 713031681, 713031681, 713031681, 713031681, 713031681, -1434451968 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1971322879, -1971322879, -1568669695, -1442840575, -1434451968, 713031681, 713031681, 713031681, 713031681, 713031681, 713031681, 713031681, 713031681, 713031681, 713031681, 713031681, 713031681, 713031681, 713031681, 713031681, 713031681, 713031681, 713031681, 713031681, 713031681, 713031681, 713031681, 713031681, 713031681, 713031681, 713031681, 713031681 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort345() throws Exception {
    int[] marg0 = { -134217728, -1207959551, -1207959551, -268435455, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, -134217728 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1207959551, -1207959551, -268435455, -134217728, -134217728, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921, 2013265921 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort346() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, 0, 0, 1, 1, 1, -2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort347() throws Exception {
    int[] marg0 = { -2147483647, -2147483647, -2147483647, -2147483647, 536870913, 536870913, 536870913, -1610612736 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -2147483647, -2147483647, -1610612736, 536870913, 536870913, 536870913 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort348() throws Exception {
    int[] marg0 = { -1073741823, 1, 1073741824, 1073741825, 1073741825, 1073741825 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1073741823, 1, 1073741824, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort349() throws Exception {
    int[] marg0 = { -1073741824, -2147483647, -1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, -2147483647, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, -1073741824 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -2147483647, -2147483647, -1073741824, -1073741824, -1073741824, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825, 1073741825 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort350() throws Exception {
    int[] marg0 = { -1610612735, -1610612735, -1073741823, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737, -536870912 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1610612735, -1610612735, -1073741823, -536870912, 1610612737, 1610612737, 1610612737, 1610612737, 1610612737 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort351() throws Exception {
    int[] marg0 = { -536870911, -805306367, -1342177279, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, -536870911, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, -268435456 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1342177279, -805306367, -536870911, -536870911, -268435456, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193, 1879048193 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort352() throws Exception {
    int[] marg0 = { -1644167167, 436207617, 234881025, 469762049, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316480 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1644167167, 234881025, 436207617, 469762049, 503316480, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481, 503316481 };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSort353() throws Exception {
    int[] marg0 = { -1476395008, -1610612735, -1610612735, -1476395008, 671088641, 671088641, 671088641, 671088641 };
    int[] retval = QuickSort.sort(marg0);

    int[] expected = { -1610612735, -1610612735, -1476395008, -1476395008, 671088641, 671088641, 671088641, 671088641 };
    Assertions.assertArrayEquals(expected, retval);
  }
}
