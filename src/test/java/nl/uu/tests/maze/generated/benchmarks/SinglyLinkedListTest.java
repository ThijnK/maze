// Auto-generated by MAZE
package nl.uu.tests.maze.generated.benchmarks;

import java.lang.Exception;
import java.lang.NullPointerException;
import java.lang.Object;
import nl.uu.maze.benchmarks.SinglyLinkedList;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class SinglyLinkedListTest {
  @Test
  public void testInit1() throws Exception {
    Object[] carg0 = null;
    Assertions.assertThrows(NullPointerException.class, () -> new SinglyLinkedList(carg0));
  }

  @Test
  public void testDelete1() throws Exception {
    Object[] carg0 = {};
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object marg0 = null;
    boolean retval = cut.delete(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHasDuplicates1() throws Exception {
    Object[] carg0 = {};
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    boolean retval = cut.hasDuplicates();

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHasCycle1() throws Exception {
    Object[] carg0 = {};
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    boolean retval = cut.hasCycle();

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testReverse1() throws Exception {
    Object[] carg0 = {};
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    cut.reverse();
  }

  @Test
  public void testAdd1() throws Exception {
    Object[] carg0 = {};
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object marg0 = null;
    boolean retval = cut.add(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAdd2() throws Exception {
    Object[] carg0 = {};
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object obj2 = new Object();
    Object marg0 = obj2;
    boolean retval = cut.add(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testDelete2() throws Exception {
    Object[] carg0 = {};
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object obj2 = new Object();
    Object marg0 = obj2;
    boolean retval = cut.delete(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testDelete3() throws Exception {
    Object[] carg0 = {};
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object obj2 = new Object();
    Object obj5_value = obj2;
    Object marg0 = obj5_value;
    boolean retval = cut.delete(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHasCycle2() throws Exception {
    Object[] carg0 = { null };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    boolean retval = cut.hasCycle();

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHasCycle3() throws Exception {
    Object obj2 = new Object();
    Object[] carg0 = { obj2 };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    boolean retval = cut.hasCycle();

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAdd3() throws Exception {
    Object[] carg0 = {};
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object obj2 = new Object();
    Object obj7_value = obj2;
    Object marg0 = obj7_value;
    boolean retval = cut.add(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHasDuplicates2() throws Exception {
    Object[] carg0 = { null };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    boolean retval = cut.hasDuplicates();

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHasDuplicates3() throws Exception {
    Object obj2 = new Object();
    Object[] carg0 = { obj2 };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    boolean retval = cut.hasDuplicates();

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAdd4() throws Exception {
    Object[] carg0 = { null };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object marg0 = null;
    boolean retval = cut.add(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAdd5() throws Exception {
    Object obj2 = new Object();
    Object[] carg0 = { obj2 };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object marg0 = obj2;
    boolean retval = cut.add(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testDelete4() throws Exception {
    Object[] carg0 = { null };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object marg0 = null;
    boolean retval = cut.delete(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testReverse2() throws Exception {
    Object[] carg0 = { null };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    cut.reverse();
  }

  @Test
  public void testDelete5() throws Exception {
    Object obj2 = new Object();
    Object[] carg0 = { obj2 };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object marg0 = obj2;
    boolean retval = cut.delete(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testReverse3() throws Exception {
    Object obj2 = new Object();
    Object[] carg0 = { obj2 };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    cut.reverse();
  }

  @Test
  public void testDelete6() throws Exception {
    Object[] carg0 = { null };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object obj5 = new Object();
    Object marg0 = obj5;
    boolean retval = cut.delete(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testDelete7() throws Exception {
    Object[] carg0 = { null };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object obj2 = new Object();
    Object marg0 = obj2;
    boolean retval = cut.delete(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testDelete8() throws Exception {
    Object obj2 = new Object();
    Object[] carg0 = { obj2 };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object obj5 = new Object();
    Object marg0 = obj5;
    boolean retval = cut.delete(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testDelete9() throws Exception {
    Object obj2 = new Object();
    Object[] carg0 = { obj2 };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object marg0 = null;
    boolean retval = cut.delete(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAdd6() throws Exception {
    Object[] carg0 = {};
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object obj2 = new Object();
    Object obj9_value = obj2;
    Object marg0 = obj9_value;
    boolean retval = cut.add(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testDelete10() throws Exception {
    Object[] carg0 = {};
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object obj2 = new Object();
    Object obj7_value = obj2;
    Object marg0 = obj7_value;
    boolean retval = cut.delete(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAdd7() throws Exception {
    Object[] carg0 = { null };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object obj5 = new Object();
    Object marg0 = obj5;
    boolean retval = cut.add(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAdd8() throws Exception {
    Object[] carg0 = { null };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object obj2 = new Object();
    Object marg0 = obj2;
    boolean retval = cut.add(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAdd9() throws Exception {
    Object obj2 = new Object();
    Object[] carg0 = { obj2 };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object obj5 = new Object();
    Object marg0 = obj5;
    boolean retval = cut.add(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAdd10() throws Exception {
    Object obj2 = new Object();
    Object[] carg0 = { obj2 };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object marg0 = null;
    boolean retval = cut.add(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAdd11() throws Exception {
    Object[] carg0 = {};
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object obj2 = new Object();
    Object obj11_value = obj2;
    Object marg0 = obj11_value;
    boolean retval = cut.add(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testDelete11() throws Exception {
    Object[] carg0 = {};
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object obj2 = new Object();
    Object obj9_value = obj2;
    Object marg0 = obj9_value;
    boolean retval = cut.delete(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testInit2() throws Exception {
    Object obj5 = new Object();
    Object obj7 = new Object();
    Object[] carg0 = { null, obj5, obj7 };
    new SinglyLinkedList(carg0);
  }

  @Test
  public void testInit3() throws Exception {
    Object obj5 = new Object();
    Object[] carg0 = { null, obj5, obj5 };
    new SinglyLinkedList(carg0);
  }

  @Test
  public void testInit4() throws Exception {
    Object obj5 = new Object();
    Object[] carg0 = { null, obj5, null };
    new SinglyLinkedList(carg0);
  }

  @Test
  public void testInit5() throws Exception {
    Object obj5 = new Object();
    Object obj2 = new Object();
    Object[] carg0 = { null, obj5, obj2 };
    new SinglyLinkedList(carg0);
  }

  @Test
  public void testAdd12() throws Exception {
    Object obj5 = new Object();
    Object[] carg0 = { null, obj5 };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object marg0 = null;
    boolean retval = cut.add(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testDelete12() throws Exception {
    Object obj5 = new Object();
    Object[] carg0 = { null, obj5 };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object marg0 = null;
    boolean retval = cut.delete(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHasDuplicates4() throws Exception {
    Object obj5 = new Object();
    Object[] carg0 = { null, obj5 };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    boolean retval = cut.hasDuplicates();

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHasCycle4() throws Exception {
    Object obj5 = new Object();
    Object[] carg0 = { null, obj5 };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    boolean retval = cut.hasCycle();

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testReverse4() throws Exception {
    Object obj5 = new Object();
    Object[] carg0 = { null, obj5 };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    cut.reverse();
  }

  @Test
  public void testInit6() throws Exception {
    Object obj7 = new Object();
    Object[] carg0 = { null, null, obj7 };
    new SinglyLinkedList(carg0);
  }

  @Test
  public void testInit7() throws Exception {
    Object obj5 = new Object();
    Object[] carg0 = { null, null, obj5 };
    new SinglyLinkedList(carg0);
  }

  @Test
  public void testInit8() throws Exception {
    Object[] carg0 = { null, null, null };
    new SinglyLinkedList(carg0);
  }

  @Test
  public void testInit9() throws Exception {
    Object obj2 = new Object();
    Object[] carg0 = { null, null, obj2 };
    new SinglyLinkedList(carg0);
  }

  @Test
  public void testAdd13() throws Exception {
    Object[] carg0 = { null, null };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object marg0 = null;
    boolean retval = cut.add(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testDelete13() throws Exception {
    Object[] carg0 = { null, null };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object marg0 = null;
    boolean retval = cut.delete(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHasDuplicates5() throws Exception {
    Object[] carg0 = { null, null };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    boolean retval = cut.hasDuplicates();

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHasCycle5() throws Exception {
    Object[] carg0 = { null, null };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    boolean retval = cut.hasCycle();

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testReverse5() throws Exception {
    Object[] carg0 = { null, null };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    cut.reverse();
  }

  @Test
  public void testInit10() throws Exception {
    Object obj2 = new Object();
    Object obj7 = new Object();
    Object[] carg0 = { null, obj2, obj7 };
    new SinglyLinkedList(carg0);
  }

  @Test
  public void testInit11() throws Exception {
    Object obj2 = new Object();
    Object obj5 = new Object();
    Object[] carg0 = { null, obj2, obj5 };
    new SinglyLinkedList(carg0);
  }

  @Test
  public void testInit12() throws Exception {
    Object obj2 = new Object();
    Object[] carg0 = { null, obj2, null };
    new SinglyLinkedList(carg0);
  }

  @Test
  public void testInit13() throws Exception {
    Object obj2 = new Object();
    Object[] carg0 = { null, obj2, obj2 };
    new SinglyLinkedList(carg0);
  }

  @Test
  public void testAdd14() throws Exception {
    Object obj2 = new Object();
    Object[] carg0 = { null, obj2 };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object marg0 = null;
    boolean retval = cut.add(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testDelete14() throws Exception {
    Object obj2 = new Object();
    Object[] carg0 = { null, obj2 };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object marg0 = null;
    boolean retval = cut.delete(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHasDuplicates6() throws Exception {
    Object obj2 = new Object();
    Object[] carg0 = { null, obj2 };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    boolean retval = cut.hasDuplicates();

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHasCycle6() throws Exception {
    Object obj2 = new Object();
    Object[] carg0 = { null, obj2 };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    boolean retval = cut.hasCycle();

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testReverse6() throws Exception {
    Object obj2 = new Object();
    Object[] carg0 = { null, obj2 };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    cut.reverse();
  }

  @Test
  public void testDelete15() throws Exception {
    Object[] carg0 = { null };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object obj2 = new Object();
    Object obj4_value = obj2;
    Object marg0 = obj4_value;
    boolean retval = cut.delete(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testInit14() throws Exception {
    Object obj2 = new Object();
    Object obj5 = new Object();
    Object obj7 = new Object();
    Object[] carg0 = { obj2, obj5, obj7 };
    new SinglyLinkedList(carg0);
  }

  @Test
  public void testInit15() throws Exception {
    Object obj2 = new Object();
    Object obj5 = new Object();
    Object[] carg0 = { obj2, obj5, obj5 };
    new SinglyLinkedList(carg0);
  }

  @Test
  public void testInit16() throws Exception {
    Object obj2 = new Object();
    Object obj5 = new Object();
    Object[] carg0 = { obj2, obj5, null };
    new SinglyLinkedList(carg0);
  }

  @Test
  public void testInit17() throws Exception {
    Object obj2 = new Object();
    Object obj5 = new Object();
    Object[] carg0 = { obj2, obj5, obj2 };
    new SinglyLinkedList(carg0);
  }

  @Test
  public void testAdd15() throws Exception {
    Object obj2 = new Object();
    Object obj5 = new Object();
    Object[] carg0 = { obj2, obj5 };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object marg0 = null;
    boolean retval = cut.add(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testDelete16() throws Exception {
    Object obj2 = new Object();
    Object obj5 = new Object();
    Object[] carg0 = { obj2, obj5 };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object marg0 = null;
    boolean retval = cut.delete(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHasDuplicates7() throws Exception {
    Object obj2 = new Object();
    Object obj5 = new Object();
    Object[] carg0 = { obj2, obj5 };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    boolean retval = cut.hasDuplicates();

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHasCycle7() throws Exception {
    Object obj2 = new Object();
    Object obj5 = new Object();
    Object[] carg0 = { obj2, obj5 };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    boolean retval = cut.hasCycle();

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testReverse7() throws Exception {
    Object obj2 = new Object();
    Object obj5 = new Object();
    Object[] carg0 = { obj2, obj5 };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    cut.reverse();
  }

  @Test
  public void testInit18() throws Exception {
    Object obj2 = new Object();
    Object obj7 = new Object();
    Object[] carg0 = { obj2, null, obj7 };
    new SinglyLinkedList(carg0);
  }

  @Test
  public void testInit19() throws Exception {
    Object obj2 = new Object();
    Object obj5 = new Object();
    Object[] carg0 = { obj2, null, obj5 };
    new SinglyLinkedList(carg0);
  }

  @Test
  public void testInit20() throws Exception {
    Object obj2 = new Object();
    Object[] carg0 = { obj2, null, null };
    new SinglyLinkedList(carg0);
  }

  @Test
  public void testInit21() throws Exception {
    Object obj2 = new Object();
    Object[] carg0 = { obj2, null, obj2 };
    new SinglyLinkedList(carg0);
  }

  @Test
  public void testAdd16() throws Exception {
    Object obj2 = new Object();
    Object[] carg0 = { obj2, null };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object marg0 = null;
    boolean retval = cut.add(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testDelete17() throws Exception {
    Object obj2 = new Object();
    Object[] carg0 = { obj2, null };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object marg0 = null;
    boolean retval = cut.delete(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHasDuplicates8() throws Exception {
    Object obj2 = new Object();
    Object[] carg0 = { obj2, null };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    boolean retval = cut.hasDuplicates();

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHasCycle8() throws Exception {
    Object obj2 = new Object();
    Object[] carg0 = { obj2, null };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    boolean retval = cut.hasCycle();

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testReverse8() throws Exception {
    Object obj2 = new Object();
    Object[] carg0 = { obj2, null };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    cut.reverse();
  }

  @Test
  public void testInit22() throws Exception {
    Object obj2 = new Object();
    Object obj7 = new Object();
    Object[] carg0 = { obj2, obj2, obj7 };
    new SinglyLinkedList(carg0);
  }

  @Test
  public void testInit23() throws Exception {
    Object obj2 = new Object();
    Object obj5 = new Object();
    Object[] carg0 = { obj2, obj2, obj5 };
    new SinglyLinkedList(carg0);
  }

  @Test
  public void testInit24() throws Exception {
    Object obj2 = new Object();
    Object[] carg0 = { obj2, obj2, null };
    new SinglyLinkedList(carg0);
  }

  @Test
  public void testInit25() throws Exception {
    Object obj2 = new Object();
    Object[] carg0 = { obj2, obj2, obj2 };
    new SinglyLinkedList(carg0);
  }

  @Test
  public void testAdd17() throws Exception {
    Object obj2 = new Object();
    Object[] carg0 = { obj2, obj2 };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object marg0 = null;
    boolean retval = cut.add(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testDelete18() throws Exception {
    Object obj2 = new Object();
    Object[] carg0 = { obj2, obj2 };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object marg0 = null;
    boolean retval = cut.delete(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHasDuplicates9() throws Exception {
    Object obj2 = new Object();
    Object[] carg0 = { obj2, obj2 };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    boolean retval = cut.hasDuplicates();

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHasCycle9() throws Exception {
    Object obj2 = new Object();
    Object[] carg0 = { obj2, obj2 };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    boolean retval = cut.hasCycle();

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testReverse9() throws Exception {
    Object obj2 = new Object();
    Object[] carg0 = { obj2, obj2 };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    cut.reverse();
  }
}
