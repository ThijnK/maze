// Auto-generated by MAZE
package nl.uu.tests.maze.generated.benchmarks;

import java.lang.Exception;
import java.lang.NullPointerException;
import java.lang.Object;
import nl.uu.maze.benchmarks.SinglyLinkedList;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class SinglyLinkedListTest {
  @Test
  public void testInit1() throws Exception {
    Object[] carg0 = null;
    Assertions.assertThrows(NullPointerException.class, () -> new SinglyLinkedList(carg0));
  }

  @Test
  public void testHasDuplicates1() throws Exception {
    Object[] carg0 = {};
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    boolean retval = cut.hasDuplicates();

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testDelete1() throws Exception {
    Object[] carg0 = {};
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object marg0 = null;
    boolean retval = cut.delete(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHasCycle1() throws Exception {
    Object[] carg0 = {};
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    boolean retval = cut.hasCycle();

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testReverse1() throws Exception {
    Object[] carg0 = {};
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    cut.reverse();
  }

  @Test
  public void testAdd1() throws Exception {
    Object[] carg0 = {};
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object marg0 = null;
    boolean retval = cut.add(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAdd2() throws Exception {
    Object[] carg0 = {};
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object obj2 = new Object();
    Object marg0 = obj2;
    boolean retval = cut.add(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testDelete2() throws Exception {
    Object[] carg0 = {};
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object obj2 = new Object();
    Object marg0 = obj2;
    boolean retval = cut.delete(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testDelete3() throws Exception {
    Object[] carg0 = {};
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object obj2 = new Object();
    Object obj5_value = obj2;
    Object marg0 = obj5_value;
    boolean retval = cut.delete(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHasCycle2() throws Exception {
    Object[] carg0 = { null };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    boolean retval = cut.hasCycle();

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHasCycle3() throws Exception {
    Object obj2 = new Object();
    Object[] carg0 = { obj2 };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    boolean retval = cut.hasCycle();

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAdd3() throws Exception {
    Object[] carg0 = {};
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object obj2 = new Object();
    Object obj7_value = obj2;
    Object marg0 = obj7_value;
    boolean retval = cut.add(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHasDuplicates2() throws Exception {
    Object[] carg0 = { null };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    boolean retval = cut.hasDuplicates();

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testHasDuplicates3() throws Exception {
    Object obj2 = new Object();
    Object[] carg0 = { obj2 };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    boolean retval = cut.hasDuplicates();

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAdd4() throws Exception {
    Object[] carg0 = { null };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object marg0 = null;
    boolean retval = cut.add(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAdd5() throws Exception {
    Object obj2 = new Object();
    Object[] carg0 = { obj2 };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object marg0 = obj2;
    boolean retval = cut.add(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testReverse2() throws Exception {
    Object[] carg0 = { null };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    cut.reverse();
  }

  @Test
  public void testDelete4() throws Exception {
    Object[] carg0 = { null };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object marg0 = null;
    boolean retval = cut.delete(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testReverse3() throws Exception {
    Object obj2 = new Object();
    Object[] carg0 = { obj2 };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    cut.reverse();
  }

  @Test
  public void testDelete5() throws Exception {
    Object obj2 = new Object();
    Object[] carg0 = { obj2 };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object marg0 = obj2;
    boolean retval = cut.delete(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testDelete6() throws Exception {
    Object[] carg0 = { null };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object obj5 = new Object();
    Object marg0 = obj5;
    boolean retval = cut.delete(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testDelete7() throws Exception {
    Object[] carg0 = { null };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object obj2 = new Object();
    Object marg0 = obj2;
    boolean retval = cut.delete(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testDelete8() throws Exception {
    Object obj2 = new Object();
    Object[] carg0 = { obj2 };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object obj5 = new Object();
    Object marg0 = obj5;
    boolean retval = cut.delete(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testDelete9() throws Exception {
    Object obj2 = new Object();
    Object[] carg0 = { obj2 };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object marg0 = null;
    boolean retval = cut.delete(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAdd6() throws Exception {
    Object[] carg0 = {};
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object obj2 = new Object();
    Object obj9_value = obj2;
    Object marg0 = obj9_value;
    boolean retval = cut.add(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testDelete10() throws Exception {
    Object[] carg0 = {};
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object obj2 = new Object();
    Object obj7_value = obj2;
    Object marg0 = obj7_value;
    boolean retval = cut.delete(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAdd7() throws Exception {
    Object[] carg0 = { null };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object obj5 = new Object();
    Object marg0 = obj5;
    boolean retval = cut.add(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAdd8() throws Exception {
    Object[] carg0 = { null };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object obj2 = new Object();
    Object marg0 = obj2;
    boolean retval = cut.add(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAdd9() throws Exception {
    Object obj2 = new Object();
    Object[] carg0 = { obj2 };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object obj5 = new Object();
    Object marg0 = obj5;
    boolean retval = cut.add(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAdd10() throws Exception {
    Object obj2 = new Object();
    Object[] carg0 = { obj2 };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object marg0 = null;
    boolean retval = cut.add(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testAdd11() throws Exception {
    Object[] carg0 = {};
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object obj2 = new Object();
    Object obj11_value = obj2;
    Object marg0 = obj11_value;
    boolean retval = cut.add(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testDelete11() throws Exception {
    Object[] carg0 = { null };
    SinglyLinkedList cut = new SinglyLinkedList(carg0);

    Object obj2 = new Object();
    Object obj4_value = obj2;
    Object marg0 = obj4_value;
    boolean retval = cut.delete(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }
}
