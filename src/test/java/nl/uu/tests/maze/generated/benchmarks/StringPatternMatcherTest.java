// Auto-generated by MAZE
package nl.uu.tests.maze.generated.benchmarks;

import java.lang.Exception;
import java.lang.NullPointerException;
import nl.uu.maze.benchmarks.StringPatternMatcher;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class StringPatternMatcherTest {
  @Test
  public void testMatches1() throws Exception {
    char[] marg0 = null;
    char[] marg1 = null;
    Assertions.assertThrows(NullPointerException.class, () -> StringPatternMatcher.matches(marg0, marg1));
  }

  @Test
  public void testMatches2() throws Exception {
    char[] marg0 = {};
    char[] marg1 = null;
    Assertions.assertThrows(NullPointerException.class, () -> StringPatternMatcher.matches(marg0, marg1));
  }

  @Test
  public void testMatches3() throws Exception {
    char[] marg0 = null;
    char[] marg1 = {};
    Assertions.assertThrows(NullPointerException.class, () -> StringPatternMatcher.matches(marg0, marg1));
  }

  @Test
  public void testMatches4() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = {};
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches5() throws Exception {
    char[] marg0 = {};
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches6() throws Exception {
    char[] marg0 = {};
    char[] marg1 = {};
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches7() throws Exception {
    char[] marg0 = null;
    char[] marg1 = { '$' };
    Assertions.assertThrows(NullPointerException.class, () -> StringPatternMatcher.matches(marg0, marg1));
  }

  @Test
  public void testMatches8() throws Exception {
    char[] marg0 = null;
    char[] marg1 = { 'ﾡ', 'ﾡ' };
    Assertions.assertThrows(NullPointerException.class, () -> StringPatternMatcher.matches(marg0, marg1));
  }

  @Test
  public void testMatches9() throws Exception {
    char[] marg0 = null;
    char[] marg1 = { '^' };
    Assertions.assertThrows(NullPointerException.class, () -> StringPatternMatcher.matches(marg0, marg1));
  }

  @Test
  public void testMatches10() throws Exception {
    char[] marg0 = { '$' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches11() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '$' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches12() throws Exception {
    char[] marg0 = null;
    char[] marg1 = { '\u0000' };
    Assertions.assertThrows(NullPointerException.class, () -> StringPatternMatcher.matches(marg0, marg1));
  }

  @Test
  public void testMatches13() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '$' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches14() throws Exception {
    char[] marg0 = { '^' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches15() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches16() throws Exception {
    char[] marg0 = null;
    char[] marg1 = { '^', '$' };
    Assertions.assertThrows(NullPointerException.class, () -> StringPatternMatcher.matches(marg0, marg1));
  }

  @Test
  public void testMatches17() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches18() throws Exception {
    char[] marg0 = null;
    char[] marg1 = { '^', '^', '^' };
    Assertions.assertThrows(NullPointerException.class, () -> StringPatternMatcher.matches(marg0, marg1));
  }

  @Test
  public void testMatches19() throws Exception {
    char[] marg0 = null;
    char[] marg1 = { '^', '\u0000' };
    Assertions.assertThrows(NullPointerException.class, () -> StringPatternMatcher.matches(marg0, marg1));
  }

  @Test
  public void testMatches20() throws Exception {
    char[] marg0 = { '^', '$' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches21() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '$' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches22() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '$' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches23() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches24() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '\\', '\\' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches25() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '\\' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches26() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '\\', '\\', '\\' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches27() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches28() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches29() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches30() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches31() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches32() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '\u0000', '{' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches33() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches34() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches35() throws Exception {
    char[] marg0 = { '￿' };
    char[] marg1 = { '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches36() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches37() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches38() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '\\', '^' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches39() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '\\' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches40() throws Exception {
    char[] marg0 = { '\\', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches41() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches42() throws Exception {
    char[] marg0 = { 'ﾣ' };
    char[] marg1 = { '\\', '\\' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches43() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', ']', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches44() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '\\', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches45() throws Exception {
    char[] marg0 = { '\\', '\u0000', '\\' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches46() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '\u0000', '{', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches47() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', ']', '\u0000', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches48() throws Exception {
    char[] marg0 = { 'ﾣ' };
    char[] marg1 = { '\\', '\\', '\\' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches49() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches50() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches51() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches52() throws Exception {
    char[] marg0 = { '￿' };
    char[] marg1 = { '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches53() throws Exception {
    char[] marg0 = { 'ﾣ' };
    char[] marg1 = { '\\' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches54() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '^' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches55() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches56() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches57() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', '\u0000', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches58() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '^', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches59() throws Exception {
    char[] marg0 = { '[' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches60() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', ']', '{' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches61() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', '\u0000', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches62() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '[' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches63() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches64() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', ']', '{' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches65() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '\u0000', '{' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches66() throws Exception {
    char[] marg0 = { '^', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches67() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '\u0000', '{', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches68() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches69() throws Exception {
    char[] marg0 = { '￿' };
    char[] marg1 = { '\u0000', '{' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches70() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    char[] marg1 = { '.' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches71() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches72() throws Exception {
    char[] marg0 = { '￿' };
    char[] marg1 = { '^', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches73() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '\u0000', '+' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches74() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches75() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '^', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches76() throws Exception {
    char[] marg0 = { '.' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches77() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches78() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '.' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches79() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '\u0000', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches80() throws Exception {
    char[] marg0 = { '[', '^' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches81() throws Exception {
    char[] marg0 = { '^', '\\', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches82() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', '\u0000', '\u0000', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches83() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '[', '^' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches84() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    char[] marg1 = { '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches85() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '^', '\u0000', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches86() throws Exception {
    char[] marg0 = { 'ﾡ' };
    char[] marg1 = { '^', '\\', '^' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches87() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', ']', '{', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches88() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', ']', '{' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches89() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', '\u0000', '\u0000', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches90() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', ']', '\u0000', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches91() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches92() throws Exception {
    char[] marg0 = { '^', '\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches93() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches94() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', ']', '{', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches95() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', ']', '{' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches96() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches97() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '\u0000', '{', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches98() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '^', ']', '\u0000', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches99() throws Exception {
    char[] marg0 = { 'ﾡ' };
    char[] marg1 = { '^', '\\', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches100() throws Exception {
    char[] marg0 = { '\\', '\\' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches101() throws Exception {
    char[] marg0 = { '^', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches102() throws Exception {
    char[] marg0 = { '^', '\\' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches103() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '\u0000', '{', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches104() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches105() throws Exception {
    char[] marg0 = { '￿' };
    char[] marg1 = { '\u0000', '{', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches106() throws Exception {
    char[] marg0 = { '\\', '\\' };
    char[] marg1 = { '\\', '\\' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches107() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches108() throws Exception {
    char[] marg0 = { '￿' };
    char[] marg1 = { '^', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches109() throws Exception {
    char[] marg0 = { 'ﾣ' };
    char[] marg1 = { '^', '\\' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches110() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches111() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '^', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches112() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches113() throws Exception {
    char[] marg0 = { '\\' };
    char[] marg1 = { '\\', '\\' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches114() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '\u0000', '\u0000', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches115() throws Exception {
    char[] marg0 = { '^', '[' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches116() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', '\u0000', '\u0000', '\u0000', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches117() throws Exception {
    char[] marg0 = { '\\', '\\' };
    char[] marg1 = { '\\' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches118() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', ']', '{' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches119() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '^', '\u0000', '\u0000', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches120() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '[' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches121() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', ']', '{', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches122() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', ']', '{', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches123() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', '\u0000', ']', '{' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches124() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', '\u0000', '\u0000', '\u0000', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches125() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches126() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '^', ']', '{' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches127() throws Exception {
    char[] marg0 = { '\\' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches128() throws Exception {
    char[] marg0 = { '^', '\u0000', '{' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches129() throws Exception {
    char[] marg0 = { '^', '.' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches130() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', ']', '+' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches131() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches132() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', ']', '{', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches133() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', ']', '{', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches134() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', '\u0000', ']', '{' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches135() throws Exception {
    char[] marg0 = { '\\' };
    char[] marg1 = { '\\' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches136() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '\u0000', '{', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches137() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '^', '\u0000', ']', '\u0000', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches138() throws Exception {
    char[] marg0 = { '￿' };
    char[] marg1 = { '^', '\u0000', '{' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches139() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    char[] marg1 = { '^', '.' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches140() throws Exception {
    char[] marg0 = { '.', '$' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches141() throws Exception {
    char[] marg0 = { '[', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches142() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches143() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', ']', '+', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches144() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches145() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    char[] marg1 = { '.', '$' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches146() throws Exception {
    char[] marg0 = { '￿' };
    char[] marg1 = { '\u0000', '{', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches147() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '[', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches148() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '\u0000', '+' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches149() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches150() throws Exception {
    char[] marg0 = { '[', ']' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches151() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches152() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '[', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches153() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '^', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches154() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '.' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches155() throws Exception {
    char[] marg0 = { '\\', '\\', '$' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches156() throws Exception {
    char[] marg0 = { '^', '[', '^' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches157() throws Exception {
    char[] marg0 = { '^', '^' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches158() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches159() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '.', '$' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches160() throws Exception {
    char[] marg0 = { '$', '$' };
    char[] marg1 = { '\\', '$', '$' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches161() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '\u0000', '\u0000', '\u0000', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches162() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '[', '^' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches163() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    char[] marg1 = { '^', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches164() throws Exception {
    char[] marg0 = { '\u0000', '$' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches165() throws Exception {
    char[] marg0 = { '[', '^', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches166() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches167() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '$' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches168() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '[', '^', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches169() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', ']', '{', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches170() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '\u0000', ']', '{' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches171() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '^', '\u0000', '\u0000', '\u0000', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches172() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', ']', '{', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches173() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', ']', '{', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches174() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', '\u0000', ']', '{', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches175() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', '\u0000', '\u0000', ']', '{' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches176() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches177() throws Exception {
    char[] marg0 = { '$' };
    char[] marg1 = { '\\', '$', '$' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches178() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches179() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '^', ']', '{', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches180() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '^', '\u0000', ']', '{' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches181() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches182() throws Exception {
    char[] marg0 = { '^', '\u0000', '{', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches183() throws Exception {
    char[] marg0 = { '^', '\\', '^' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches184() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', ']', '+', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches185() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', '\u0000', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches186() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', ']', '{', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches187() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', ']', '{', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches188() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', '\u0000', ']', '{', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches189() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', '\u0000', '\u0000', ']', '{' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches190() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '\u0000', '$' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches191() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '\u0000', '{', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches192() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '^', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches193() throws Exception {
    char[] marg0 = { '￿' };
    char[] marg1 = { '^', '\u0000', '{', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches194() throws Exception {
    char[] marg0 = { '^', '^' };
    char[] marg1 = { '^', '\\', '^' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches195() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches196() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '\u0000', '*' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches197() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', '\u0000', '\u0000', ']', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches198() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', '\u0000', '\u0000', ']', '?', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches199() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', '\u0000', '\u0000', ']', '+', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches200() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', '\u0000', '\u0000', ']', '*', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches201() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', '\u0000', '\u0000', '\u0000', ']', '{' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches202() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', '\u0000', '\u0000', '\u0000', ']', '{', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches203() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', '\u0000', '\u0000', '\u0000', ']', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches204() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', '\u0000', '\u0000', '\u0000', ']', '?', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches205() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', '\u0000', '\u0000', '\u0000', ']', '+', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches206() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', '\u0000', '\u0000', '\u0000', ']', '*', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches207() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches208() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ']', '?', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches209() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ']', '+', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches210() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ']', '*', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches211() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches212() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches213() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches214() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches215() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches216() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', ']', '{', '}', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches217() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', ']', '{', '\u0000', '}', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches218() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', ']', '{', ',', '}', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches219() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', ']', '{', '\u0000', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches220() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', ']', '{', ',', '\u0000', '}', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches221() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', ']', '{', '\u0000', '\u0000', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches222() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', ']', '{', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches223() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', ']', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches224() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', ']', '?', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches225() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', ']', '*', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches226() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', ']', '{', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches227() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', ']', '{', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches228() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', ']', '{', ',', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches229() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', ']', '{', '\u0000', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches230() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', ']', '{', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches231() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', ']', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches232() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', ']', '?', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches233() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', ']', '+', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches234() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', ']', '*', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches235() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', '\u0000', ']', '{', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches236() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', '\u0000', ']', '{', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches237() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', '\u0000', ']', '{', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches238() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', '\u0000', ']', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches239() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', '\u0000', ']', '?', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches240() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', '\u0000', ']', '+', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches241() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', '\u0000', ']', '*', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches242() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', '\u0000', '\u0000', ']', '{', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches243() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', '\u0000', '\u0000', ']', '{', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches244() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', '\u0000', '\u0000', ']', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches245() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', '\u0000', '\u0000', ']', '?', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches246() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', '\u0000', '\u0000', ']', '+', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches247() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', '\u0000', '\u0000', ']', '*', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches248() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', '\u0000', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches249() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', '\u0000', '\u0000', '\u0000', ']', '{' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches250() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', '\u0000', '\u0000', '\u0000', ']', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches251() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', '\u0000', '\u0000', '\u0000', ']', '?', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches252() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', '\u0000', '\u0000', '\u0000', ']', '+', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches253() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', '\u0000', '\u0000', '\u0000', ']', '*', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches254() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches255() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ']', '+', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches256() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ']', '*', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches257() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches258() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches259() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches260() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches261() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '.', '\u0000', '.' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches262() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '.', '[', '.' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches263() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '.', '\\', '.' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches264() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    char[] marg1 = { '.', '.', '.' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches265() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    char[] marg1 = { '.', '\u0000', '.' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches266() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    char[] marg1 = { '.', '[', '.' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches267() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    char[] marg1 = { '.', '\\', '.' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches268() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '.', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches269() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '.', '\\' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches270() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    char[] marg1 = { '.', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches271() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    char[] marg1 = { '.', '[' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches272() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    char[] marg1 = { '.', '\\' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches273() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '.', '{' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches274() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    char[] marg1 = { '.', '{' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches275() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '.', '{', '}' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches276() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '.', '{', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches277() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '.', '{', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches278() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '.', '{', ',', '}', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches279() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '.', '{', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches280() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '.', '{', '\u0000', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches281() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '.', '{', ',', '\u0000', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches282() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '.', '{', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches283() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '.', '{', '\u0000', '\u0000', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches284() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '.', '{', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches285() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '.', '{', '\u0000', '\u0000', '\u0000', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches286() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '.', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches287() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '.', '?' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches288() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '.', '+' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches289() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '.', '*' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches290() throws Exception {
    char[] marg0 = { '￿' };
    char[] marg1 = { '\u0000', '{', '}' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches291() throws Exception {
    char[] marg0 = { '￿' };
    char[] marg1 = { '\u0000', '{', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches292() throws Exception {
    char[] marg0 = { '￿' };
    char[] marg1 = { '\u0000', '{', ',', '}', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches293() throws Exception {
    char[] marg0 = { '￿' };
    char[] marg1 = { '\u0000', '{', '\u0000', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches294() throws Exception {
    char[] marg0 = { '￿' };
    char[] marg1 = { '\u0000', '{', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches295() throws Exception {
    char[] marg0 = { '￿' };
    char[] marg1 = { '\u0000', '{', '\u0000', '\u0000', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches296() throws Exception {
    char[] marg0 = { '￿' };
    char[] marg1 = { '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches297() throws Exception {
    char[] marg0 = { '￿' };
    char[] marg1 = { '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches298() throws Exception {
    char[] marg0 = { '￿' };
    char[] marg1 = { '\u0000', '?' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches299() throws Exception {
    char[] marg0 = { '￿' };
    char[] marg1 = { '\u0000', '+' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches300() throws Exception {
    char[] marg0 = { '￿' };
    char[] marg1 = { '\u0000', '*' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches301() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches302() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '\u0000', '\\', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches303() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches304() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '[', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches305() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\\', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches306() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches307() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '\u0000', '\\' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches308() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches309() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\\' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches310() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '\u0000', '{' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches311() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '\u0000', '{', '}' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches312() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '\u0000', '{', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches313() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '\u0000', '{', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches314() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '\u0000', '{', ',', '}', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches315() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '\u0000', '{', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches316() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '\u0000', '{', '\u0000', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches317() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '\u0000', '{', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches318() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '\u0000', '{', '\u0000', '\u0000', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches319() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches320() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '\u0000', '?' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches321() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '\u0000', '+' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches322() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '\u0000', '*' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches323() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '[', ']', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches324() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '[', ']', '{' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches325() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '[', ']', '?' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches326() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '[', ']', '+' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches327() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '[', ']', '*' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches328() throws Exception {
    char[] marg0 = { '￿' };
    char[] marg1 = { '[', '\u0000', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches329() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '[', '\u0000', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches330() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '[', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches331() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '[', '\u0000', '\u0001', ']', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches332() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '[', '\u0001', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches333() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '[', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches334() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '[', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches335() throws Exception {
    char[] marg0 = { '￿' };
    char[] marg1 = { '[', '\u0000', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches336() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '[', '\u0000', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches337() throws Exception {
    char[] marg0 = { '￿' };
    char[] marg1 = { '[', '\u0000', '-', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches338() throws Exception {
    char[] marg0 = { '\u0001' };
    char[] marg1 = { '[', '\u0002', '-', '\u0000', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches339() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '[', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches340() throws Exception {
    char[] marg0 = { '￿' };
    char[] marg1 = { '[', '\u0000', '\u0000', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches341() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '[', '\u0000', '\u0000', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches342() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '[', '\u0000', '-', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches343() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches344() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches345() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches346() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches347() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches348() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches349() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '[', '^', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches350() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '[', '^', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches351() throws Exception {
    char[] marg0 = { '￿' };
    char[] marg1 = { '[', '^', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches352() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '[', '^', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches353() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '[', '^', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches354() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '[', '^', '\u0001', '\u0001', ']', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches355() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '[', '^', '\u0001', '\u0000', ']', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches356() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '[', '^', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches357() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '[', '^', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches358() throws Exception {
    char[] marg0 = { '￿' };
    char[] marg1 = { '[', '^', '\u0000', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches359() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '[', '^', '\u0000', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches360() throws Exception {
    char[] marg0 = { '￿' };
    char[] marg1 = { '[', '^', '\u0000', '-', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches361() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '[', '^', '\u0000', '-', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches362() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '[', '^', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches363() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '[', '^', '\u0000', '\u0000', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches364() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '[', '^', '\u0000', '-', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches365() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '[', '^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches366() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '[', '^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches367() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '[', '^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches368() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '[', '^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches369() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '[', '^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches370() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches371() throws Exception {
    char[] marg0 = { '\\' };
    char[] marg1 = { '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches372() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    char[] marg1 = { '\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches373() throws Exception {
    char[] marg0 = { '[', '[' };
    char[] marg1 = { '\\', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches374() throws Exception {
    char[] marg0 = { '\\', '\\' };
    char[] marg1 = { '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches375() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '\\', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches376() throws Exception {
    char[] marg0 = { '\\' };
    char[] marg1 = { '\\', '\\', '\\' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches377() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    char[] marg1 = { '\\', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches378() throws Exception {
    char[] marg0 = { '\\', '\\' };
    char[] marg1 = { '\\', '\\', '\\' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches379() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '\u0000', '{', '}', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches380() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '\u0000', '{', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches381() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '\u0000', '{', ',', '}', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches382() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '\u0000', '{', '\u0000', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches383() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '\u0000', '{', ',', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches384() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '\u0000', '{', '\u0000', '\u0000', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches385() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches386() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches387() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches388() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '\u0000', '?' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches389() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '\u0000', '*' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches390() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', ']', '{', '}', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches391() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', ']', '{', '\u0000', '}', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches392() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', ']', '{', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches393() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', ']', '{', '\u0000', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches394() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', ']', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches395() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', ']', '?', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches396() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', ']', '+', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches397() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', ']', '*', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches398() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '\u0000', ']', '{', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches399() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '\u0000', ']', '{', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches400() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '\u0000', ']', '{', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches401() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '\u0000', ']', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches402() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '\u0000', ']', '?', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches403() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '\u0000', ']', '+', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches404() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '\u0000', ']', '*', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches405() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '\u0000', '\u0000', ']', '{' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches406() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '\u0000', '\u0000', ']', '{', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches407() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '\u0000', '\u0000', ']', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches408() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '\u0000', '\u0000', ']', '?', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches409() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '\u0000', '\u0000', ']', '+', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches410() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '\u0000', '\u0000', ']', '*', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches411() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '\u0000', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches412() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '\u0000', '\u0000', '\u0000', ']', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches413() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '\u0000', '\u0000', '\u0000', ']', '?', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches414() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '\u0000', '\u0000', '\u0000', ']', '+', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches415() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '\u0000', '\u0000', '\u0000', ']', '*', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches416() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches417() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '\u0000', '\u0000', '\u0000', '\u0000', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches418() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '\u0000', '\u0000', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches419() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches420() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches421() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches422() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '^', ']', '{', '}', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches423() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '^', ']', '{', '\u0000', '}', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches424() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '^', ']', '{', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches425() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '^', ']', '{', '\u0000', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches426() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '^', ']', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches427() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '^', ']', '?', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches428() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '^', ']', '+', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches429() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '^', ']', '*', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches430() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '^', '\u0000', ']', '{', '}', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches431() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '^', '\u0000', ']', '{', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches432() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '^', '\u0000', ']', '{', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches433() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '^', '\u0000', ']', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches434() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '^', '\u0000', ']', '?', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches435() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '^', '\u0000', ']', '+', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches436() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '^', '\u0000', ']', '*', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches437() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '^', '\u0000', '\u0000', ']', '{' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches438() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '^', '\u0000', '\u0000', ']', '{', '}', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches439() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '^', '\u0000', '\u0000', ']', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches440() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '^', '\u0000', '\u0000', ']', '?', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches441() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '^', '\u0000', '\u0000', ']', '+', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches442() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '^', '\u0000', '\u0000', ']', '*', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches443() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '^', '\u0000', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches444() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '^', '\u0000', '\u0000', '\u0000', ']', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches445() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '^', '\u0000', '\u0000', '\u0000', ']', '?', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches446() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '^', '\u0000', '\u0000', '\u0000', ']', '+', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches447() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '^', '\u0000', '\u0000', '\u0000', ']', '*', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches448() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '^', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches449() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '^', '\u0000', '\u0000', '\u0000', '\u0000', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches450() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '^', '\u0000', '\u0000', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches451() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches452() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '^', '[', '^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches453() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '.', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches454() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '.', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches455() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    char[] marg1 = { '^', '.', '$' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches456() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '.', '$' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches457() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '.', '{' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches458() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '.', '{', '}', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches459() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '.', '{', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches460() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '.', '{', '\u0000', '}', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches461() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '.', '{', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches462() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '.', '{', '\u0000', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches463() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '.', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches464() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '.', '?' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches465() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '.', '+' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches466() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '.', '*' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches467() throws Exception {
    char[] marg0 = { '￿' };
    char[] marg1 = { '^', '\u0000', '{', '}', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches468() throws Exception {
    char[] marg0 = { '￿' };
    char[] marg1 = { '^', '\u0000', '{', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches469() throws Exception {
    char[] marg0 = { '￿' };
    char[] marg1 = { '^', '\u0000', '{', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches470() throws Exception {
    char[] marg0 = { '￿' };
    char[] marg1 = { '^', '\u0000', '{', '\u0000', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches471() throws Exception {
    char[] marg0 = { '￿' };
    char[] marg1 = { '^', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches472() throws Exception {
    char[] marg0 = { '￿' };
    char[] marg1 = { '^', '\u0000', '?' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches473() throws Exception {
    char[] marg0 = { '￿' };
    char[] marg1 = { '^', '\u0000', '+' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches474() throws Exception {
    char[] marg0 = { '￿' };
    char[] marg1 = { '^', '\u0000', '*' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches475() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches476() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches477() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '\u0000', '$' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches478() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '\u0000', '{' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches479() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '\u0000', '{', '}', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches480() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '\u0000', '{', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches481() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '\u0000', '{', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches482() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '\u0000', '{', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches483() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches484() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '\u0000', '?' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches485() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '\u0000', '+' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches486() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '\u0000', '*' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches487() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '[', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches488() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '[', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches489() throws Exception {
    char[] marg0 = { '￿' };
    char[] marg1 = { '^', '[', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches490() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '[', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches491() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '[', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches492() throws Exception {
    char[] marg0 = { '￿' };
    char[] marg1 = { '^', '[', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches493() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '[', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches494() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '[', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches495() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '[', '\u0000', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches496() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '[', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches497() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '[', '\u0000', '\u0000', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches498() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches499() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches500() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches501() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '[', '^', ']', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches502() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '[', '^', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches503() throws Exception {
    char[] marg0 = { '￿' };
    char[] marg1 = { '^', '[', '^', '\u0000', ']', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches504() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '[', '^', '\u0000', ']', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches505() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '[', '^', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches506() throws Exception {
    char[] marg0 = { '￿' };
    char[] marg1 = { '^', '[', '^', '\u0000', '\u0000', ']', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches507() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '[', '^', '\u0000', '\u0000', ']', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches508() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '[', '^', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches509() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '[', '^', '\u0000', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches510() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '[', '^', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches511() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '[', '^', '\u0000', '\u0000', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches512() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '[', '^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches513() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '^', '[', '^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches514() throws Exception {
    char[] marg0 = { '^' };
    char[] marg1 = { '^', '\\', '^' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches515() throws Exception {
    char[] marg0 = { '^' };
    char[] marg1 = { '^', '\\', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches516() throws Exception {
    char[] marg0 = { '^' };
    char[] marg1 = { '^', '\\', '^', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches517() throws Exception {
    char[] marg0 = { '^', '^' };
    char[] marg1 = { '^', '\\', '^', '$' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches518() throws Exception {
    char[] marg0 = { '^' };
    char[] marg1 = { '^', '\\', '^', '$' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches519() throws Exception {
    char[] marg0 = { '\\', '\\' };
    char[] marg1 = { '^', '\\' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches520() throws Exception {
    char[] marg0 = { '\\' };
    char[] marg1 = { '^', '\\' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches521() throws Exception {
    char[] marg0 = { '.', '.', '.' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches522() throws Exception {
    char[] marg0 = { '.', '\u0000', '.' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches523() throws Exception {
    char[] marg0 = { '.', '[', '.' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches524() throws Exception {
    char[] marg0 = { '.', '\\', '.' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches525() throws Exception {
    char[] marg0 = { '.', '.' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches526() throws Exception {
    char[] marg0 = { '.', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches527() throws Exception {
    char[] marg0 = { '.', '[' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches528() throws Exception {
    char[] marg0 = { '.', '\\' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches529() throws Exception {
    char[] marg0 = { '.', '{' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches530() throws Exception {
    char[] marg0 = { '.', '{', '}' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches531() throws Exception {
    char[] marg0 = { '.', '{', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches532() throws Exception {
    char[] marg0 = { '.', '{', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches533() throws Exception {
    char[] marg0 = { '.', '{', ',', '}', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches534() throws Exception {
    char[] marg0 = { '.', '{', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches535() throws Exception {
    char[] marg0 = { '.', '{', '\u0000', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches536() throws Exception {
    char[] marg0 = { '.', '{', ',', '\u0000', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}', '}' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches537() throws Exception {
    char[] marg0 = { '.', '{', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches538() throws Exception {
    char[] marg0 = { '.', '{', '\u0000', '\u0000', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches539() throws Exception {
    char[] marg0 = { '.', '{', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches540() throws Exception {
    char[] marg0 = { '.', '{', '\u0000', '\u0000', '\u0000', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches541() throws Exception {
    char[] marg0 = { '.', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches542() throws Exception {
    char[] marg0 = { '.', '?' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches543() throws Exception {
    char[] marg0 = { '.', '+' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches544() throws Exception {
    char[] marg0 = { '.', '*' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches545() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches546() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches547() throws Exception {
    char[] marg0 = { '\u0000', '\\', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches548() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches549() throws Exception {
    char[] marg0 = { '\u0000', '\\' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches550() throws Exception {
    char[] marg0 = { '\u0000', '{' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches551() throws Exception {
    char[] marg0 = { '\u0000', '{', '}' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches552() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches553() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches554() throws Exception {
    char[] marg0 = { '\u0000', '{', ',', '}', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches555() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches556() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches557() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches558() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', '\u0000', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches559() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches560() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches561() throws Exception {
    char[] marg0 = { '\u0000', '?' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches562() throws Exception {
    char[] marg0 = { '\u0000', '+' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches563() throws Exception {
    char[] marg0 = { '\u0000', '*' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches564() throws Exception {
    char[] marg0 = { '[', ']', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches565() throws Exception {
    char[] marg0 = { '[', ']', '{' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches566() throws Exception {
    char[] marg0 = { '[', ']', '?' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches567() throws Exception {
    char[] marg0 = { '[', ']', '+' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches568() throws Exception {
    char[] marg0 = { '[', ']', '*' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches569() throws Exception {
    char[] marg0 = { '[', '\u0000', ']' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches570() throws Exception {
    char[] marg0 = { '[', '[', ']' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches571() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches572() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches573() throws Exception {
    char[] marg0 = { '[', '\u0000', '[', ']', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches574() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', ']', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches575() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches576() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches577() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches578() throws Exception {
    char[] marg0 = { '[', '\\', '-', '\u0000', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches579() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches580() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches581() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches582() throws Exception {
    char[] marg0 = { '[', '\u0000', '-', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches583() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches584() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches585() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches586() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches587() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches588() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches589() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches590() throws Exception {
    char[] marg0 = { '[', '^', ']' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches591() throws Exception {
    char[] marg0 = { '[', '^', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches592() throws Exception {
    char[] marg0 = { '[', '^', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches593() throws Exception {
    char[] marg0 = { '[', '^', '[', ']', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches594() throws Exception {
    char[] marg0 = { '[', '^', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches595() throws Exception {
    char[] marg0 = { '[', '^', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches596() throws Exception {
    char[] marg0 = { '[', '^', '\u0000', '[', ']', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches597() throws Exception {
    char[] marg0 = { '[', '^', '[', '\u0000', ']', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches598() throws Exception {
    char[] marg0 = { '[', '^', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches599() throws Exception {
    char[] marg0 = { '[', '^', '\u0000', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches600() throws Exception {
    char[] marg0 = { '[', '^', '[', '\u0000', '\u0000', ']', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches601() throws Exception {
    char[] marg0 = { '[', '^', '\\', '-', '\u0000', ']', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches602() throws Exception {
    char[] marg0 = { '[', '^', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches603() throws Exception {
    char[] marg0 = { '[', '^', '\u0000', '\u0000', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches604() throws Exception {
    char[] marg0 = { '[', '^', '\u0000', '-', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches605() throws Exception {
    char[] marg0 = { '[', '^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches606() throws Exception {
    char[] marg0 = { '[', '^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches607() throws Exception {
    char[] marg0 = { '[', '^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches608() throws Exception {
    char[] marg0 = { '[', '^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches609() throws Exception {
    char[] marg0 = { '[', '^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches610() throws Exception {
    char[] marg0 = { '[', '^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches611() throws Exception {
    char[] marg0 = { '\\', '\\', '.', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches612() throws Exception {
    char[] marg0 = { '\\', '\\', '\u0000', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches613() throws Exception {
    char[] marg0 = { '\\', '\\', '[', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches614() throws Exception {
    char[] marg0 = { '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches615() throws Exception {
    char[] marg0 = { '\\', '\\', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches616() throws Exception {
    char[] marg0 = { '\\', '\\', '[' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches617() throws Exception {
    char[] marg0 = { '\\', '\\', '\\' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches618() throws Exception {
    char[] marg0 = { '^', '.', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches619() throws Exception {
    char[] marg0 = { '^', '.', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches620() throws Exception {
    char[] marg0 = { '^', '.', '$' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches621() throws Exception {
    char[] marg0 = { '^', '.', '{' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches622() throws Exception {
    char[] marg0 = { '^', '.', '{', '}', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches623() throws Exception {
    char[] marg0 = { '^', '.', '{', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches624() throws Exception {
    char[] marg0 = { '^', '.', '{', '\u0000', '}', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches625() throws Exception {
    char[] marg0 = { '^', '.', '{', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches626() throws Exception {
    char[] marg0 = { '^', '.', '{', '\u0000', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches627() throws Exception {
    char[] marg0 = { '^', '.', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches628() throws Exception {
    char[] marg0 = { '^', '.', '?' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches629() throws Exception {
    char[] marg0 = { '^', '.', '+' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches630() throws Exception {
    char[] marg0 = { '^', '.', '*' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches631() throws Exception {
    char[] marg0 = { '^', '\u0000', '{', '}', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches632() throws Exception {
    char[] marg0 = { '^', '\u0000', '{', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches633() throws Exception {
    char[] marg0 = { '^', '\u0000', '{', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches634() throws Exception {
    char[] marg0 = { '^', '\u0000', '{', '\u0000', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches635() throws Exception {
    char[] marg0 = { '^', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches636() throws Exception {
    char[] marg0 = { '^', '\u0000', '?' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches637() throws Exception {
    char[] marg0 = { '^', '\u0000', '+' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches638() throws Exception {
    char[] marg0 = { '^', '\u0000', '*' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches639() throws Exception {
    char[] marg0 = { '^', '^', '\u0000', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches640() throws Exception {
    char[] marg0 = { '^', '^', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches641() throws Exception {
    char[] marg0 = { '^', '^', '$' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches642() throws Exception {
    char[] marg0 = { '^', '^', '{' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches643() throws Exception {
    char[] marg0 = { '^', '^', '{', '}', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches644() throws Exception {
    char[] marg0 = { '^', '^', '{', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches645() throws Exception {
    char[] marg0 = { '^', '^', '{', '\u0000', '}', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches646() throws Exception {
    char[] marg0 = { '^', '^', '{', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches647() throws Exception {
    char[] marg0 = { '^', '^', '{', '\u0000', '\u0000', '}', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches648() throws Exception {
    char[] marg0 = { '^', '^', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches649() throws Exception {
    char[] marg0 = { '^', '^', '?' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches650() throws Exception {
    char[] marg0 = { '^', '^', '+' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches651() throws Exception {
    char[] marg0 = { '^', '^', '*' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches652() throws Exception {
    char[] marg0 = { '^', '[', ']' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches653() throws Exception {
    char[] marg0 = { '^', '[', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches654() throws Exception {
    char[] marg0 = { '^', '[', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches655() throws Exception {
    char[] marg0 = { '^', '[', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches656() throws Exception {
    char[] marg0 = { '^', '[', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches657() throws Exception {
    char[] marg0 = { '^', '[', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches658() throws Exception {
    char[] marg0 = { '^', '[', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches659() throws Exception {
    char[] marg0 = { '^', '[', '\u0000', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches660() throws Exception {
    char[] marg0 = { '^', '[', '\u0000', '-', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches661() throws Exception {
    char[] marg0 = { '^', '[', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches662() throws Exception {
    char[] marg0 = { '^', '[', '\u0000', '\u0000', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches663() throws Exception {
    char[] marg0 = { '^', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches664() throws Exception {
    char[] marg0 = { '^', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches665() throws Exception {
    char[] marg0 = { '^', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches666() throws Exception {
    char[] marg0 = { '^', '[', '^', ']', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches667() throws Exception {
    char[] marg0 = { '^', '[', '^', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches668() throws Exception {
    char[] marg0 = { '^', '[', '^', '\u0000', ']', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches669() throws Exception {
    char[] marg0 = { '^', '[', '^', '^', ']', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches670() throws Exception {
    char[] marg0 = { '^', '[', '^', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches671() throws Exception {
    char[] marg0 = { '^', '[', '^', '\u0000', '\u0000', ']', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches672() throws Exception {
    char[] marg0 = { '^', '[', '^', '^', '\u0000', ']', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches673() throws Exception {
    char[] marg0 = { '^', '[', '^', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches674() throws Exception {
    char[] marg0 = { '^', '[', '^', '\u0000', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches675() throws Exception {
    char[] marg0 = { '^', '[', '^', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches676() throws Exception {
    char[] marg0 = { '^', '[', '^', '\u0000', '\u0000', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches677() throws Exception {
    char[] marg0 = { '^', '[', '^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches678() throws Exception {
    char[] marg0 = { '^', '[', '^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ']', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches679() throws Exception {
    char[] marg0 = { '^', '[', '^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches680() throws Exception {
    char[] marg0 = { '^', '\\', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^', '^' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches681() throws Exception {
    char[] marg0 = { '^', '\\', '^', '\u0000' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches682() throws Exception {
    char[] marg0 = { '^', '\\', '^', '$' };
    char[] marg1 = marg0;
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches683() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '\u0000', '{', '}' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches684() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '\u0000', '{', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches685() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '\u0000', '{', ':', '}', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches686() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '\u0000', '{', '2', '}', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches687() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '\u0000', '{', '-', '}', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches688() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '\u0000', '{', ',', '}', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',', ',' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches689() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '\u0000', '{', '\u0000', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches690() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '\u0000', '{', '\u0000', ',', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches691() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '\u0000', '{', ',', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches692() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '\u0000', '{', '\u0000', '\u0000', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches693() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '\u0000', '{', '\u0000', ',', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches694() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '\u0000', '{', ',', '\u0000', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches695() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches696() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '\u0000', '{', ',', '\u0000', '\u0000', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches697() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches698() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches699() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches700() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '\u0000', '?', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches701() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '\u0000', '?', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches702() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '\u0000', '?', '$' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches703() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '\u0000', '?' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches704() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '\u0000', '*', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches705() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '\u0000', '*', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches706() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '\u0000', '*', '$' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches707() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', ']', '{', '}', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches708() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', ']', '{', '\u0000', '}', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches709() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', ']', '{', ',', '}', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches710() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', ']', '{', '\u0000', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches711() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', ']', '{', ',', '\u0000', '}', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches712() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', ']', '{', '\u0000', '\u0000', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches713() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', ']', '{', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches714() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', ']', '{', '\u0000', '\u0000', '\u0000', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches715() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', ']', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches716() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', ']', '?' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches717() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', ']', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches718() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', ']', '*' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches719() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', ']', '{', '}', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches720() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', ']', '{', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches721() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', ']', '{', ',', '}', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches722() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', ']', '{', '\u0000', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches723() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', ']', '{', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches724() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', ']', '{', '\u0000', '\u0000', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches725() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', ']', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches726() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', ']', '?', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches727() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', ']', '*', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']', ']' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches728() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', '\u0000', ']', '{', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches729() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', '\u0000', ']', '{', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches730() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', '\u0000', ']', '{', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches731() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', '\u0000', ']', '{', '\u0000', '\u0000', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches732() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', '\u0000', ']', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches733() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', '\u0000', ']', '?', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches734() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', '\u0000', ']', '+', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches735() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', '\u0000', ']', '*', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches736() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', '\u0000', '\u0000', ']', '{', '}', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testMatches737() throws Exception {
    char[] marg0 = {};
    char[] marg1 = { '[', '\u0000', '\u0000', '\u0000', ']', '{', '\u0000' };
    boolean retval = StringPatternMatcher.matches(marg0, marg1);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }
}
