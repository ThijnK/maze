// Auto-generated by MAZE
package nl.uu.tests.maze.generated.benchmarks;

import java.lang.Exception;
import java.lang.NullPointerException;
import nl.uu.maze.benchmarks.StringUtils;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class StringUtilsTest {
  @Test
  public void testToLowerCase1() throws Exception {
    char[] marg0 = null;
    Assertions.assertThrows(NullPointerException.class, () -> StringUtils.toLowerCase(marg0));
  }

  @Test
  public void testTrim1() throws Exception {
    char[] marg0 = null;
    Assertions.assertThrows(NullPointerException.class, () -> StringUtils.trim(marg0));
  }

  @Test
  public void testIsPalindrome1() throws Exception {
    char[] marg0 = null;
    Assertions.assertThrows(NullPointerException.class, () -> StringUtils.isPalindrome(marg0));
  }

  @Test
  public void testSubstring1() throws Exception {
    char[] marg0 = null;
    int marg1 = 0;
    int marg2 = 0;
    Assertions.assertThrows(NullPointerException.class, () -> StringUtils.substring(marg0, marg1, marg2));
  }

  @Test
  public void testIndexOf1() throws Exception {
    char[] marg0 = null;
    char marg1 = '\u0000';
    Assertions.assertThrows(NullPointerException.class, () -> StringUtils.indexOf(marg0, marg1));
  }

  @Test
  public void testIndexOf2() throws Exception {
    char[] marg0 = null;
    char[] marg1 = {};
    Assertions.assertThrows(NullPointerException.class, () -> StringUtils.indexOf(marg0, marg1));
  }

  @Test
  public void testLongestNumericPalindrome1() throws Exception {
    char[] marg0 = null;
    Assertions.assertThrows(NullPointerException.class, () -> StringUtils.longestNumericPalindrome(marg0));
  }

  @Test
  public void testLongestAlternatingDigitLetter1() throws Exception {
    char[] marg0 = null;
    Assertions.assertThrows(NullPointerException.class, () -> StringUtils.longestAlternatingDigitLetter(marg0));
  }

  @Test
  public void testSubstring2() throws Exception {
    char[] marg0 = null;
    int marg1 = -1;
    int marg2 = 0;
    Assertions.assertThrows(NullPointerException.class, () -> StringUtils.substring(marg0, marg1, marg2));
  }

  @Test
  public void testIndexOf3() throws Exception {
    char[] marg0 = {};
    char marg1 = '\u0000';
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPalindrome2() throws Exception {
    char[] marg0 = {};
    boolean retval = StringUtils.isPalindrome(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf4() throws Exception {
    char[] marg0 = {};
    char[] marg1 = null;
    Assertions.assertThrows(NullPointerException.class, () -> StringUtils.indexOf(marg0, marg1));
  }

  @Test
  public void testToLowerCase2() throws Exception {
    char[] marg0 = {};
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf5() throws Exception {
    char[] marg0 = { '\u0000' };
    char marg1 = '\u0000';
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf6() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLongestNumericPalindrome2() throws Exception {
    char[] marg0 = {};
    char[] retval = StringUtils.longestNumericPalindrome(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter2() throws Exception {
    char[] marg0 = {};
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf7() throws Exception {
    char[] marg0 = { '\u0000' };
    char marg1 = 'ï¿¿';
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSubstring3() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = 93;
    int marg2 = 93;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf8() throws Exception {
    char[] marg0 = { '\u0001', '\u0000' };
    char marg1 = '\u0000';
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPalindrome3() throws Exception {
    char[] marg0 = { '\u0000', '\u0001' };
    boolean retval = StringUtils.isPalindrome(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSubstring4() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = 3;
    int marg2 = 2;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring5() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = 32;
    int marg2 = 33;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring6() throws Exception {
    char[] marg0 = {};
    int marg1 = -1;
    int marg2 = 0;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIsPalindrome4() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    boolean retval = StringUtils.isPalindrome(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSubstring7() throws Exception {
    char[] marg0 = {};
    int marg1 = 1;
    int marg2 = 1;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring8() throws Exception {
    char[] marg0 = {};
    int marg1 = -1;
    int marg2 = -2147483647;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring9() throws Exception {
    char[] marg0 = {};
    int marg1 = -1;
    int marg2 = 1;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase3() throws Exception {
    char[] marg0 = { '@' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '@' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf9() throws Exception {
    char[] obj0 = {};
    char[] marg0 = obj0;
    char[] marg1 = obj0;
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf10() throws Exception {
    char[] marg0 = {};
    char[] marg1 = {};
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf11() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    char marg1 = '@';
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLongestNumericPalindrome3() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] retval = StringUtils.longestNumericPalindrome(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase4() throws Exception {
    char[] marg0 = { '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring10() throws Exception {
    char[] marg0 = { '\u0000' };
    int marg1 = 0;
    int marg2 = 1;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf12() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000' };
    char marg1 = '\u0000';
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSubstring11() throws Exception {
    char[] marg0 = { '\u0000' };
    int marg1 = 0;
    int marg2 = 2;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring12() throws Exception {
    char[] marg0 = { '\u0000' };
    int marg1 = -1;
    int marg2 = 1;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring13() throws Exception {
    char[] marg0 = { '\u0000' };
    int marg1 = -1;
    int marg2 = 2;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase5() throws Exception {
    char[] marg0 = { 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf13() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000' };
    char marg1 = '\u0001';
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPalindrome5() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringUtils.isPalindrome(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testToLowerCase6() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIsPalindrome6() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringUtils.isPalindrome(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf14() throws Exception {
    char[] obj0 = { '\u0000' };
    char[] marg0 = obj0;
    char[] marg1 = obj0;
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf15() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    char[] marg1 = { '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSubstring14() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = 2;
    int marg2 = 4;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf16() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char marg1 = '\u0001';
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testTrim2() throws Exception {
    char[] marg0 = {};
    char[] retval = StringUtils.trim(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestNumericPalindrome4() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    char[] retval = StringUtils.longestNumericPalindrome(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring15() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    int marg1 = 0;
    int marg2 = 3;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring16() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    int marg1 = -1;
    int marg2 = 2;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase7() throws Exception {
    char[] marg0 = { '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase8() throws Exception {
    char[] marg0 = { '\\', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\\', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf17() throws Exception {
    char[] marg0 = { 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSubstring17() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    int marg1 = -1;
    int marg2 = 3;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase9() throws Exception {
    char[] marg0 = { '\u001b', '\u001b' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001b', '\u001b' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf18() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000' };
    char marg1 = '\u0001';
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter3() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase10() throws Exception {
    char[] marg0 = { '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase11() throws Exception {
    char[] marg0 = { 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim3() throws Exception {
    char[] marg0 = { ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter4() throws Exception {
    char[] marg0 = { '@' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring18() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = 2;
    int marg2 = 5;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf19() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char marg1 = '\u0001';
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter5() throws Exception {
    char[] marg0 = { '`' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring19() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000' };
    int marg1 = 0;
    int marg2 = 4;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring20() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000' };
    int marg1 = -1;
    int marg2 = 3;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase12() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase13() throws Exception {
    char[] marg0 = { '[', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase14() throws Exception {
    char[] marg0 = { 'K', '\u001b' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u001b' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIsPalindrome7() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringUtils.isPalindrome(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf20() throws Exception {
    char[] obj0 = { '\u0000', '\u0000' };
    char[] marg0 = obj0;
    char[] marg1 = obj0;
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf21() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter6() throws Exception {
    char[] marg0 = { '[' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring21() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000' };
    int marg1 = -1;
    int marg2 = 4;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIsPalindrome8() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringUtils.isPalindrome(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter7() throws Exception {
    char[] marg0 = { '2' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase15() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase16() throws Exception {
    char[] marg0 = { '\u0000', '`', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '`', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase17() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf22() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char marg1 = '\u0004';
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testTrim4() throws Exception {
    char[] marg0 = { ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf23() throws Exception {
    char[] marg0 = { '\u0000', '\u0001', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testToLowerCase18() throws Exception {
    char[] marg0 = { 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring22() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = 2;
    int marg2 = 6;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase19() throws Exception {
    char[] marg0 = { '\u0000', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase20() throws Exception {
    char[] marg0 = { 'k', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase21() throws Exception {
    char[] marg0 = { 'k', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf24() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char marg1 = '\u0001';
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testTrim5() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring23() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = 29;
    int marg2 = 34;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring24() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = -1;
    int marg2 = 4;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase22() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase23() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase24() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring25() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = -1;
    int marg2 = 5;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase25() throws Exception {
    char[] marg0 = { '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim6() throws Exception {
    char[] marg0 = { ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase26() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase27() throws Exception {
    char[] marg0 = { '\u0000', '[', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase28() throws Exception {
    char[] marg0 = { '\u0000', 'K', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase29() throws Exception {
    char[] marg0 = { 'k', '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase30() throws Exception {
    char[] marg0 = { 'k', 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase31() throws Exception {
    char[] marg0 = { 'K', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase32() throws Exception {
    char[] marg0 = { 'K', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf25() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char marg1 = '\u0001';
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf26() throws Exception {
    char[] obj0 = { '\u0000', '\u0000', '\u0000' };
    char[] marg0 = obj0;
    char[] marg1 = obj0;
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf27() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testTrim7() throws Exception {
    char[] marg0 = { ' ', '\u0000' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim8() throws Exception {
    char[] marg0 = { '\u0000', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIsPalindrome9() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringUtils.isPalindrome(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf28() throws Exception {
    char[] marg0 = { '\u0001', '\u0000' };
    char[] marg1 = { '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter8() throws Exception {
    char[] marg0 = { 'k' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring26() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = 0;
    int marg2 = 5;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase33() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase34() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase35() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase36() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase37() throws Exception {
    char[] marg0 = { '[', '[', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase38() throws Exception {
    char[] marg0 = { '[', 'K', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase39() throws Exception {
    char[] marg0 = { 'K', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf29() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0010', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char marg1 = '\u0010';
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testTrim9() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIsPalindrome10() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringUtils.isPalindrome(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf30() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter9() throws Exception {
    char[] marg0 = { 'K' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring27() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = 28;
    int marg2 = 34;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring28() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = -1;
    int marg2 = 5;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase40() throws Exception {
    char[] marg0 = { '\u0000', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase41() throws Exception {
    char[] marg0 = { 'K', '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase42() throws Exception {
    char[] marg0 = { 'K', 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim10() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf31() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSubstring29() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = -1;
    int marg2 = 6;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase43() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase44() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase45() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase46() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase47() throws Exception {
    char[] marg0 = { '[', '\u0000', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase48() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase49() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase50() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase51() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase52() throws Exception {
    char[] marg0 = { '[', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase53() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase54() throws Exception {
    char[] marg0 = { 'K', '[', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase55() throws Exception {
    char[] marg0 = { 'K', 'K', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf32() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char marg1 = '\b';
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testTrim11() throws Exception {
    char[] marg0 = { ' ', ' ', '\u0000' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim12() throws Exception {
    char[] marg0 = { ' ', '\u0000', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim13() throws Exception {
    char[] marg0 = { '\u0000', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase56() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u001b', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u001b', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase57() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u001b', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u001b', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase58() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase59() throws Exception {
    char[] marg0 = { '[', '[', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim14() throws Exception {
    char[] marg0 = { ' ', '\u0000', '\u0000' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim15() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring30() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = 1;
    int marg2 = 7;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase60() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase61() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase62() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'k', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase63() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase64() throws Exception {
    char[] marg0 = { '\u0000', '[', 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase65() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase66() throws Exception {
    char[] marg0 = { '\u0000', 'K', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase67() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase68() throws Exception {
    char[] marg0 = { '[', '\u0000', 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase69() throws Exception {
    char[] marg0 = { '[', 'K', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase70() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase71() throws Exception {
    char[] marg0 = { 'K', '\u0000', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase72() throws Exception {
    char[] marg0 = { 'K', '[', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf33() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char marg1 = '\u0001';
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testTrim16() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim17() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf34() throws Exception {
    char[] obj0 = { '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg0 = obj0;
    char[] marg1 = obj0;
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf35() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter10() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring31() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = 27;
    int marg2 = 34;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring32() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = -1;
    int marg2 = 6;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase73() throws Exception {
    char[] marg0 = { '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase74() throws Exception {
    char[] marg0 = { 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf36() throws Exception {
    char[] marg0 = { '\u0001', '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLongestNumericPalindrome5() throws Exception {
    char[] marg0 = { '/', '/', '/' };
    char[] retval = StringUtils.longestNumericPalindrome(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter11() throws Exception {
    char[] marg0 = { '\u0000', '@' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter12() throws Exception {
    char[] marg0 = { '@', '\u0000' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring33() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = -1;
    int marg2 = 7;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase75() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase76() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase77() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase78() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase79() throws Exception {
    char[] marg0 = { '\u0000', '\u001b', 'à ', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u001b', 'à ', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase80() throws Exception {
    char[] marg0 = { '\u0000', '\u001b', 'K', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u001b', 'k', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase81() throws Exception {
    char[] marg0 = { '\u0000', 'P', '\u001b', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'p', '\u001b', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase82() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase83() throws Exception {
    char[] marg0 = { '[', '\u0000', 'à ', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', 'à ', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase84() throws Exception {
    char[] marg0 = { '[', '\u0000', 'K', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', 'k', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase85() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase86() throws Exception {
    char[] marg0 = { '[', '[', 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase87() throws Exception {
    char[] marg0 = { '[', 'K', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase88() throws Exception {
    char[] marg0 = { '[', 'K', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase89() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u001b', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u001b', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase90() throws Exception {
    char[] marg0 = { 'K', '[', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase91() throws Exception {
    char[] marg0 = { 'K', '[', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim18() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', '\u0000' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim19() throws Exception {
    char[] marg0 = { ' ', ' ', '\u0000', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim20() throws Exception {
    char[] marg0 = { ' ', '\u0000', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim21() throws Exception {
    char[] marg0 = { '\u0000', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIsPalindrome11() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringUtils.isPalindrome(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf37() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter13() throws Exception {
    char[] marg0 = { '\u0000', '[' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter14() throws Exception {
    char[] marg0 = { '@', '@' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter15() throws Exception {
    char[] marg0 = { '[', '\u0000' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase92() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase93() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase94() throws Exception {
    char[] marg0 = { '\u0000', 'K', 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase95() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase96() throws Exception {
    char[] marg0 = { 'K', '\u0000', 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase97() throws Exception {
    char[] marg0 = { 'K', 'K', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf38() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char marg1 = '\u0001';
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testTrim22() throws Exception {
    char[] marg0 = { ' ', ' ', '\u0000', '\u0000' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim23() throws Exception {
    char[] marg0 = { ' ', '\u0000', '\u0000', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim24() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIsPalindrome12() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringUtils.isPalindrome(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf39() throws Exception {
    char[] marg0 = { '\u0000', '\u0001', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf40() throws Exception {
    char[] marg0 = { '\u0001', '\u0000', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLongestNumericPalindrome6() throws Exception {
    char[] marg0 = { 'á', 'á', 'á' };
    char[] retval = StringUtils.longestNumericPalindrome(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter16() throws Exception {
    char[] marg0 = { '\u0000', 'Ã' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter17() throws Exception {
    char[] marg0 = { '@', '[' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter18() throws Exception {
    char[] marg0 = { '[', '@' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter19() throws Exception {
    char[] marg0 = { 'à ', '\u0000' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase98() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase99() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase100() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase101() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase102() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase103() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '[', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase104() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase105() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase106() throws Exception {
    char[] marg0 = { '[', '\u0000', '[', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '[', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase107() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase108() throws Exception {
    char[] marg0 = { '[', '[', '[', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '[', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase109() throws Exception {
    char[] marg0 = { '[', '[', 'K', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', 'k', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase110() throws Exception {
    char[] marg0 = { '[', 'K', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase111() throws Exception {
    char[] marg0 = { 'K', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim25() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim26() throws Exception {
    char[] marg0 = { ' ', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim27() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter20() throws Exception {
    char[] marg0 = { '\u0000', '2' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter21() throws Exception {
    char[] marg0 = { '<', '[' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter22() throws Exception {
    char[] marg0 = { '[', '[' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter23() throws Exception {
    char[] marg0 = { 'Ã', '@' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring34() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = 2;
    int marg2 = 9;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase112() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase113() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase114() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'k', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase115() throws Exception {
    char[] marg0 = { '\u0000', '\u001b', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u001b', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase116() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase117() throws Exception {
    char[] marg0 = { '\u0000', 'K', 'à ', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', 'à ', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase118() throws Exception {
    char[] marg0 = { '\u0000', 'K', 'K', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', 'k', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase119() throws Exception {
    char[] marg0 = { '[', '\u0000', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase120() throws Exception {
    char[] marg0 = { '[', 'K', '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase121() throws Exception {
    char[] marg0 = { '[', 'K', 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase122() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase123() throws Exception {
    char[] marg0 = { 'K', '\u0000', 'à ', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', 'à ', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase124() throws Exception {
    char[] marg0 = { 'K', '\u0000', 'K', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', 'k', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase125() throws Exception {
    char[] marg0 = { 'K', '[', '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase126() throws Exception {
    char[] marg0 = { 'K', '[', 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase127() throws Exception {
    char[] marg0 = { 'K', 'K', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase128() throws Exception {
    char[] marg0 = { 'K', 'K', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf41() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char marg1 = '\u0001';
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testTrim28() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestNumericPalindrome7() throws Exception {
    char[] marg0 = { '2', '\u0000', '\u0000' };
    char[] retval = StringUtils.longestNumericPalindrome(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter24() throws Exception {
    char[] marg0 = { '@', '2' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter25() throws Exception {
    char[] marg0 = { '[', 'Ã' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter26() throws Exception {
    char[] marg0 = { 'Ã', '[' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring35() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = 26;
    int marg2 = 34;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring36() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = -1;
    int marg2 = 7;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase129() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase130() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase131() throws Exception {
    char[] marg0 = { '\u0000', '`', 'È', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '`', 'È', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase132() throws Exception {
    char[] marg0 = { '\u0000', '`', 'È', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '`', 'È', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase133() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase134() throws Exception {
    char[] marg0 = { '[', '\u0000', 'È', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', 'È', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase135() throws Exception {
    char[] marg0 = { '[', '\u0000', 'È', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', 'È', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase136() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '\u0000', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase137() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '\u0000', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase138() throws Exception {
    char[] marg0 = { '[', '`', '\u001b', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '`', '\u001b', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim29() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', '\u0000' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim30() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', '\u0000', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim31() throws Exception {
    char[] marg0 = { ' ', ' ', '\u0000', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim32() throws Exception {
    char[] marg0 = { ' ', '\u0000', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim33() throws Exception {
    char[] marg0 = { '\u0000', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter27() throws Exception {
    char[] marg0 = { '[', '2' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter28() throws Exception {
    char[] marg0 = { '\u001b', 'Ã' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring37() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = -1;
    int marg2 = 8;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase139() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase140() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '[', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '[', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase141() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', 'K', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', 'k', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase142() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase143() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase144() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'k', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase145() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'k', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase146() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase147() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase148() throws Exception {
    char[] marg0 = { '\u0000', '[', 'K', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', 'k', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase149() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '\u0000', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase150() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '\u0000', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase151() throws Exception {
    char[] marg0 = { '\u0000', 'K', '[', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '[', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase152() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase153() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase154() throws Exception {
    char[] marg0 = { '[', '\u0000', 'K', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', 'k', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase155() throws Exception {
    char[] marg0 = { '[', '[', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase156() throws Exception {
    char[] marg0 = { '[', 'K', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase157() throws Exception {
    char[] marg0 = { '[', 'K', '[', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '[', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase158() throws Exception {
    char[] marg0 = { '[', 'K', 'K', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', 'k', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase159() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u0000', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u0000', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase160() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u0000', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u0000', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase161() throws Exception {
    char[] marg0 = { 'K', '\u0000', '[', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '[', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase162() throws Exception {
    char[] marg0 = { 'K', '[', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase163() throws Exception {
    char[] marg0 = { 'K', '[', '[', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '[', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase164() throws Exception {
    char[] marg0 = { 'K', '[', 'K', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', 'k', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase165() throws Exception {
    char[] marg0 = { 'K', 'K', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim34() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', '\u0000', '\u0000' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim35() throws Exception {
    char[] marg0 = { ' ', ' ', '\u0000', '\u0000', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim36() throws Exception {
    char[] marg0 = { ' ', '\u0000', '\u0000', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim37() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf42() throws Exception {
    char[] obj0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg0 = obj0;
    char[] marg1 = obj0;
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf43() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLongestNumericPalindrome8() throws Exception {
    char[] marg0 = { '2', ':', ':' };
    char[] retval = StringUtils.longestNumericPalindrome(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter29() throws Exception {
    char[] marg0 = { 'Ã', '2' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase166() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase167() throws Exception {
    char[] marg0 = { '\u0000', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase168() throws Exception {
    char[] marg0 = { '\u001c', '\u0000', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', '\u0000', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase169() throws Exception {
    char[] marg0 = { '\u001c', '[', '\u0000', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', '[', '\u0000', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase170() throws Exception {
    char[] marg0 = { '\u001c', '[', '[', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', '[', '[', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase171() throws Exception {
    char[] marg0 = { '\u001c', '[', '[', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', '[', '[', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase172() throws Exception {
    char[] marg0 = { 'K', '\u0000', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase173() throws Exception {
    char[] marg0 = { 'K', 'K', '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase174() throws Exception {
    char[] marg0 = { 'K', 'K', 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf44() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char marg1 = '\u0001';
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testTrim38() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim39() throws Exception {
    char[] marg0 = { ' ', ' ', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim40() throws Exception {
    char[] marg0 = { ' ', '\u0000', ' ', '\u0000', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim41() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf45() throws Exception {
    char[] marg0 = { '\u0001', '\u0001', '\u0000' };
    char[] marg1 = { '\u0001', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf46() throws Exception {
    char[] marg0 = { '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testToLowerCase175() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase176() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase177() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '[', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '[', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase178() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase179() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '[', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '[', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase180() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', 'K', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', 'k', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase181() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'k', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase182() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase183() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '[', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '[', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase184() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', 'K', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', 'k', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase185() throws Exception {
    char[] marg0 = { '\u0000', '`', 'È', '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '`', 'È', '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase186() throws Exception {
    char[] marg0 = { '\u0000', '`', 'È', 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '`', 'È', 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase187() throws Exception {
    char[] marg0 = { '\u0000', '[', 'K', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', 'k', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase188() throws Exception {
    char[] marg0 = { '\u0000', '[', 'K', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', 'k', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase189() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '\u0000', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase190() throws Exception {
    char[] marg0 = { '\u0000', 'P', 'È', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'p', 'È', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase191() throws Exception {
    char[] marg0 = { '\u0000', 'P', 'È', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'p', 'È', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase192() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase193() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '[', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', '[', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase194() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', 'K', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', 'k', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase195() throws Exception {
    char[] marg0 = { '[', '\u0000', 'È', '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', 'È', '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase196() throws Exception {
    char[] marg0 = { '[', '\u0000', 'È', 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', 'È', 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase197() throws Exception {
    char[] marg0 = { '[', '\u0000', 'K', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', 'k', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase198() throws Exception {
    char[] marg0 = { '[', '\u0000', 'K', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', 'k', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase199() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '\u0000', '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase200() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '\u0000', 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase201() throws Exception {
    char[] marg0 = { '[', '[', 'K', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', 'k', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase202() throws Exception {
    char[] marg0 = { '[', 'K', '\u0000', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '\u0000', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase203() throws Exception {
    char[] marg0 = { '[', 'K', '\u0000', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '\u0000', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase204() throws Exception {
    char[] marg0 = { '[', 'P', '\u001b', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'p', '\u001b', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase205() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u0000', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u0000', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase206() throws Exception {
    char[] marg0 = { 'K', '\u0000', 'È', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', 'È', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase207() throws Exception {
    char[] marg0 = { 'K', '\u0000', 'È', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', 'È', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase208() throws Exception {
    char[] marg0 = { 'K', '[', '\u0000', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '\u0000', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase209() throws Exception {
    char[] marg0 = { 'K', '[', '\u0000', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '\u0000', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase210() throws Exception {
    char[] marg0 = { 'K', '`', '\u001b', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '`', '\u001b', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim42() throws Exception {
    char[] marg0 = { ' ', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim43() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf47() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf48() throws Exception {
    char[] marg0 = { '\u0001', '\u0001', '\u0000' };
    char[] marg1 = { '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSubstring38() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = 2;
    int marg2 = 10;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase211() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', 'K', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', 'k', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase212() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', 'K', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', 'k', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase213() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', 'K', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', 'k', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase214() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', 'K', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', 'k', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase215() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', 'K', '[', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', 'k', '[', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase216() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', 'K', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', 'k', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase217() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase218() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase219() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase220() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '\u0000', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '\u0000', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase221() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase222() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase223() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '\u0000', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '\u0000', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase224() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase225() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '\u0000', '[', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '\u0000', '[', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase226() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase227() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '\u0000', 'K', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '\u0000', 'k', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase228() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '\u0000', 'K', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '\u0000', 'k', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase229() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase230() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '[', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '[', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase231() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase232() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '[', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '[', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase233() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase234() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u001c', '\u0000', '\u001b', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u001c', '\u0000', '\u001b', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase235() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'à ', '[', 'ä', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'à ', '[', 'ä', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase236() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '[', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '[', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase237() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase238() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', 'K', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', 'k', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase239() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', 'K', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', 'k', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase240() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', 'K', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', 'k', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase241() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', 'K', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', 'k', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase242() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', 'K', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', 'k', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase243() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase244() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'k', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase245() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'k', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase246() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'k', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase247() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K', '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'k', '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase248() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K', '\u0000', '[', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'k', '\u0000', '[', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase249() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'k', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase250() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K', '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'k', '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase251() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'k', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase252() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'k', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase253() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K', '[', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'k', '[', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase254() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'k', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase255() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'k', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase256() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'k', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase257() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K', 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'k', 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase258() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K', 'K', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'k', 'k', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase259() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase260() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase261() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase262() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '\u0000', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '\u0000', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase263() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase264() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase265() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '\u0000', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '\u0000', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase266() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase267() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '\u0000', '[', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '\u0000', '[', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase268() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase269() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '\u0000', 'K', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '\u0000', 'k', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase270() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '\u0000', 'K', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '\u0000', 'k', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase271() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase272() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '[', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '[', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase273() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase274() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '[', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '[', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase275() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase276() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '[', '\u001b', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '[', '\u001b', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase277() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '[', 'ä', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '[', 'ä', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase278() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '[', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '[', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase279() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase280() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', 'K', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', 'k', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase281() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', 'K', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', 'k', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase282() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', 'K', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', 'k', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase283() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', 'K', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', 'k', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase284() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase285() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '[', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase286() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '[', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase287() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '[', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase288() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', '\u0000', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '[', '\u0000', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase289() throws Exception {
    char[] marg0 = { '\u0000', '`', '\u001c', '\u0000', '\u001b', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '`', '\u001c', '\u0000', '\u001b', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase290() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', '\u0000', 'ä', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '[', '\u0000', 'ä', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase291() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '[', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase292() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', '\u0000', 'K', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '[', '\u0000', 'k', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase293() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase294() throws Exception {
    char[] marg0 = { '\u0000', '`', '\u001b', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '`', '\u001b', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase295() throws Exception {
    char[] marg0 = { '\u0000', '`', 'Ð', '[', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '`', 'Ð', '[', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase296() throws Exception {
    char[] marg0 = { '\u0000', '`', '\u001b', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '`', '\u001b', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase297() throws Exception {
    char[] marg0 = { '\u0000', '`', '\u001b', '[', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '`', '\u001b', '[', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase298() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', '[', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '[', '[', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase299() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', '[', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '[', '[', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase300() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '[', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase301() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '[', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase302() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', 'K', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '[', 'k', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase303() throws Exception {
    char[] marg0 = { '\u0000', '[', 'è', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', 'è', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase304() throws Exception {
    char[] marg0 = { '\u0000', '[', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase305() throws Exception {
    char[] marg0 = { '\u0000', '[', 'K', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', 'k', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase306() throws Exception {
    char[] marg0 = { '\u0000', '[', 'K', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', 'k', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase307() throws Exception {
    char[] marg0 = { '\u0000', '[', 'K', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', 'k', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase308() throws Exception {
    char[] marg0 = { '\u0000', '[', 'K', '\u0000', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', 'k', '\u0000', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase309() throws Exception {
    char[] marg0 = { '\u0000', '[', 'K', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', 'k', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase310() throws Exception {
    char[] marg0 = { '\u0000', '[', 'K', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', 'k', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase311() throws Exception {
    char[] marg0 = { '\u0000', '[', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase312() throws Exception {
    char[] marg0 = { '\u0000', '[', 'K', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', 'k', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase313() throws Exception {
    char[] marg0 = { '\u0000', '[', 'K', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', 'k', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase314() throws Exception {
    char[] marg0 = { '\u0000', '[', 'K', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', 'k', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase315() throws Exception {
    char[] marg0 = { '\u0000', '[', 'K', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', 'k', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase316() throws Exception {
    char[] marg0 = { '\u0000', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase317() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase318() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '\u0000', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase319() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '\u0000', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase320() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase321() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000', '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '\u0000', '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase322() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000', '\u0000', '[', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '\u0000', '\u0000', '[', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase323() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase324() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000', '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '\u0000', '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase325() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase326() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '\u0000', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase327() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000', '[', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '\u0000', '[', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase328() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase329() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000', '[', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '\u0000', '[', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase330() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase331() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000', 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '\u0000', 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase332() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000', 'K', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '\u0000', 'k', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase333() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase334() throws Exception {
    char[] marg0 = { '\u0000', 'K', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase335() throws Exception {
    char[] marg0 = { '\u0000', 'K', '[', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '[', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase336() throws Exception {
    char[] marg0 = { '\u0000', 'K', '[', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '[', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase337() throws Exception {
    char[] marg0 = { '\u0000', 'K', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase338() throws Exception {
    char[] marg0 = { '\u0000', 'K', '[', '\u0000', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '[', '\u0000', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase339() throws Exception {
    char[] marg0 = { '\u0000', 'K', '[', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '[', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase340() throws Exception {
    char[] marg0 = { '\u0000', 'K', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase341() throws Exception {
    char[] marg0 = { '\u0000', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase342() throws Exception {
    char[] marg0 = { '\u0000', 'K', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase343() throws Exception {
    char[] marg0 = { '\u0000', 'P', '\u001b', '[', 'K', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'p', '\u001b', '[', 'k', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase344() throws Exception {
    char[] marg0 = { '\u0000', 'K', '[', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '[', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase345() throws Exception {
    char[] marg0 = { '\u0000', 'P', '\u001b', 'K', '[', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'p', '\u001b', 'k', '[', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase346() throws Exception {
    char[] marg0 = { '\u0000', 'K', 'è', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', 'è', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase347() throws Exception {
    char[] marg0 = { '\u0000', 'K', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase348() throws Exception {
    char[] marg0 = { '\u0000', 'K', 'K', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', 'k', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase349() throws Exception {
    char[] marg0 = { '\u0000', 'K', 'K', '\u0000', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', 'k', '\u0000', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase350() throws Exception {
    char[] marg0 = { '\u0000', 'K', 'K', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', 'k', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase351() throws Exception {
    char[] marg0 = { '\u0000', 'K', 'K', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', 'k', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase352() throws Exception {
    char[] marg0 = { '\u0000', 'K', 'K', '[', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', 'k', '[', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase353() throws Exception {
    char[] marg0 = { '\u0000', 'K', 'K', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', 'k', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase354() throws Exception {
    char[] marg0 = { '\u0000', 'K', 'K', 'K', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', 'k', 'k', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase355() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase356() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase357() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '\u0000', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', '\u0000', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase358() throws Exception {
    char[] marg0 = { '\u001c', '\u0000', '\u0000', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', '\u0000', '\u0000', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase359() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase360() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '\u0000', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', '\u0000', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase361() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase362() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '\u0000', '[', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', '\u0000', '[', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase363() throws Exception {
    char[] marg0 = { '\u001c', '\u0000', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', '\u0000', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase364() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '\u0000', 'K', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', '\u0000', 'k', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase365() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '\u0000', 'K', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', '\u0000', 'k', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase366() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase367() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '[', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', '[', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase368() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase369() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '[', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', '[', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase370() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase371() throws Exception {
    char[] marg0 = { '\u009b', '\u0000', '\u0000', '[', '\u001b', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u009b', '\u0000', '\u0000', '[', '\u001b', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase372() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '[', 'ä', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', '[', 'ä', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase373() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '[', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', '[', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase374() throws Exception {
    char[] marg0 = { '\u001c', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase375() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', 'K', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', 'k', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase376() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', 'K', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', 'k', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase377() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', 'K', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', 'k', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase378() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', 'K', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', 'k', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase379() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', 'K', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', 'k', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase380() throws Exception {
    char[] marg0 = { '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase381() throws Exception {
    char[] marg0 = { '[', '\u0000', '[', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '[', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase382() throws Exception {
    char[] marg0 = { '[', '\u0000', '[', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '[', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase383() throws Exception {
    char[] marg0 = { '[', '\u0000', '[', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '[', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase384() throws Exception {
    char[] marg0 = { '[', '\u0000', '[', '\u0000', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '[', '\u0000', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase385() throws Exception {
    char[] marg0 = { '\u009b', '\u0000', '\u001c', '\u0000', '\u001b', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u009b', '\u0000', '\u001c', '\u0000', '\u001b', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase386() throws Exception {
    char[] marg0 = { '[', '\u0000', '[', '\u0000', 'ä', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '[', '\u0000', 'ä', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase387() throws Exception {
    char[] marg0 = { '[', '\u0000', '[', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '[', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase388() throws Exception {
    char[] marg0 = { '[', '\u0000', '[', '\u0000', 'K', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '[', '\u0000', 'k', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase389() throws Exception {
    char[] marg0 = { '[', '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase390() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u001b', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u001b', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase391() throws Exception {
    char[] marg0 = { 'È', '\u0000', 'Ð', '[', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'È', '\u0000', 'Ð', '[', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase392() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u001b', '[', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u001b', '[', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase393() throws Exception {
    char[] marg0 = { '\u001c', '\u0000', '[', '[', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', '\u0000', '[', '[', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase394() throws Exception {
    char[] marg0 = { '\u001c', '\u0000', '[', '[', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', '\u0000', '[', '[', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase395() throws Exception {
    char[] marg0 = { '[', '\u0000', '[', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '[', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase396() throws Exception {
    char[] marg0 = { '[', '\u0000', '[', 'K', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '[', 'k', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase397() throws Exception {
    char[] marg0 = { '\u001c', '\u0000', '[', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', '\u0000', '[', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase398() throws Exception {
    char[] marg0 = { '\u001c', '\u0000', '[', 'K', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', '\u0000', '[', 'k', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase399() throws Exception {
    char[] marg0 = { '[', '\u0000', 'è', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', 'è', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase400() throws Exception {
    char[] marg0 = { '\u001c', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase401() throws Exception {
    char[] marg0 = { '[', '\u0000', 'K', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', 'k', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase402() throws Exception {
    char[] marg0 = { '[', '\u0000', 'K', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', 'k', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase403() throws Exception {
    char[] marg0 = { '[', '\u0000', 'K', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', 'k', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase404() throws Exception {
    char[] marg0 = { '[', '\u0000', 'K', '\u0000', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', 'k', '\u0000', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase405() throws Exception {
    char[] marg0 = { '[', '\u0000', 'K', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', 'k', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase406() throws Exception {
    char[] marg0 = { '[', '\u0000', 'K', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', 'k', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase407() throws Exception {
    char[] marg0 = { '\u001c', '\u0000', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', '\u0000', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase408() throws Exception {
    char[] marg0 = { '\u001c', '\u0000', 'K', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', '\u0000', 'k', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase409() throws Exception {
    char[] marg0 = { '[', '\u0000', 'K', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', 'k', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase410() throws Exception {
    char[] marg0 = { '[', '\u0000', 'K', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', 'k', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase411() throws Exception {
    char[] marg0 = { '[', '\u0000', 'K', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', 'k', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase412() throws Exception {
    char[] marg0 = { '[', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase413() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase414() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase415() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '\u0000', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase416() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '\u0000', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase417() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '\u0000', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '\u0000', '\u0000', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase418() throws Exception {
    char[] marg0 = { '\u009b', '[', '\u0000', '\u0000', '\u001b', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u009b', '[', '\u0000', '\u0000', '\u001b', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase419() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '\u0000', 'ä', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '\u0000', '\u0000', 'ä', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase420() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase421() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '\u0000', 'K', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '\u0000', '\u0000', 'k', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase422() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase423() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '\u0000', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase424() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '[', '\u0000', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '\u0000', '[', '\u0000', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase425() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '[', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '\u0000', '[', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase426() throws Exception {
    char[] marg0 = { '\u001c', '[', '\u0000', '[', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', '[', '\u0000', '[', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase427() throws Exception {
    char[] marg0 = { '\u001c', '[', '\u0000', '[', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', '[', '\u0000', '[', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase428() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase429() throws Exception {
    char[] marg0 = { '\u001c', '[', '\u0000', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', '[', '\u0000', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase430() throws Exception {
    char[] marg0 = { '\u001c', '[', '\u0000', 'K', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', '[', '\u0000', 'k', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase431() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', 'K', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '\u0000', 'k', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase432() throws Exception {
    char[] marg0 = { '[', '`', 'È', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '`', 'È', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase433() throws Exception {
    char[] marg0 = { '[', '[', '[', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '[', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase434() throws Exception {
    char[] marg0 = { '[', '[', '[', '\u0000', '\u0000', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '[', '\u0000', '\u0000', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase435() throws Exception {
    char[] marg0 = { '[', '[', '[', '\u0000', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '[', '\u0000', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase436() throws Exception {
    char[] marg0 = { '\u001c', '[', '[', '\u0000', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', '[', '[', '\u0000', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase437() throws Exception {
    char[] marg0 = { '\u001c', '[', '[', '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', '[', '[', '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase438() throws Exception {
    char[] marg0 = { '[', '[', '[', '[', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '[', '[', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase439() throws Exception {
    char[] marg0 = { '[', '`', 'È', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '`', 'È', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase440() throws Exception {
    char[] marg0 = { '[', '`', 'È', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '`', 'È', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase441() throws Exception {
    char[] marg0 = { '[', '[', '[', '[', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '[', '[', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase442() throws Exception {
    char[] marg0 = { '\u001c', '[', '[', 'K', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', '[', '[', 'k', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase443() throws Exception {
    char[] marg0 = { '\u001c', '[', '[', 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', '[', '[', 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase444() throws Exception {
    char[] marg0 = { '[', '[', '[', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '[', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase445() throws Exception {
    char[] marg0 = { '[', '[', '[', 'K', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '[', 'k', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase446() throws Exception {
    char[] marg0 = { '[', '[', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase447() throws Exception {
    char[] marg0 = { '[', '[', 'K', '\u0000', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', 'k', '\u0000', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase448() throws Exception {
    char[] marg0 = { '\u001c', '[', 'K', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', '[', 'k', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase449() throws Exception {
    char[] marg0 = { '\u001c', '[', 'K', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', '[', 'k', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase450() throws Exception {
    char[] marg0 = { '[', '[', 'K', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', 'k', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase451() throws Exception {
    char[] marg0 = { '\u001c', '[', 'K', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', '[', 'k', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase452() throws Exception {
    char[] marg0 = { '\u001c', '[', 'K', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', '[', 'k', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase453() throws Exception {
    char[] marg0 = { '[', '[', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase454() throws Exception {
    char[] marg0 = { '[', '[', 'K', '[', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', 'k', '[', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase455() throws Exception {
    char[] marg0 = { '[', '[', 'K', 'K', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', 'k', 'k', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase456() throws Exception {
    char[] marg0 = { '[', '[', 'K', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', 'k', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase457() throws Exception {
    char[] marg0 = { '[', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase458() throws Exception {
    char[] marg0 = { '\u001c', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase459() throws Exception {
    char[] marg0 = { '[', 'K', '\u0000', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '\u0000', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase460() throws Exception {
    char[] marg0 = { '[', 'K', '\u0000', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '\u0000', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase461() throws Exception {
    char[] marg0 = { '[', 'K', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase462() throws Exception {
    char[] marg0 = { '[', 'K', '\u0000', '\u0000', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '\u0000', '\u0000', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase463() throws Exception {
    char[] marg0 = { '[', 'K', '\u0000', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '\u0000', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase464() throws Exception {
    char[] marg0 = { '[', 'K', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase465() throws Exception {
    char[] marg0 = { '\u001c', 'K', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', 'k', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase466() throws Exception {
    char[] marg0 = { '\u001c', 'K', '\u0000', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', 'k', '\u0000', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase467() throws Exception {
    char[] marg0 = { '[', 'K', '\u0000', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '\u0000', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase468() throws Exception {
    char[] marg0 = { '[', 'K', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase469() throws Exception {
    char[] marg0 = { '[', 'K', '\u0000', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '\u0000', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase470() throws Exception {
    char[] marg0 = { '[', 'K', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase471() throws Exception {
    char[] marg0 = { '[', 'P', 'È', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'p', 'È', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase472() throws Exception {
    char[] marg0 = { '\u001c', 'K', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', 'k', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase473() throws Exception {
    char[] marg0 = { '\u001c', 'K', '[', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', 'k', '[', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase474() throws Exception {
    char[] marg0 = { '[', 'K', '[', '\u0000', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '[', '\u0000', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase475() throws Exception {
    char[] marg0 = { '\u001c', 'K', '[', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', 'k', '[', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase476() throws Exception {
    char[] marg0 = { '\u001c', 'K', '[', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', 'k', '[', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase477() throws Exception {
    char[] marg0 = { '[', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase478() throws Exception {
    char[] marg0 = { '[', 'K', '[', '[', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '[', '[', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase479() throws Exception {
    char[] marg0 = { '[', 'K', '[', 'K', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '[', 'k', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase480() throws Exception {
    char[] marg0 = { '[', 'K', '[', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '[', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase481() throws Exception {
    char[] marg0 = { '[', 'K', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase482() throws Exception {
    char[] marg0 = { '[', 'K', 'K', '\u0000', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', 'k', '\u0000', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase483() throws Exception {
    char[] marg0 = { '[', 'K', 'K', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', 'k', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase484() throws Exception {
    char[] marg0 = { '[', 'K', 'K', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', 'k', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase485() throws Exception {
    char[] marg0 = { '[', 'K', 'K', '[', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', 'k', '[', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase486() throws Exception {
    char[] marg0 = { '[', 'K', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase487() throws Exception {
    char[] marg0 = { '[', 'K', 'K', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', 'k', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase488() throws Exception {
    char[] marg0 = { '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase489() throws Exception {
    char[] marg0 = { '[', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase490() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase491() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u0000', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u0000', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase492() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u0000', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u0000', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase493() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase494() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u0000', '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u0000', '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase495() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u0000', '\u0000', '[', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u0000', '\u0000', '[', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase496() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase497() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u0000', '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u0000', '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase498() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase499() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u0000', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u0000', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase500() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u0000', '[', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u0000', '[', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase501() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase502() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u0000', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u0000', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase503() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase504() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u0000', 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u0000', 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase505() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u0000', 'K', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u0000', 'k', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase506() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase507() throws Exception {
    char[] marg0 = { 'K', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase508() throws Exception {
    char[] marg0 = { 'K', '\u0000', '[', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '[', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase509() throws Exception {
    char[] marg0 = { 'K', '\u0000', '[', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '[', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase510() throws Exception {
    char[] marg0 = { 'K', '\u0000', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase511() throws Exception {
    char[] marg0 = { 'K', '\u0000', '[', '\u0000', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '[', '\u0000', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase512() throws Exception {
    char[] marg0 = { 'K', '\u0000', '[', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '[', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase513() throws Exception {
    char[] marg0 = { 'K', '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase514() throws Exception {
    char[] marg0 = { 'K', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase515() throws Exception {
    char[] marg0 = { 'K', '\u0000', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase516() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u001b', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u001b', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase517() throws Exception {
    char[] marg0 = { 'K', '\u0000', '[', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '[', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase518() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u001b', 'K', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u001b', 'k', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase519() throws Exception {
    char[] marg0 = { 'K', '\u0000', 'è', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', 'è', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase520() throws Exception {
    char[] marg0 = { 'K', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase521() throws Exception {
    char[] marg0 = { 'K', '\u0000', 'K', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', 'k', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase522() throws Exception {
    char[] marg0 = { 'K', '\u0000', 'K', '\u0000', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', 'k', '\u0000', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase523() throws Exception {
    char[] marg0 = { 'K', '\u0000', 'K', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', 'k', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase524() throws Exception {
    char[] marg0 = { 'K', '\u0000', 'K', '[', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', 'k', '[', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase525() throws Exception {
    char[] marg0 = { 'K', '\u0000', 'K', '[', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', 'k', '[', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase526() throws Exception {
    char[] marg0 = { 'K', '\u0000', 'K', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', 'k', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase527() throws Exception {
    char[] marg0 = { 'K', '\u0000', 'K', 'K', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', 'k', 'k', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase528() throws Exception {
    char[] marg0 = { 'K', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase529() throws Exception {
    char[] marg0 = { 'K', '[', '\u0000', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '\u0000', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase530() throws Exception {
    char[] marg0 = { 'K', '[', '\u0000', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '\u0000', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase531() throws Exception {
    char[] marg0 = { 'K', '[', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase532() throws Exception {
    char[] marg0 = { 'K', '[', '\u0000', '\u0000', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '\u0000', '\u0000', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase533() throws Exception {
    char[] marg0 = { 'K', '[', '\u0000', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '\u0000', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase534() throws Exception {
    char[] marg0 = { 'K', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase535() throws Exception {
    char[] marg0 = { 'K', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase536() throws Exception {
    char[] marg0 = { 'K', '[', '\u0000', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '\u0000', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase537() throws Exception {
    char[] marg0 = { 'K', '[', '\u0000', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '\u0000', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase538() throws Exception {
    char[] marg0 = { 'K', '[', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase539() throws Exception {
    char[] marg0 = { 'K', '[', '\u0000', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '\u0000', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase540() throws Exception {
    char[] marg0 = { 'K', '[', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase541() throws Exception {
    char[] marg0 = { 'K', '`', 'È', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '`', 'È', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase542() throws Exception {
    char[] marg0 = { 'K', '[', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase543() throws Exception {
    char[] marg0 = { 'K', '[', '[', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '[', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase544() throws Exception {
    char[] marg0 = { 'K', '[', '[', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '[', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase545() throws Exception {
    char[] marg0 = { 'K', '[', '[', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '[', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase546() throws Exception {
    char[] marg0 = { 'K', '[', '[', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '[', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase547() throws Exception {
    char[] marg0 = { 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase548() throws Exception {
    char[] marg0 = { 'K', '[', '[', '[', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '[', '[', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase549() throws Exception {
    char[] marg0 = { 'K', '[', '[', 'K', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '[', 'k', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase550() throws Exception {
    char[] marg0 = { 'K', '[', '[', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '[', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase551() throws Exception {
    char[] marg0 = { 'K', '[', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase552() throws Exception {
    char[] marg0 = { 'K', '[', 'K', '\u0000', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', 'k', '\u0000', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase553() throws Exception {
    char[] marg0 = { 'K', '[', 'K', '\u0000', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', 'k', '\u0000', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase554() throws Exception {
    char[] marg0 = { 'K', '[', 'K', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', 'k', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase555() throws Exception {
    char[] marg0 = { 'K', '[', 'K', '[', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', 'k', '[', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase556() throws Exception {
    char[] marg0 = { 'K', '[', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase557() throws Exception {
    char[] marg0 = { 'K', '[', 'K', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', 'k', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase558() throws Exception {
    char[] marg0 = { 'K', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase559() throws Exception {
    char[] marg0 = { 'K', '[', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase560() throws Exception {
    char[] marg0 = { 'K', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase561() throws Exception {
    char[] marg0 = { 'K', 'K', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase562() throws Exception {
    char[] marg0 = { 'K', 'K', '\u0000', '\u0000', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', '\u0000', '\u0000', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase563() throws Exception {
    char[] marg0 = { 'K', 'K', '\u0000', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', '\u0000', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase564() throws Exception {
    char[] marg0 = { 'K', 'K', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase565() throws Exception {
    char[] marg0 = { 'K', 'K', '\u0000', '[', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', '\u0000', '[', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase566() throws Exception {
    char[] marg0 = { 'K', 'K', '\u0000', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', '\u0000', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase567() throws Exception {
    char[] marg0 = { 'K', 'K', '\u0000', 'K', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', '\u0000', 'k', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase568() throws Exception {
    char[] marg0 = { 'K', 'K', '[', '\u0000', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', '[', '\u0000', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase569() throws Exception {
    char[] marg0 = { 'K', 'K', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase570() throws Exception {
    char[] marg0 = { 'K', 'K', '[', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', '[', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase571() throws Exception {
    char[] marg0 = { 'K', 'K', '[', '[', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', '[', '[', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase572() throws Exception {
    char[] marg0 = { 'K', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase573() throws Exception {
    char[] marg0 = { 'K', 'K', '[', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', '[', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase574() throws Exception {
    char[] marg0 = { 'K', 'K', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase575() throws Exception {
    char[] marg0 = { 'K', 'K', '[', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', '[', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase576() throws Exception {
    char[] marg0 = { 'K', 'K', 'K', '\u0000', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', 'k', '\u0000', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase577() throws Exception {
    char[] marg0 = { 'K', 'K', 'K', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', 'k', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase578() throws Exception {
    char[] marg0 = { 'K', 'K', 'K', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', 'k', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase579() throws Exception {
    char[] marg0 = { 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf49() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char marg1 = '\u0001';
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf50() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char marg1 = '\u0001';
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testTrim44() throws Exception {
    char[] obj0 = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim45() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim46() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim47() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim48() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim49() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim50() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim51() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim52() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim53() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim54() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim55() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim56() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim57() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim58() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim59() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim60() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim61() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim62() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim63() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim64() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim65() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim66() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim67() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim68() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim69() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim70() throws Exception {
    char[] obj0 = { ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim71() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim72() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim73() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim74() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim75() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim76() throws Exception {
    char[] obj0 = { ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim77() throws Exception {
    char[] obj0 = { ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim78() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', '\u0000' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim79() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim80() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim81() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim82() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim83() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim84() throws Exception {
    char[] obj0 = { ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim85() throws Exception {
    char[] obj0 = { ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim86() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', '\u0000', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim87() throws Exception {
    char[] obj0 = { ' ', ' ', ' ', ' ', '\u0000', ' ', '\u0000' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim88() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', '\u0000', '\u0000' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim89() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim90() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim91() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim92() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim93() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim94() throws Exception {
    char[] obj0 = { ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim95() throws Exception {
    char[] obj0 = { ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim96() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', '\u0000', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim97() throws Exception {
    char[] obj0 = { ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim98() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', '\u0000', '\u0000', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim99() throws Exception {
    char[] obj0 = { ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim100() throws Exception {
    char[] obj0 = { ' ', ' ', ' ', '\u0000', ' ', '\u0000' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim101() throws Exception {
    char[] marg0 = { ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim102() throws Exception {
    char[] marg0 = { ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim103() throws Exception {
    char[] marg0 = { ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim104() throws Exception {
    char[] marg0 = { ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim105() throws Exception {
    char[] marg0 = { ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim106() throws Exception {
    char[] obj0 = { ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim107() throws Exception {
    char[] obj0 = { ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim108() throws Exception {
    char[] marg0 = { ' ', ' ', '\u0000', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim109() throws Exception {
    char[] obj0 = { ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim110() throws Exception {
    char[] marg0 = { ' ', ' ', '\u0000', '\u0000', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim111() throws Exception {
    char[] obj0 = { ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim112() throws Exception {
    char[] obj0 = { ' ', ' ', '\u0000', ' ', '\u0000', ' ' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim113() throws Exception {
    char[] obj0 = { ' ', ' ', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim114() throws Exception {
    char[] marg0 = { ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim115() throws Exception {
    char[] marg0 = { ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim116() throws Exception {
    char[] marg0 = { ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim117() throws Exception {
    char[] marg0 = { ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim118() throws Exception {
    char[] marg0 = { ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim119() throws Exception {
    char[] obj0 = { ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim120() throws Exception {
    char[] obj0 = { ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim121() throws Exception {
    char[] marg0 = { ' ', '\u0000', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim122() throws Exception {
    char[] obj0 = { ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim123() throws Exception {
    char[] marg0 = { ' ', '\u0000', '\u0000', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim124() throws Exception {
    char[] obj0 = { ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim125() throws Exception {
    char[] obj0 = { ' ', '\u0000', ' ', '\u0000', ' ', ' ' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim126() throws Exception {
    char[] obj0 = { ' ', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ' ' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim127() throws Exception {
    char[] obj0 = { ' ', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim128() throws Exception {
    char[] marg0 = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim129() throws Exception {
    char[] marg0 = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim130() throws Exception {
    char[] marg0 = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim131() throws Exception {
    char[] marg0 = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim132() throws Exception {
    char[] marg0 = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim133() throws Exception {
    char[] obj0 = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim134() throws Exception {
    char[] obj0 = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim135() throws Exception {
    char[] marg0 = { '\u0000', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim136() throws Exception {
    char[] obj0 = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim137() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim138() throws Exception {
    char[] obj0 = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim139() throws Exception {
    char[] obj0 = { '\u0000', ' ', '\u0000', ' ', ' ', ' ' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim140() throws Exception {
    char[] obj0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ' ', ' ' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim141() throws Exception {
    char[] obj0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ' ' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim142() throws Exception {
    char[] obj0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim143() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIsPalindrome13() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringUtils.isPalindrome(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPalindrome14() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringUtils.isPalindrome(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPalindrome15() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringUtils.isPalindrome(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf51() throws Exception {
    char[] obj0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg0 = obj0;
    char[] marg1 = obj0;
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf52() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf53() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf54() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf55() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf56() throws Exception {
    char[] marg0 = { '\u0001', '\u0000', '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf57() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000', '\u0001' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf58() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf59() throws Exception {
    char[] marg0 = { '\u0001', '\u0000', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001' };
    char[] marg1 = { '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf60() throws Exception {
    char[] marg0 = { '\u0001', '\u0000', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001' };
    char[] marg1 = { '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf61() throws Exception {
    char[] marg0 = { '\u0001', '\u0001', '\u0000', '\u0000', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001' };
    char[] marg1 = { '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf62() throws Exception {
    char[] marg0 = { '\u0001', '\u0001', '\u0000', ' ', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001' };
    char[] marg1 = { '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf63() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf64() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf65() throws Exception {
    char[] marg0 = { '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf66() throws Exception {
    char[] marg0 = { '\u0002', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0002', '\u0000', '\u0002' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf67() throws Exception {
    char[] marg0 = { 'Ä', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf68() throws Exception {
    char[] marg0 = { '\u0001', '\u0000', '\u0000', '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf69() throws Exception {
    char[] marg0 = { '\u0001', '\u0000', '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf70() throws Exception {
    char[] marg0 = { '\u0001', '\u0000', '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf71() throws Exception {
    char[] marg0 = { '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf72() throws Exception {
    char[] marg0 = { '\u0001', '\u0000', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf73() throws Exception {
    char[] marg0 = { '\u0001', '\u0001', '\u0000', '\u0000', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf74() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf75() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0001' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testLongestNumericPalindrome9() throws Exception {
    char[] marg0 = { '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/', '/' };
    char[] retval = StringUtils.longestNumericPalindrome(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestNumericPalindrome10() throws Exception {
    char[] marg0 = { '/', '/', '/', '/', '/' };
    char[] retval = StringUtils.longestNumericPalindrome(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestNumericPalindrome11() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.longestNumericPalindrome(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestNumericPalindrome12() throws Exception {
    char[] marg0 = { '\u0000', ':', '\u0000', '\u0000' };
    char[] retval = StringUtils.longestNumericPalindrome(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestNumericPalindrome13() throws Exception {
    char[] marg0 = { '\u0000', '2', '\u0000', '\u0000' };
    char[] retval = StringUtils.longestNumericPalindrome(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestNumericPalindrome14() throws Exception {
    char[] marg0 = { 'È', 'È', 'È', 'È', 'È', 'È', 'È', 'È', 'È', 'È', 'È', 'È', 'È', 'È', 'È', 'È', 'È', 'È', 'È', 'È', 'È', 'È', 'È', 'È', 'È', 'È', 'È', 'È', 'È', 'È', 'È', 'È', 'È', 'È', 'È' };
    char[] retval = StringUtils.longestNumericPalindrome(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestNumericPalindrome15() throws Exception {
    char[] marg0 = { ':', ':', ':', ':' };
    char[] retval = StringUtils.longestNumericPalindrome(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestNumericPalindrome16() throws Exception {
    char[] marg0 = { '2', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.longestNumericPalindrome(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestNumericPalindrome17() throws Exception {
    char[] marg0 = { '2', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.longestNumericPalindrome(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestNumericPalindrome18() throws Exception {
    char[] marg0 = { '2', '\u0000', '\u0000', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2' };
    char[] retval = StringUtils.longestNumericPalindrome(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestNumericPalindrome19() throws Exception {
    char[] marg0 = { '2', '\u0000', '\u0000', '2' };
    char[] retval = StringUtils.longestNumericPalindrome(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestNumericPalindrome20() throws Exception {
    char[] marg0 = { '2', ':', '\u0000', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2' };
    char[] retval = StringUtils.longestNumericPalindrome(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestNumericPalindrome21() throws Exception {
    char[] marg0 = { '2', '2', '\u0000', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2' };
    char[] retval = StringUtils.longestNumericPalindrome(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestNumericPalindrome22() throws Exception {
    char[] marg0 = { '2', '\u0000', '\u0000', ':', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.longestNumericPalindrome(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestNumericPalindrome23() throws Exception {
    char[] marg0 = { '2', '\u0000', '\u0000', '\u008a' };
    char[] retval = StringUtils.longestNumericPalindrome(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestNumericPalindrome24() throws Exception {
    char[] marg0 = { '2', '\u0000', '2', '\u0000', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2' };
    char[] retval = StringUtils.longestNumericPalindrome(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestNumericPalindrome25() throws Exception {
    char[] marg0 = { '2', '\u0000', '2', '\u0000' };
    char[] retval = StringUtils.longestNumericPalindrome(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestNumericPalindrome26() throws Exception {
    char[] marg0 = { '2', '\u0000', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2' };
    char[] retval = StringUtils.longestNumericPalindrome(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestNumericPalindrome27() throws Exception {
    char[] marg0 = { '2', '\u0000', '2', ':', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2' };
    char[] retval = StringUtils.longestNumericPalindrome(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestNumericPalindrome28() throws Exception {
    char[] marg0 = { '2', '\u0000', '2' };
    char[] retval = StringUtils.longestNumericPalindrome(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestNumericPalindrome29() throws Exception {
    char[] marg0 = { '2', ':', '2', '\u0000', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2' };
    char[] retval = StringUtils.longestNumericPalindrome(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestNumericPalindrome30() throws Exception {
    char[] marg0 = { '2', ':', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2' };
    char[] retval = StringUtils.longestNumericPalindrome(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestNumericPalindrome31() throws Exception {
    char[] marg0 = { '2', ':', '2', ':', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2' };
    char[] retval = StringUtils.longestNumericPalindrome(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestNumericPalindrome32() throws Exception {
    char[] marg0 = { '2', ':', '2' };
    char[] retval = StringUtils.longestNumericPalindrome(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestNumericPalindrome33() throws Exception {
    char[] marg0 = { '0', '2', '0' };
    char[] retval = StringUtils.longestNumericPalindrome(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestNumericPalindrome34() throws Exception {
    char[] marg0 = { '3', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2' };
    char[] retval = StringUtils.longestNumericPalindrome(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestNumericPalindrome35() throws Exception {
    char[] marg0 = { '3', '2', '2' };
    char[] retval = StringUtils.longestNumericPalindrome(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestNumericPalindrome36() throws Exception {
    char[] marg0 = { '2', '\n', '\n', '\u0000', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n' };
    char[] retval = StringUtils.longestNumericPalindrome(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestNumericPalindrome37() throws Exception {
    char[] marg0 = { '2', ':', ':', '\u0000' };
    char[] retval = StringUtils.longestNumericPalindrome(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestNumericPalindrome38() throws Exception {
    char[] marg0 = { '2', '\u0000', ':', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2' };
    char[] retval = StringUtils.longestNumericPalindrome(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestNumericPalindrome39() throws Exception {
    char[] marg0 = { '2', ':', ':', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2' };
    char[] retval = StringUtils.longestNumericPalindrome(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestNumericPalindrome40() throws Exception {
    char[] marg0 = { '2', '2', ':', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2' };
    char[] retval = StringUtils.longestNumericPalindrome(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestNumericPalindrome41() throws Exception {
    char[] marg0 = { '2', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':', ':' };
    char[] retval = StringUtils.longestNumericPalindrome(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestNumericPalindrome42() throws Exception {
    char[] marg0 = { '2', ':', ':', ':' };
    char[] retval = StringUtils.longestNumericPalindrome(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter30() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter31() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '@' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter32() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter33() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter34() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'k' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter35() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u009b' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter36() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '2' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter37() throws Exception {
    char[] marg0 = { '\u0000', '@', '\u0000' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter38() throws Exception {
    char[] marg0 = { '\u0000', '@', '@' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter39() throws Exception {
    char[] marg0 = { '\u0000', '@', 'K' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter40() throws Exception {
    char[] marg0 = { '\u0000', '@', '[' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter41() throws Exception {
    char[] marg0 = { '\u0000', '@', 'k' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter42() throws Exception {
    char[] marg0 = { '\u0000', '@', '2' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter43() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter44() throws Exception {
    char[] marg0 = { '\u0000', 'K', ':' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter45() throws Exception {
    char[] marg0 = { '\u0000', 'K', '2' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter46() throws Exception {
    char[] marg0 = { '\u0000', 'K' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter47() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter48() throws Exception {
    char[] marg0 = { '\u0000', '[', '@' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter49() throws Exception {
    char[] marg0 = { '\u0000', '[', '`' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter50() throws Exception {
    char[] marg0 = { '\u0000', '[', 'k' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter51() throws Exception {
    char[] marg0 = { '\u0000', '[', '{' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter52() throws Exception {
    char[] marg0 = { '\u0000', '[', '2' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter53() throws Exception {
    char[] marg0 = { '\u0000', 'k', '\u0000' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter54() throws Exception {
    char[] marg0 = { '\u0000', 'k', ':' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter55() throws Exception {
    char[] marg0 = { '\u0000', 'k', '2' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter56() throws Exception {
    char[] marg0 = { '\u0000', 'k' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter57() throws Exception {
    char[] marg0 = { '\u0000', '\u001b', '\u0000' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter58() throws Exception {
    char[] marg0 = { '\u0000', '{', '@' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter59() throws Exception {
    char[] marg0 = { '\u0000', 'Ã', '2' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter60() throws Exception {
    char[] marg0 = { '\u0000', '2', '\u0000' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter61() throws Exception {
    char[] marg0 = { '\u0000', '2', '@' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter62() throws Exception {
    char[] marg0 = { '\u0000', '2', 'K' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter63() throws Exception {
    char[] marg0 = { '\u0000', '2', '[' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter64() throws Exception {
    char[] marg0 = { '\u0000', '2', 'k' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter65() throws Exception {
    char[] marg0 = { '\u0000', '2', 'Ã' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter66() throws Exception {
    char[] marg0 = { '\u0000', '2', '0' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter67() throws Exception {
    char[] marg0 = { '@', '\u0000', '\u0000' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter68() throws Exception {
    char[] marg0 = { '@', '\u0000', '@' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter69() throws Exception {
    char[] marg0 = { '@', '\u0000', 'K' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter70() throws Exception {
    char[] marg0 = { '@', '\u0000', '[' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter71() throws Exception {
    char[] marg0 = { '@', '\u0000', 'k' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter72() throws Exception {
    char[] marg0 = { '@', '\u0000', '2' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter73() throws Exception {
    char[] marg0 = { '@', '@', '\u0000' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter74() throws Exception {
    char[] marg0 = { '@', '@', '@' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter75() throws Exception {
    char[] marg0 = { '@', '@', '`' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter76() throws Exception {
    char[] marg0 = { '@', '@', 'k' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter77() throws Exception {
    char[] marg0 = { '@', '@', '{' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter78() throws Exception {
    char[] marg0 = { '@', '@', '2' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter79() throws Exception {
    char[] marg0 = { '@', 'K', '\u0000' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter80() throws Exception {
    char[] marg0 = { '@', 'K', ':' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter81() throws Exception {
    char[] marg0 = { '@', 'K', '2' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter82() throws Exception {
    char[] marg0 = { '@', 'Z' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter83() throws Exception {
    char[] marg0 = { '@', '[', '\u0000' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter84() throws Exception {
    char[] marg0 = { '@', '[', '@' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter85() throws Exception {
    char[] marg0 = { '@', '[', '2' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter86() throws Exception {
    char[] marg0 = { '@', 'k', '\u0000' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter87() throws Exception {
    char[] marg0 = { '@', 'l', '\n' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter88() throws Exception {
    char[] marg0 = { '@', 'k', '2' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter89() throws Exception {
    char[] marg0 = { '@', 'k' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter90() throws Exception {
    char[] marg0 = { '<', 'è', '\u0000' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter91() throws Exception {
    char[] marg0 = { '@', '[', ':' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter92() throws Exception {
    char[] marg0 = { '@', '2', '\u0000' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter93() throws Exception {
    char[] marg0 = { '@', '2', '@' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter94() throws Exception {
    char[] marg0 = { '@', '2', 'K' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter95() throws Exception {
    char[] marg0 = { '@', '2', '[' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter96() throws Exception {
    char[] marg0 = { '@', '2', 'k' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter97() throws Exception {
    char[] marg0 = { '@', '2', 'Ã' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter98() throws Exception {
    char[] marg0 = { '@', '2', '0' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter99() throws Exception {
    char[] marg0 = { 'K', '\u0000' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter100() throws Exception {
    char[] marg0 = { 'K', '@' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter101() throws Exception {
    char[] marg0 = { 'K', 'K', '\u0000' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter102() throws Exception {
    char[] marg0 = { 'K', 'K' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter103() throws Exception {
    char[] marg0 = { 'K', '[' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter104() throws Exception {
    char[] marg0 = { 'K', 'k', '\u0000' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter105() throws Exception {
    char[] marg0 = { 'Z', 'k', '\b' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter106() throws Exception {
    char[] marg0 = { 'K', 'k', '2' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter107() throws Exception {
    char[] marg0 = { 'K', 'k' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter108() throws Exception {
    char[] marg0 = { 'K', '{' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter109() throws Exception {
    char[] marg0 = { 'K', '0' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter110() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter111() throws Exception {
    char[] marg0 = { '[', '\u0000', '@' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter112() throws Exception {
    char[] marg0 = { '[', '\u0000', '`' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter113() throws Exception {
    char[] marg0 = { '[', '\u0000', 'k' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter114() throws Exception {
    char[] marg0 = { '[', '\u0000', '{' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter115() throws Exception {
    char[] marg0 = { '[', '\u0000', '2' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter116() throws Exception {
    char[] marg0 = { '[', '@', '\u0000' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter117() throws Exception {
    char[] marg0 = { '[', '@', '@' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter118() throws Exception {
    char[] marg0 = { '[', '@', '2' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter119() throws Exception {
    char[] marg0 = { '[', 'K', '\u0000' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter120() throws Exception {
    char[] marg0 = { '[', 'K', ':' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter121() throws Exception {
    char[] marg0 = { '[', 'K', '2' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter122() throws Exception {
    char[] marg0 = { '[', 'K' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter123() throws Exception {
    char[] marg0 = { '[', '[', '\u0000' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter124() throws Exception {
    char[] marg0 = { '[', '[', ':' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter125() throws Exception {
    char[] marg0 = { '[', '[', '2' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter126() throws Exception {
    char[] marg0 = { '[', 'k', '\u0000' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter127() throws Exception {
    char[] marg0 = { '\\', 'k', '\b' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter128() throws Exception {
    char[] marg0 = { '[', 'k', '2' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter129() throws Exception {
    char[] marg0 = { '[', 'k' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter130() throws Exception {
    char[] marg0 = { '[', 'Ã', '\u0000' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter131() throws Exception {
    char[] marg0 = { '[', 'Ã', ':' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter132() throws Exception {
    char[] marg0 = { '[', 'Ã', '2' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter133() throws Exception {
    char[] marg0 = { '[', '2', '\u0000' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter134() throws Exception {
    char[] marg0 = { '[', '2', '@' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter135() throws Exception {
    char[] marg0 = { '[', '2', 'K' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter136() throws Exception {
    char[] marg0 = { '[', '2', '[' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter137() throws Exception {
    char[] marg0 = { '[', '2', 'k' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter138() throws Exception {
    char[] marg0 = { '\\', '4', '{' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter139() throws Exception {
    char[] marg0 = { '[', '2', '0' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter140() throws Exception {
    char[] marg0 = { 'k', '\u0000' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter141() throws Exception {
    char[] marg0 = { 'k', '@' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter142() throws Exception {
    char[] marg0 = { 'k', 'K', '\u0000' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter143() throws Exception {
    char[] marg0 = { 'z', 'K', '\b' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter144() throws Exception {
    char[] marg0 = { 'k', 'K', '2' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter145() throws Exception {
    char[] marg0 = { 'k', 'K' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter146() throws Exception {
    char[] marg0 = { 'k', '[' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter147() throws Exception {
    char[] marg0 = { 'k', 'k', '\u0000' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter148() throws Exception {
    char[] marg0 = { 'k', 'k', ':' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter149() throws Exception {
    char[] marg0 = { 'k', 'k', '2' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter150() throws Exception {
    char[] marg0 = { 'k', 'k' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter151() throws Exception {
    char[] marg0 = { 'k', 'Ã' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter152() throws Exception {
    char[] marg0 = { 'k', '0' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter153() throws Exception {
    char[] marg0 = { 'Ã', '\u0000', '\u0000' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter154() throws Exception {
    char[] marg0 = { 'Ã', '\u0000', '@' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter155() throws Exception {
    char[] marg0 = { 'â', '\u0000', '2' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter156() throws Exception {
    char[] marg0 = { 'Ã', '@', '\u0000' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter157() throws Exception {
    char[] marg0 = { 'Ã', '@', ':' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter158() throws Exception {
    char[] marg0 = { 'Ã', '@', '2' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter159() throws Exception {
    char[] marg0 = { 'Ã', 'K', '\u0000' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter160() throws Exception {
    char[] marg0 = { 'Ã', 'K', ':' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter161() throws Exception {
    char[] marg0 = { 'Ã', 'K', '2' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter162() throws Exception {
    char[] marg0 = { 'Ã', 'K' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter163() throws Exception {
    char[] marg0 = { 'Ã', '[', '\u0000' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter164() throws Exception {
    char[] marg0 = { 'Ã', '[', ':' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter165() throws Exception {
    char[] marg0 = { 'Ã', '[', '2' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter166() throws Exception {
    char[] marg0 = { 'Ð', 'k', '\u0000' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter167() throws Exception {
    char[] marg0 = { '[', 'k', ':' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter168() throws Exception {
    char[] marg0 = { 'Ã', 'k' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter169() throws Exception {
    char[] marg0 = { '\u0000', 'Ã', '\u0000' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter170() throws Exception {
    char[] marg0 = { '{', 'ä', ':' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter171() throws Exception {
    char[] marg0 = { '{', 'ä', '2' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter172() throws Exception {
    char[] marg0 = { 'â', '2', '\u0000' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter173() throws Exception {
    char[] marg0 = { 'Ã', '2', '@' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter174() throws Exception {
    char[] marg0 = { 'Ã', '2', 'K' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter175() throws Exception {
    char[] marg0 = { 'Ã', '2', '[' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter176() throws Exception {
    char[] marg0 = { '{', '2', 'Ã' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter177() throws Exception {
    char[] marg0 = { 'Ã', '2', '0' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter178() throws Exception {
    char[] marg0 = { '2', '\u0000' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter179() throws Exception {
    char[] marg0 = { '2', '@' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter180() throws Exception {
    char[] marg0 = { '2', 'K' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter181() throws Exception {
    char[] marg0 = { '2', '[' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter182() throws Exception {
    char[] marg0 = { '2', 'k' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter183() throws Exception {
    char[] marg0 = { '2', '{' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter184() throws Exception {
    char[] marg0 = { '2', '0', '\u0000' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter185() throws Exception {
    char[] marg0 = { '2', '0', ':' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter186() throws Exception {
    char[] marg0 = { '2', '0', '2' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testLongestAlternatingDigitLetter187() throws Exception {
    char[] marg0 = { '2', '0' };
    char[] retval = StringUtils.longestAlternatingDigitLetter(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring39() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = 90;
    int marg2 = 99;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring40() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = 90;
    int marg2 = 100;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring41() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = 26;
    int marg2 = 35;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring42() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = -1;
    int marg2 = 79;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring43() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = -1;
    int marg2 = 8;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring44() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = -1;
    int marg2 = 36;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring45() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = -1;
    int marg2 = 9;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase580() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase581() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase582() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase583() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u001b', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u001b', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase584() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'è', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'è', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase585() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase586() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase587() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase588() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase589() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase590() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '[', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '[', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase591() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase592() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase593() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', 'K', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', 'k', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase594() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', 'K', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', 'k', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase595() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase596() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase597() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '[', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '[', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase598() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '[', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '[', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase599() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase600() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '[', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '[', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase601() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '[', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '[', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase602() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '[', '[', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '[', '[', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase603() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '[', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '[', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase604() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '[', 'K', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '[', 'k', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase605() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '[', 'K', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '[', 'k', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase606() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase607() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', 'K', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', 'k', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }
}
