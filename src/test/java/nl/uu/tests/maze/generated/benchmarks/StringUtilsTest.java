// Auto-generated by MAZE
package nl.uu.tests.maze.generated.benchmarks;

import java.lang.Exception;
import java.lang.NullPointerException;
import nl.uu.maze.benchmarks.StringUtils;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class StringUtilsTest {
  @Test
  public void testReverse1() throws Exception {
    char[] marg0 = null;
    Assertions.assertThrows(NullPointerException.class, () -> StringUtils.reverse(marg0));
  }

  @Test
  public void testToLowerCase1() throws Exception {
    char[] marg0 = null;
    Assertions.assertThrows(NullPointerException.class, () -> StringUtils.toLowerCase(marg0));
  }

  @Test
  public void testIsNumeric1() throws Exception {
    char[] marg0 = null;
    Assertions.assertThrows(NullPointerException.class, () -> StringUtils.isNumeric(marg0));
  }

  @Test
  public void testToUpperCase1() throws Exception {
    char[] marg0 = null;
    Assertions.assertThrows(NullPointerException.class, () -> StringUtils.toUpperCase(marg0));
  }

  @Test
  public void testIsPalindrome1() throws Exception {
    char[] marg0 = null;
    Assertions.assertThrows(NullPointerException.class, () -> StringUtils.isPalindrome(marg0));
  }

  @Test
  public void testTrim1() throws Exception {
    char[] marg0 = null;
    Assertions.assertThrows(NullPointerException.class, () -> StringUtils.trim(marg0));
  }

  @Test
  public void testIsNumeric2() throws Exception {
    char[] marg0 = {};
    boolean retval = StringUtils.isNumeric(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf1() throws Exception {
    char[] marg0 = null;
    char marg1 = '\u0000';
    Assertions.assertThrows(NullPointerException.class, () -> StringUtils.indexOf(marg0, marg1));
  }

  @Test
  public void testIndexOf2() throws Exception {
    char[] marg0 = null;
    char[] marg1 = {};
    Assertions.assertThrows(NullPointerException.class, () -> StringUtils.indexOf(marg0, marg1));
  }

  @Test
  public void testSubstring1() throws Exception {
    char[] marg0 = null;
    int marg1 = 0;
    int marg2 = 0;
    Assertions.assertThrows(NullPointerException.class, () -> StringUtils.substring(marg0, marg1, marg2));
  }

  @Test
  public void testSubstring2() throws Exception {
    char[] marg0 = null;
    int marg1 = -1;
    int marg2 = 0;
    Assertions.assertThrows(NullPointerException.class, () -> StringUtils.substring(marg0, marg1, marg2));
  }

  @Test
  public void testIndexOf3() throws Exception {
    char[] marg0 = {};
    char marg1 = '\u0000';
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf4() throws Exception {
    char[] marg0 = {};
    char[] marg1 = null;
    Assertions.assertThrows(NullPointerException.class, () -> StringUtils.indexOf(marg0, marg1));
  }

  @Test
  public void testIsPalindrome2() throws Exception {
    char[] marg0 = {};
    boolean retval = StringUtils.isPalindrome(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf5() throws Exception {
    char[] marg0 = { '\u0000' };
    char marg1 = '\u0000';
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testReverse2() throws Exception {
    char[] marg0 = {};
    char[] retval = StringUtils.reverse(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase2() throws Exception {
    char[] marg0 = {};
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase2() throws Exception {
    char[] marg0 = {};
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf6() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsNumeric3() throws Exception {
    char[] marg0 = { '/' };
    boolean retval = StringUtils.isNumeric(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf7() throws Exception {
    char[] marg0 = { '\u0000' };
    char marg1 = 'ï¿¿';
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsNumeric4() throws Exception {
    char[] marg0 = { ':' };
    boolean retval = StringUtils.isNumeric(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf8() throws Exception {
    char[] marg0 = { '\u0001', '\u0000' };
    char marg1 = '\u0000';
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPalindrome3() throws Exception {
    char[] marg0 = { '\u0000', '\u0001' };
    boolean retval = StringUtils.isPalindrome(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSubstring3() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = 93;
    int marg2 = 93;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIsNumeric5() throws Exception {
    char[] marg0 = { '2' };
    boolean retval = StringUtils.isNumeric(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPalindrome4() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    boolean retval = StringUtils.isPalindrome(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSubstring4() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = 3;
    int marg2 = 2;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring5() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = 32;
    int marg2 = 33;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring6() throws Exception {
    char[] marg0 = {};
    int marg1 = -1;
    int marg2 = 0;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf9() throws Exception {
    char[] obj0 = {};
    char[] marg0 = obj0;
    char[] marg1 = obj0;
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf10() throws Exception {
    char[] marg0 = {};
    char[] marg1 = {};
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testToLowerCase3() throws Exception {
    char[] marg0 = { '@' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '@' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring7() throws Exception {
    char[] marg0 = {};
    int marg1 = 1;
    int marg2 = 1;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring8() throws Exception {
    char[] marg0 = {};
    int marg1 = -1;
    int marg2 = -2147483647;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring9() throws Exception {
    char[] marg0 = {};
    int marg1 = -1;
    int marg2 = 1;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIsNumeric6() throws Exception {
    char[] marg0 = { '2', '\u0000' };
    boolean retval = StringUtils.isNumeric(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testToUpperCase3() throws Exception {
    char[] marg0 = { '`' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '`' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf11() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    char marg1 = '@';
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testReverse3() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] retval = StringUtils.reverse(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIsNumeric7() throws Exception {
    char[] marg0 = { '2', ':' };
    boolean retval = StringUtils.isNumeric(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testToLowerCase4() throws Exception {
    char[] marg0 = { '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase4() throws Exception {
    char[] marg0 = { '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf12() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000' };
    char marg1 = '\u0000';
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSubstring10() throws Exception {
    char[] marg0 = { '\u0000' };
    int marg1 = 0;
    int marg2 = 1;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIsNumeric8() throws Exception {
    char[] marg0 = { '2', '2' };
    boolean retval = StringUtils.isNumeric(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSubstring11() throws Exception {
    char[] marg0 = { '\u0000' };
    int marg1 = 0;
    int marg2 = 2;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring12() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    int marg1 = -1;
    int marg2 = 1;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase5() throws Exception {
    char[] marg0 = { 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring13() throws Exception {
    char[] marg0 = { '\u0000' };
    int marg1 = -1;
    int marg2 = 2;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIsNumeric9() throws Exception {
    char[] marg0 = { '2', '2', '\u0000' };
    boolean retval = StringUtils.isNumeric(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testToUpperCase5() throws Exception {
    char[] marg0 = { 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf13() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000' };
    char marg1 = '\u0001';
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPalindrome5() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringUtils.isPalindrome(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsNumeric10() throws Exception {
    char[] marg0 = { '2', '2', ':' };
    boolean retval = StringUtils.isNumeric(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf14() throws Exception {
    char[] obj0 = { '\u0000' };
    char[] marg0 = obj0;
    char[] marg1 = obj0;
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf15() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] marg1 = { '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPalindrome6() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringUtils.isPalindrome(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testToLowerCase6() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase6() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf16() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char marg1 = '\u0001';
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSubstring14() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = 2;
    int marg2 = 4;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIsNumeric11() throws Exception {
    char[] marg0 = { '2', '2', '2' };
    boolean retval = StringUtils.isNumeric(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testTrim2() throws Exception {
    char[] marg0 = {};
    char[] retval = StringUtils.trim(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testReverse4() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    char[] retval = StringUtils.reverse(marg0);

    char[] expected = { '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf17() throws Exception {
    char[] marg0 = { 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿', 'ï¿¿' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testToLowerCase7() throws Exception {
    char[] marg0 = { '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase8() throws Exception {
    char[] marg0 = { '\\', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\\', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring15() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    int marg1 = 0;
    int marg2 = 3;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring16() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    int marg1 = -1;
    int marg2 = 2;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase7() throws Exception {
    char[] marg0 = { '\u0000', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase8() throws Exception {
    char[] marg0 = { '\u0080', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0080', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring17() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    int marg1 = -1;
    int marg2 = 3;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIsNumeric12() throws Exception {
    char[] marg0 = { '2', '2', '2', '\u0000', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2' };
    boolean retval = StringUtils.isNumeric(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf18() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000' };
    char marg1 = '\u0001';
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testToLowerCase9() throws Exception {
    char[] marg0 = { '\u001b', '\u001b' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001b', '\u001b' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIsNumeric13() throws Exception {
    char[] marg0 = { '2', '2', '2', ':', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2' };
    boolean retval = StringUtils.isNumeric(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testToUpperCase9() throws Exception {
    char[] marg0 = { '\u001b', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u001b', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase10() throws Exception {
    char[] marg0 = { '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase11() throws Exception {
    char[] marg0 = { 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase10() throws Exception {
    char[] marg0 = { '\u0000', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase11() throws Exception {
    char[] marg0 = { 'k', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim3() throws Exception {
    char[] marg0 = { ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf19() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char marg1 = '\u0001';
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSubstring18() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = 2;
    int marg2 = 5;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIsNumeric14() throws Exception {
    char[] marg0 = { '2', '2', '2', '2' };
    boolean retval = StringUtils.isNumeric(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf20() throws Exception {
    char[] obj0 = { '\u0000', '\u0000' };
    char[] marg0 = obj0;
    char[] marg1 = obj0;
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf21() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPalindrome7() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringUtils.isPalindrome(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testToLowerCase12() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase13() throws Exception {
    char[] marg0 = { '[', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase14() throws Exception {
    char[] marg0 = { 'K', '\u001b' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u001b' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring19() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000' };
    int marg1 = 0;
    int marg2 = 4;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring20() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = -1;
    int marg2 = 3;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase12() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase13() throws Exception {
    char[] marg0 = { '{', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIsPalindrome8() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringUtils.isPalindrome(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testSubstring21() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000' };
    int marg1 = -1;
    int marg2 = 4;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIsNumeric15() throws Exception {
    char[] marg0 = { '2', '2', '2', '2', '\u0000', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2' };
    boolean retval = StringUtils.isNumeric(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf22() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char marg1 = '\u0004';
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf23() throws Exception {
    char[] marg0 = { '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testToLowerCase15() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase16() throws Exception {
    char[] marg0 = { '\u0000', '`', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '`', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase17() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIsNumeric16() throws Exception {
    char[] marg0 = { '2', '2', '2', '2', ':', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2' };
    boolean retval = StringUtils.isNumeric(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testToUpperCase14() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase15() throws Exception {
    char[] marg0 = { '\u0000', '\u0080', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0080', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase16() throws Exception {
    char[] marg0 = { '{', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim4() throws Exception {
    char[] marg0 = { ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testReverse5() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.reverse(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase18() throws Exception {
    char[] marg0 = { 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase17() throws Exception {
    char[] marg0 = { 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf24() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char marg1 = '\u0001';
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testToLowerCase19() throws Exception {
    char[] marg0 = { '\u0000', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase20() throws Exception {
    char[] marg0 = { 'k', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase21() throws Exception {
    char[] marg0 = { 'k', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring22() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = 2;
    int marg2 = 6;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIsNumeric17() throws Exception {
    char[] marg0 = { '2', '2', '2', '2', '2' };
    boolean retval = StringUtils.isNumeric(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testToUpperCase18() throws Exception {
    char[] marg0 = { '\u0000', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase19() throws Exception {
    char[] marg0 = { '\u008b', '\u0000', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u008b', '\u0000', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase20() throws Exception {
    char[] marg0 = { '\u008b', '{', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u008b', '{', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim5() throws Exception {
    char[] marg0 = { '\u0000' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase22() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase23() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase24() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring23() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = 29;
    int marg2 = 34;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring24() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = -1;
    int marg2 = 4;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase21() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase22() throws Exception {
    char[] marg0 = { '\u0000', 'k', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'K', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase23() throws Exception {
    char[] marg0 = { 'k', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase25() throws Exception {
    char[] marg0 = { '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring25() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = -1;
    int marg2 = 5;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIsNumeric18() throws Exception {
    char[] marg0 = { '2', '2', '2', '2', '2', '\u0000', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2' };
    boolean retval = StringUtils.isNumeric(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testToUpperCase24() throws Exception {
    char[] marg0 = { '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim6() throws Exception {
    char[] marg0 = { ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf25() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char marg1 = '\u0001';
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf26() throws Exception {
    char[] obj0 = { '\u0000', '\u0000', '\u0000' };
    char[] marg0 = obj0;
    char[] marg1 = obj0;
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf27() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testToLowerCase26() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase27() throws Exception {
    char[] marg0 = { '\u0000', '[', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase28() throws Exception {
    char[] marg0 = { '\u0000', 'K', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase29() throws Exception {
    char[] marg0 = { 'k', '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase30() throws Exception {
    char[] marg0 = { 'k', 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase31() throws Exception {
    char[] marg0 = { 'K', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase32() throws Exception {
    char[] marg0 = { 'K', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIsNumeric19() throws Exception {
    char[] marg0 = { '2', '2', '2', '2', '2', ':', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2' };
    boolean retval = StringUtils.isNumeric(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testToUpperCase25() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase26() throws Exception {
    char[] marg0 = { '\u0000', '{', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase27() throws Exception {
    char[] marg0 = { '\u0000', 'k', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'K', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase28() throws Exception {
    char[] marg0 = { '\u008b', '\u0000', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u008b', '\u0000', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase29() throws Exception {
    char[] marg0 = { '\u008b', 'k', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u008b', 'K', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase30() throws Exception {
    char[] marg0 = { 'k', '\u0000', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase31() throws Exception {
    char[] marg0 = { 'k', '{', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '{', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf28() throws Exception {
    char[] marg0 = { '\u0001', '\u0000' };
    char[] marg1 = { '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPalindrome9() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringUtils.isPalindrome(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testTrim7() throws Exception {
    char[] marg0 = { ' ', '\u0000' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim8() throws Exception {
    char[] marg0 = { '\u0000', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf29() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\b', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char marg1 = '\b';
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 6;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf30() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPalindrome10() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringUtils.isPalindrome(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testToLowerCase33() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase34() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase35() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase36() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase37() throws Exception {
    char[] marg0 = { '[', '[', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase38() throws Exception {
    char[] marg0 = { '[', 'K', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase39() throws Exception {
    char[] marg0 = { 'K', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring26() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = 0;
    int marg2 = 5;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIsNumeric20() throws Exception {
    char[] marg0 = { '2', '2', '2', '2', '2', '2' };
    boolean retval = StringUtils.isNumeric(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testToUpperCase32() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase33() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '{', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '{', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase34() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase35() throws Exception {
    char[] marg0 = { '{', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase36() throws Exception {
    char[] marg0 = { '{', '{', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '{', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase37() throws Exception {
    char[] marg0 = { '{', 'k', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', 'K', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase38() throws Exception {
    char[] marg0 = { 'k', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim9() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf31() throws Exception {
    char[] marg0 = { '\u0000', '\u0000' };
    char[] marg1 = { '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testToLowerCase40() throws Exception {
    char[] marg0 = { '\u0000', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase41() throws Exception {
    char[] marg0 = { 'K', '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase42() throws Exception {
    char[] marg0 = { 'K', 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring27() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = 28;
    int marg2 = 34;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring28() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = -1;
    int marg2 = 5;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase39() throws Exception {
    char[] marg0 = { '\u0000', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase40() throws Exception {
    char[] marg0 = { 'k', '\u0000', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase41() throws Exception {
    char[] marg0 = { 'k', 'k', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', 'K', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim10() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testReverse6() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.reverse(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase43() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase44() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase45() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase46() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase47() throws Exception {
    char[] marg0 = { '[', '\u0000', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase48() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring29() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = -1;
    int marg2 = 6;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIsNumeric21() throws Exception {
    char[] marg0 = { '4', '2', '2', '2', '2', '2', '\u0000', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2' };
    boolean retval = StringUtils.isNumeric(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testToUpperCase42() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase43() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', '\u0000', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase44() throws Exception {
    char[] marg0 = { '\u0000', '{', '{', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', '{', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase45() throws Exception {
    char[] marg0 = { '{', '\u0000', '\u0000', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', '\u0000', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase46() throws Exception {
    char[] marg0 = { '{', '\u0000', '{', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', '{', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase47() throws Exception {
    char[] marg0 = { '{', '{', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '{', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf32() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char marg1 = '\b';
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testToLowerCase49() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase50() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase51() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase52() throws Exception {
    char[] marg0 = { '[', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase53() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase54() throws Exception {
    char[] marg0 = { 'K', '[', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase55() throws Exception {
    char[] marg0 = { 'K', 'K', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIsNumeric22() throws Exception {
    char[] marg0 = { '2', '2', '2', '2', '2', '2', ':', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2' };
    boolean retval = StringUtils.isNumeric(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testToUpperCase48() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase49() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'k', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'K', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase50() throws Exception {
    char[] marg0 = { '\u0000', 'k', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'K', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase51() throws Exception {
    char[] marg0 = { '{', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase52() throws Exception {
    char[] marg0 = { 'k', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase53() throws Exception {
    char[] marg0 = { 'k', '{', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '{', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase54() throws Exception {
    char[] marg0 = { 'k', 'k', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', 'K', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim11() throws Exception {
    char[] marg0 = { ' ', ' ', '\u0000' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim12() throws Exception {
    char[] marg0 = { ' ', '\u0000', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim13() throws Exception {
    char[] marg0 = { '\u0000', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase56() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u001b', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u001b', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase57() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u001b', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u001b', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase58() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase59() throws Exception {
    char[] marg0 = { '[', '[', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase55() throws Exception {
    char[] marg0 = { '{', '{', '\u0000', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '{', '\u0000', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase56() throws Exception {
    char[] marg0 = { '{', '{', '{', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '{', '{', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim14() throws Exception {
    char[] marg0 = { ' ', '\u0000', '\u0000' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim15() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf33() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ' ', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char marg1 = ' ';
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 7;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf34() throws Exception {
    char[] obj0 = { '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg0 = obj0;
    char[] marg1 = obj0;
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf35() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testToLowerCase60() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase61() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase62() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'k', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase63() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase64() throws Exception {
    char[] marg0 = { '\u0000', '[', 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase65() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase66() throws Exception {
    char[] marg0 = { '\u0000', 'K', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase67() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase68() throws Exception {
    char[] marg0 = { '[', '\u0000', 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase69() throws Exception {
    char[] marg0 = { '[', 'K', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase70() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase71() throws Exception {
    char[] marg0 = { 'K', '\u0000', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase72() throws Exception {
    char[] marg0 = { 'K', '[', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring30() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = 1;
    int marg2 = 7;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIsNumeric23() throws Exception {
    char[] marg0 = { '2', '2', '2', '2', '2', '2', '2' };
    boolean retval = StringUtils.isNumeric(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testToUpperCase57() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase58() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '{', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '{', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase59() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'k', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'K', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase60() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', '\u0000', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase61() throws Exception {
    char[] marg0 = { '\u0000', '{', 'k', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', 'K', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase62() throws Exception {
    char[] marg0 = { '\u0000', 'k', '\u0000', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'K', '\u0000', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase63() throws Exception {
    char[] marg0 = { '\u0000', 'k', '{', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'K', '{', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase64() throws Exception {
    char[] marg0 = { '{', '\u0000', '\u0000', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', '\u0000', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase65() throws Exception {
    char[] marg0 = { '{', '\u0000', 'k', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', 'K', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase66() throws Exception {
    char[] marg0 = { '{', 'k', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', 'K', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase67() throws Exception {
    char[] marg0 = { 'k', '\u0000', '\u0000', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', '\u0000', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase68() throws Exception {
    char[] marg0 = { 'k', '\u0000', '{', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', '{', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase69() throws Exception {
    char[] marg0 = { 'k', '{', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '{', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim16() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim17() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf36() throws Exception {
    char[] marg0 = { '\u0001', '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testToLowerCase73() throws Exception {
    char[] marg0 = { '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase74() throws Exception {
    char[] marg0 = { 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring31() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = 27;
    int marg2 = 34;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring32() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = -1;
    int marg2 = 6;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase70() throws Exception {
    char[] marg0 = { '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase71() throws Exception {
    char[] marg0 = { 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf37() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPalindrome11() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringUtils.isPalindrome(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testToLowerCase75() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase76() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase77() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase78() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase79() throws Exception {
    char[] marg0 = { '\u0000', '\u001b', 'à ', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u001b', 'à ', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase80() throws Exception {
    char[] marg0 = { '\u0000', '\u001b', 'K', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u001b', 'k', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase81() throws Exception {
    char[] marg0 = { '\u0000', 'P', '\u001b', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'p', '\u001b', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase82() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase83() throws Exception {
    char[] marg0 = { '[', '\u0000', 'à ', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', 'à ', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase84() throws Exception {
    char[] marg0 = { '[', '\u0000', 'K', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', 'k', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase85() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase86() throws Exception {
    char[] marg0 = { '[', '[', 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase87() throws Exception {
    char[] marg0 = { '[', 'K', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase88() throws Exception {
    char[] marg0 = { '[', 'K', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase89() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u001b', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u001b', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase90() throws Exception {
    char[] marg0 = { 'K', '[', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase91() throws Exception {
    char[] marg0 = { 'K', '[', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring33() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = -1;
    int marg2 = 7;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIsNumeric24() throws Exception {
    char[] marg0 = { '2', '2', '2', '2', '2', '2', '2', '\u0000', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2' };
    boolean retval = StringUtils.isNumeric(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testToUpperCase72() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase73() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '{', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '{', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase74() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '{', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '{', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase75() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase76() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'à ', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'à ', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase77() throws Exception {
    char[] marg0 = { '\u0000', 'p', '\u0000', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'P', '\u0000', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase78() throws Exception {
    char[] marg0 = { '{', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase79() throws Exception {
    char[] marg0 = { '{', '\u0000', 'à ', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', 'à ', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase80() throws Exception {
    char[] marg0 = { '{', '\u0000', 'k', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', 'K', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase81() throws Exception {
    char[] marg0 = { '{', '{', '\u0000', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '{', '\u0000', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase82() throws Exception {
    char[] marg0 = { '{', '{', 'k', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '{', 'K', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase83() throws Exception {
    char[] marg0 = { '{', 'k', '\u0000', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', 'K', '\u0000', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase84() throws Exception {
    char[] marg0 = { '{', 'k', '{', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', 'K', '{', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase85() throws Exception {
    char[] marg0 = { 'k', '{', '\u0000', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '{', '\u0000', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase86() throws Exception {
    char[] marg0 = { 'k', '{', '{', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '{', '{', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim18() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', '\u0000' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim19() throws Exception {
    char[] marg0 = { ' ', ' ', '\u0000', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim20() throws Exception {
    char[] marg0 = { ' ', '\u0000', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim21() throws Exception {
    char[] marg0 = { '\u0000', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf38() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char marg1 = '\u0001';
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf39() throws Exception {
    char[] marg0 = { '\u0000', '\u0001', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf40() throws Exception {
    char[] marg0 = { '\u0001', '\u0000', '\u0001' };
    char[] marg1 = { '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPalindrome12() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringUtils.isPalindrome(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testToLowerCase92() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase93() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase94() throws Exception {
    char[] marg0 = { '\u0000', 'K', 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase95() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase96() throws Exception {
    char[] marg0 = { 'K', '\u0000', 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase97() throws Exception {
    char[] marg0 = { 'K', 'K', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIsNumeric25() throws Exception {
    char[] marg0 = { '2', '2', '2', '2', '2', '2', '2', ':', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2' };
    boolean retval = StringUtils.isNumeric(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testToUpperCase87() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase88() throws Exception {
    char[] marg0 = { '\u0000', 'k', '\u0000', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'K', '\u0000', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase89() throws Exception {
    char[] marg0 = { '\u0000', 'k', 'k', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'K', 'K', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase90() throws Exception {
    char[] marg0 = { 'k', '\u0000', '\u0000', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', '\u0000', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase91() throws Exception {
    char[] marg0 = { 'k', '\u0000', 'k', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', 'K', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase92() throws Exception {
    char[] marg0 = { 'k', 'k', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', 'K', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim22() throws Exception {
    char[] marg0 = { ' ', ' ', '\u0000', '\u0000' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim23() throws Exception {
    char[] marg0 = { ' ', '\u0000', '\u0000', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim24() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase98() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase99() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase100() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase101() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase102() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase103() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '[', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase104() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase105() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase106() throws Exception {
    char[] marg0 = { '[', '\u0000', '[', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '[', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase107() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase108() throws Exception {
    char[] marg0 = { '[', '[', '[', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '[', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase109() throws Exception {
    char[] marg0 = { '[', '[', 'K', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', 'k', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase110() throws Exception {
    char[] marg0 = { '[', 'K', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase111() throws Exception {
    char[] marg0 = { 'K', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase93() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase94() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '{', '\u0000', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '{', '\u0000', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase95() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '{', '{', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '{', '{', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase96() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', '\u0000', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', '\u0000', '\u0000', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase97() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', '{', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', '\u0000', '{', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase98() throws Exception {
    char[] marg0 = { '\u0000', '{', '{', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', '{', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase99() throws Exception {
    char[] marg0 = { '{', '\u0000', '\u0000', '\u0000', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', '\u0000', '\u0000', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase100() throws Exception {
    char[] marg0 = { '{', '\u0000', '\u0000', '{', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', '\u0000', '{', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase101() throws Exception {
    char[] marg0 = { '{', '\u0000', '{', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', '{', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase102() throws Exception {
    char[] marg0 = { '{', '{', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '{', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase103() throws Exception {
    char[] marg0 = { '{', '{', '{', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '{', '{', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase104() throws Exception {
    char[] marg0 = { '{', '{', 'k', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '{', 'K', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase105() throws Exception {
    char[] marg0 = { '{', 'k', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', 'K', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase106() throws Exception {
    char[] marg0 = { 'k', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim25() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim26() throws Exception {
    char[] marg0 = { ' ', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim27() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf41() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char marg1 = '\u0001';
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 8;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testReverse7() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.reverse(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase112() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase113() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase114() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'k', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase115() throws Exception {
    char[] marg0 = { '\u0000', '\u001b', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u001b', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase116() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase117() throws Exception {
    char[] marg0 = { '\u0000', 'K', 'à ', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', 'à ', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase118() throws Exception {
    char[] marg0 = { '\u0000', 'K', 'K', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', 'k', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase119() throws Exception {
    char[] marg0 = { '[', '\u0000', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase120() throws Exception {
    char[] marg0 = { '[', 'K', '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase121() throws Exception {
    char[] marg0 = { '[', 'K', 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase122() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase123() throws Exception {
    char[] marg0 = { 'K', '\u0000', 'à ', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', 'à ', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase124() throws Exception {
    char[] marg0 = { 'K', '\u0000', 'K', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', 'k', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase125() throws Exception {
    char[] marg0 = { 'K', '[', '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase126() throws Exception {
    char[] marg0 = { 'K', '[', 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase127() throws Exception {
    char[] marg0 = { 'K', 'K', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase128() throws Exception {
    char[] marg0 = { 'K', 'K', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring34() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = 2;
    int marg2 = 9;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIsNumeric26() throws Exception {
    char[] marg0 = { '2', '2', '2', '2', '2', '2', '2', '2' };
    boolean retval = StringUtils.isNumeric(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testToUpperCase107() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase108() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', 'k', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', 'K', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase109() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'k', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'K', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase110() throws Exception {
    char[] marg0 = { '\u0000', 'k', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'K', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase111() throws Exception {
    char[] marg0 = { '\u0000', 'k', 'à ', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'K', 'à ', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase112() throws Exception {
    char[] marg0 = { '\u0000', 'k', 'k', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'K', 'K', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase113() throws Exception {
    char[] marg0 = { '{', '\u0000', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase114() throws Exception {
    char[] marg0 = { '{', 'k', '\u0000', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', 'K', '\u0000', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase115() throws Exception {
    char[] marg0 = { '{', 'k', 'k', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', 'K', 'K', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase116() throws Exception {
    char[] marg0 = { 'k', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase117() throws Exception {
    char[] marg0 = { 'k', '\u0000', 'à ', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', 'à ', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase118() throws Exception {
    char[] marg0 = { 'k', '\u0000', 'k', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', 'K', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase119() throws Exception {
    char[] marg0 = { 'k', '{', '\u0000', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '{', '\u0000', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase120() throws Exception {
    char[] marg0 = { 'k', '{', 'k', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '{', 'K', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase121() throws Exception {
    char[] marg0 = { 'k', 'k', '\u0000', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', 'K', '\u0000', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase122() throws Exception {
    char[] marg0 = { 'k', 'k', '{', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', 'K', '{', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim28() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase129() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase130() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase131() throws Exception {
    char[] marg0 = { '\u0000', '`', 'È', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '`', 'È', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase132() throws Exception {
    char[] marg0 = { '\u0000', '`', 'È', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '`', 'È', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase133() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase134() throws Exception {
    char[] marg0 = { '[', '\u0000', 'È', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', 'È', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase135() throws Exception {
    char[] marg0 = { '[', '\u0000', 'È', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', 'È', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase136() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '\u0000', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase137() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '\u0000', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase138() throws Exception {
    char[] marg0 = { '[', '`', '\u001b', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '`', '\u001b', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring35() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = 25;
    int marg2 = 33;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring36() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = -1;
    int marg2 = 7;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase123() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase124() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', '\u0000', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase125() throws Exception {
    char[] marg0 = { '\u0000', '\u0080', 'È', '\u0000', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0080', 'È', '\u0000', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase126() throws Exception {
    char[] marg0 = { '\u0000', '\u0080', 'È', '{', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0080', 'È', '{', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase127() throws Exception {
    char[] marg0 = { '{', '\u0000', '\u0000', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', '\u0000', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase128() throws Exception {
    char[] marg0 = { '{', '\u0000', 'È', '\u0000', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', 'È', '\u0000', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase129() throws Exception {
    char[] marg0 = { '{', '\u0000', 'È', '{', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', 'È', '{', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase130() throws Exception {
    char[] marg0 = { '{', '{', '\u0000', '\u0000', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '{', '\u0000', '\u0000', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase131() throws Exception {
    char[] marg0 = { '{', '{', '\u0000', '{', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '{', '\u0000', '{', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase132() throws Exception {
    char[] marg0 = { '{', '\u0080', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0080', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim29() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', '\u0000' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim30() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', '\u0000', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim31() throws Exception {
    char[] marg0 = { ' ', ' ', '\u0000', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim32() throws Exception {
    char[] marg0 = { ' ', '\u0000', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim33() throws Exception {
    char[] marg0 = { '\u0000', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf42() throws Exception {
    char[] obj0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg0 = obj0;
    char[] marg1 = obj0;
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf43() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testToLowerCase139() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase140() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '[', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '[', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase141() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', 'K', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', 'k', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase142() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase143() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase144() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'k', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase145() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'k', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase146() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase147() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase148() throws Exception {
    char[] marg0 = { '\u0000', '[', 'K', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', 'k', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase149() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '\u0000', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase150() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '\u0000', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase151() throws Exception {
    char[] marg0 = { '\u0000', 'K', '[', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '[', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase152() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase153() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase154() throws Exception {
    char[] marg0 = { '[', '\u0000', 'K', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', 'k', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase155() throws Exception {
    char[] marg0 = { '[', '[', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase156() throws Exception {
    char[] marg0 = { '[', 'K', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase157() throws Exception {
    char[] marg0 = { '[', 'K', '[', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '[', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase158() throws Exception {
    char[] marg0 = { '[', 'K', 'K', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', 'k', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase159() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u0000', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u0000', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase160() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u0000', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u0000', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase161() throws Exception {
    char[] marg0 = { 'K', '\u0000', '[', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '[', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase162() throws Exception {
    char[] marg0 = { 'K', '[', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase163() throws Exception {
    char[] marg0 = { 'K', '[', '[', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '[', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase164() throws Exception {
    char[] marg0 = { 'K', '[', 'K', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', 'k', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase165() throws Exception {
    char[] marg0 = { 'K', 'K', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring37() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = -1;
    int marg2 = 8;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIsNumeric27() throws Exception {
    char[] marg0 = { '2', '2', '2', '2', '2', '2', '2', '2', '\u0000', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2' };
    boolean retval = StringUtils.isNumeric(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testToUpperCase133() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase134() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '{', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '{', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase135() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', 'k', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', 'K', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase136() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '{', '\u0000', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '{', '\u0000', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase137() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '{', 'k', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '{', 'K', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase138() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'k', '\u0000', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'K', '\u0000', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase139() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'k', '{', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'K', '{', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase140() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', '\u0000', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', '\u0000', '\u0000', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase141() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', 'k', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', '\u0000', 'K', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase142() throws Exception {
    char[] marg0 = { '\u0000', '{', 'k', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', 'K', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase143() throws Exception {
    char[] marg0 = { '\u0000', 'k', '\u0000', '\u0000', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'K', '\u0000', '\u0000', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase144() throws Exception {
    char[] marg0 = { '\u0000', 'k', '\u0000', '{', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'K', '\u0000', '{', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase145() throws Exception {
    char[] marg0 = { '\u0000', 'k', '{', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'K', '{', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase146() throws Exception {
    char[] marg0 = { '{', '\u0000', '\u0000', '\u0000', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', '\u0000', '\u0000', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase147() throws Exception {
    char[] marg0 = { '{', '\u0000', '\u0000', 'k', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', '\u0000', 'K', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase148() throws Exception {
    char[] marg0 = { '{', '\u0000', 'k', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', 'K', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase149() throws Exception {
    char[] marg0 = { '{', '{', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '{', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase150() throws Exception {
    char[] marg0 = { '{', 'k', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', 'K', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase151() throws Exception {
    char[] marg0 = { '{', 'k', '{', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', 'K', '{', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase152() throws Exception {
    char[] marg0 = { '{', 'k', 'k', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', 'K', 'K', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase153() throws Exception {
    char[] marg0 = { 'k', '\u0000', '\u0000', '\u0000', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', '\u0000', '\u0000', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase154() throws Exception {
    char[] marg0 = { 'k', '\u0000', '\u0000', '{', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', '\u0000', '{', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase155() throws Exception {
    char[] marg0 = { 'k', '\u0000', '{', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', '{', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase156() throws Exception {
    char[] marg0 = { 'k', '{', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '{', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase157() throws Exception {
    char[] marg0 = { 'k', '{', '{', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '{', '{', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase158() throws Exception {
    char[] marg0 = { 'k', '{', 'k', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '{', 'K', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase159() throws Exception {
    char[] marg0 = { 'k', 'k', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', 'K', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim34() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', '\u0000', '\u0000' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim35() throws Exception {
    char[] marg0 = { ' ', ' ', '\u0000', '\u0000', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim36() throws Exception {
    char[] marg0 = { ' ', '\u0000', '\u0000', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim37() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf44() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char marg1 = '\u0001';
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf45() throws Exception {
    char[] marg0 = { '\u0001', '\u0001', '\u0000' };
    char[] marg1 = { '\u0001', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf46() throws Exception {
    char[] marg0 = { '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testToLowerCase166() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase167() throws Exception {
    char[] marg0 = { '\u0000', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase168() throws Exception {
    char[] marg0 = { '\u001c', '\u0000', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', '\u0000', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase169() throws Exception {
    char[] marg0 = { '\u001c', '[', '\u0000', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', '[', '\u0000', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase170() throws Exception {
    char[] marg0 = { '\u001c', '[', '[', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', '[', '[', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase171() throws Exception {
    char[] marg0 = { '\u001c', '[', '[', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', '[', '[', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase172() throws Exception {
    char[] marg0 = { 'K', '\u0000', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase173() throws Exception {
    char[] marg0 = { 'K', 'K', '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase174() throws Exception {
    char[] marg0 = { 'K', 'K', 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIsNumeric28() throws Exception {
    char[] marg0 = { '2', '2', '2', '2', '2', '2', '2', '2', ':', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2' };
    boolean retval = StringUtils.isNumeric(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testToUpperCase160() throws Exception {
    char[] marg0 = { '\u0000', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase161() throws Exception {
    char[] marg0 = { '\u0000', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase162() throws Exception {
    char[] marg0 = { '\u0000', '{', '{', '\u0000', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', '{', '\u0000', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase163() throws Exception {
    char[] marg0 = { '\u0000', '{', '{', '{', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', '{', '{', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase164() throws Exception {
    char[] marg0 = { 'k', '\u0000', 'k', '\u0000', '{', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', 'K', '\u0000', '{', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase165() throws Exception {
    char[] marg0 = { 'k', '\u0000', 'k', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', 'K', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase166() throws Exception {
    char[] marg0 = { 'k', '\u0000', 'k', '{', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', 'K', '{', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase167() throws Exception {
    char[] marg0 = { 'k', '\u0000', 'k', '{', '{', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', 'K', '{', '{', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase168() throws Exception {
    char[] marg0 = { 'k', '\u0000', 'k', '{', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', 'K', '{', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase169() throws Exception {
    char[] marg0 = { 'k', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase170() throws Exception {
    char[] marg0 = { 'k', '\u0000', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase171() throws Exception {
    char[] marg0 = { 'k', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase172() throws Exception {
    char[] marg0 = { 'k', '{', '\u0000', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '{', '\u0000', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase173() throws Exception {
    char[] marg0 = { 'k', '{', '\u0000', '\u0000', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '{', '\u0000', '\u0000', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase174() throws Exception {
    char[] marg0 = { 'k', '{', '\u0000', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '{', '\u0000', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase175() throws Exception {
    char[] marg0 = { 'k', '{', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '{', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase176() throws Exception {
    char[] marg0 = { 'k', '{', '\u0000', '{', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '{', '\u0000', '{', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase177() throws Exception {
    char[] marg0 = { 'k', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase178() throws Exception {
    char[] marg0 = { 'k', '{', '\u0000', '{', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '{', '\u0000', '{', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase179() throws Exception {
    char[] marg0 = { 'k', '{', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '{', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase180() throws Exception {
    char[] marg0 = { 'k', '{', '\u0000', 'k', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '{', '\u0000', 'K', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase181() throws Exception {
    char[] marg0 = { 'k', '{', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '{', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase182() throws Exception {
    char[] marg0 = { 'k', '\u0080', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0080', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase183() throws Exception {
    char[] marg0 = { 'k', '\u0080', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0080', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase184() throws Exception {
    char[] marg0 = { 'k', '{', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '{', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase185() throws Exception {
    char[] marg0 = { 'k', '{', '{', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '{', '{', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase186() throws Exception {
    char[] marg0 = { 'k', '{', '{', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '{', '{', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase187() throws Exception {
    char[] marg0 = { 'k', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase188() throws Exception {
    char[] marg0 = { 'k', '{', '{', '{', 'k', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '{', '{', '{', 'K', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase189() throws Exception {
    char[] marg0 = { 'k', '{', '{', 'k', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '{', '{', 'K', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase190() throws Exception {
    char[] marg0 = { 'k', '{', 'k', '\u0000', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '{', 'K', '\u0000', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase191() throws Exception {
    char[] marg0 = { 'k', '{', 'k', '\u0000', '{', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '{', 'K', '\u0000', '{', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase192() throws Exception {
    char[] marg0 = { 'k', '{', 'k', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '{', 'K', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase193() throws Exception {
    char[] marg0 = { 'k', '{', 'k', '{', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '{', 'K', '{', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase194() throws Exception {
    char[] marg0 = { 'k', '{', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '{', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase195() throws Exception {
    char[] marg0 = { 'k', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase196() throws Exception {
    char[] marg0 = { 'k', 'k', '\u0000', '\u0000', '{', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', 'K', '\u0000', '\u0000', '{', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase197() throws Exception {
    char[] marg0 = { 'k', 'k', '\u0000', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', 'K', '\u0000', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase198() throws Exception {
    char[] marg0 = { 'k', 'k', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', 'K', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase199() throws Exception {
    char[] marg0 = { 'k', 'k', '\u0000', '{', '{', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', 'K', '\u0000', '{', '{', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase200() throws Exception {
    char[] marg0 = { 'k', 'k', '\u0000', '{', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', 'K', '\u0000', '{', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase201() throws Exception {
    char[] marg0 = { 'k', 'k', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', 'K', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase202() throws Exception {
    char[] marg0 = { 'k', 'k', '\u0000', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', 'K', '\u0000', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase203() throws Exception {
    char[] marg0 = { 'k', 'k', '{', '\u0000', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', 'K', '{', '\u0000', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase204() throws Exception {
    char[] marg0 = { 'k', 'k', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', 'K', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase205() throws Exception {
    char[] marg0 = { 'k', 'k', '{', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', 'K', '{', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase206() throws Exception {
    char[] marg0 = { 'k', 'k', '{', '{', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', 'K', '{', '{', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase207() throws Exception {
    char[] marg0 = { 'k', 'k', '{', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', 'K', '{', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase208() throws Exception {
    char[] marg0 = { 'k', 'k', 'k', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', 'K', 'K', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase209() throws Exception {
    char[] marg0 = { 'k', 'k', 'k', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', 'K', 'K', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase210() throws Exception {
    char[] marg0 = { 'k', 'k', 'k', '{', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', 'K', 'K', '{', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase211() throws Exception {
    char[] marg0 = { 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim38() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim39() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim40() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim41() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim42() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim43() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = {};
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim44() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim45() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim46() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim47() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim48() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim49() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim50() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim51() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim52() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim53() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim54() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim55() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim56() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim57() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim58() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim59() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim60() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim61() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim62() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim63() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim64() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim65() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim66() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim67() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim68() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim69() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim70() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim71() throws Exception {
    char[] obj0 = { ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim72() throws Exception {
    char[] obj0 = { ' ', ' ', ' ', ' ', ' ', '\u0000' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim73() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim74() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim75() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim76() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim77() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim78() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim79() throws Exception {
    char[] obj0 = { ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim80() throws Exception {
    char[] obj0 = { ' ', ' ', ' ', ' ', '\u0000', ' ' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim81() throws Exception {
    char[] obj0 = { ' ', ' ', ' ', ' ', '\u0000', ' ', '\u0000' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim82() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim83() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim84() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim85() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim86() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim87() throws Exception {
    char[] marg0 = { ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim88() throws Exception {
    char[] obj0 = { ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim89() throws Exception {
    char[] obj0 = { ' ', ' ', ' ', '\u0000', ' ', ' ' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim90() throws Exception {
    char[] obj0 = { ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim91() throws Exception {
    char[] obj0 = { ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim92() throws Exception {
    char[] marg0 = { ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim93() throws Exception {
    char[] marg0 = { ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim94() throws Exception {
    char[] marg0 = { ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim95() throws Exception {
    char[] marg0 = { ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim96() throws Exception {
    char[] marg0 = { ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim97() throws Exception {
    char[] marg0 = { ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim98() throws Exception {
    char[] obj0 = { ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim99() throws Exception {
    char[] obj0 = { ' ', ' ', '\u0000', ' ', ' ', ' ' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim100() throws Exception {
    char[] obj0 = { ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim101() throws Exception {
    char[] obj0 = { ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim102() throws Exception {
    char[] obj0 = { ' ', ' ', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim103() throws Exception {
    char[] marg0 = { ' ', ' ', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim104() throws Exception {
    char[] marg0 = { ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim105() throws Exception {
    char[] marg0 = { ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim106() throws Exception {
    char[] marg0 = { ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim107() throws Exception {
    char[] marg0 = { ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim108() throws Exception {
    char[] marg0 = { ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim109() throws Exception {
    char[] marg0 = { ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim110() throws Exception {
    char[] obj0 = { ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim111() throws Exception {
    char[] obj0 = { ' ', '\u0000', ' ', ' ', ' ', ' ' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim112() throws Exception {
    char[] obj0 = { ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim113() throws Exception {
    char[] obj0 = { ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim114() throws Exception {
    char[] obj0 = { ' ', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ' ' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim115() throws Exception {
    char[] marg0 = { ' ', '\u0000', ' ', '\u0000', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim116() throws Exception {
    char[] obj0 = { ' ', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim117() throws Exception {
    char[] marg0 = { ' ', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim118() throws Exception {
    char[] marg0 = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim119() throws Exception {
    char[] marg0 = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim120() throws Exception {
    char[] marg0 = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim121() throws Exception {
    char[] marg0 = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim122() throws Exception {
    char[] marg0 = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim123() throws Exception {
    char[] marg0 = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim124() throws Exception {
    char[] obj0 = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ', ' ' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim125() throws Exception {
    char[] obj0 = { '\u0000', ' ', ' ', ' ', ' ', ' ' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim126() throws Exception {
    char[] obj0 = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ', ' ' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim127() throws Exception {
    char[] obj0 = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000', ' ', ' ', ' ' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim128() throws Exception {
    char[] obj0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ' ', ' ' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim129() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', ' ', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim130() throws Exception {
    char[] obj0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ' ' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim131() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', ' ' };
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim132() throws Exception {
    char[] obj0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testTrim133() throws Exception {
    char[] obj0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg0 = obj0;
    char[] retval = StringUtils.trim(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf47() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char marg1 = '\u0001';
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf48() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char marg1 = '\u0001';
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 9;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testReverse8() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.reverse(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIndexOf49() throws Exception {
    char[] obj0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg0 = obj0;
    char[] marg1 = obj0;
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf50() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 0;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf51() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf52() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf53() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf54() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf55() throws Exception {
    char[] marg0 = { '\u0001', '\u0000', '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf56() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000', '\u0001' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf57() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 3;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf58() throws Exception {
    char[] marg0 = { '\u0001', '\u0000', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001' };
    char[] marg1 = { '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf59() throws Exception {
    char[] marg0 = { '\u0001', '\u0000', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001' };
    char[] marg1 = { '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf60() throws Exception {
    char[] marg0 = { '\u0001', '\u0001', '\u0000', '\u0000', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001' };
    char[] marg1 = { '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf61() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf62() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0001' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf63() throws Exception {
    char[] marg0 = { '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf64() throws Exception {
    char[] marg0 = { '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf65() throws Exception {
    char[] marg0 = { '\u0001', '\u0000', '\u0000', '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 5;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf66() throws Exception {
    char[] marg0 = { '\u0001', '\u0000', '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 4;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf67() throws Exception {
    char[] marg0 = { '\u0001', '\u0000', '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf68() throws Exception {
    char[] marg0 = { '\u0001', '\u0000', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf69() throws Exception {
    char[] marg0 = { '\u0001', '\u0001', '\u0000' };
    char[] marg1 = { '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = 2;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf70() throws Exception {
    char[] marg0 = { '\u0001', '\u0001', '\u0000', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001' };
    char[] marg1 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIndexOf71() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] marg1 = { '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001', '\u0001' };
    int retval = StringUtils.indexOf(marg0, marg1);

    int expected = -1;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPalindrome13() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringUtils.isPalindrome(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsPalindrome14() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0001', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    boolean retval = StringUtils.isPalindrome(marg0);

    boolean expected = false;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testToLowerCase175() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase176() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase177() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase178() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase179() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase180() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase181() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase182() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '[', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '[', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase183() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase184() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', 'K', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', 'k', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase185() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', 'K', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', 'k', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase186() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase187() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '[', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '[', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase188() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase189() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '[', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '[', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase190() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase191() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '[', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '[', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase192() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '[', '[', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '[', '[', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase193() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '[', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '[', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase194() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase195() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', 'K', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', 'k', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase196() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', 'K', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', 'k', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase197() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', 'K', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', 'k', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase198() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', 'K', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', 'k', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase199() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase200() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase201() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase202() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase203() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase204() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase205() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase206() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '\u0000', '[', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '\u0000', '[', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase207() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase208() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase209() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase210() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '[', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '[', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase211() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase212() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u001c', '\u0000', '\u001b', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u001c', '\u0000', '\u001b', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase213() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'à ', '[', 'ä', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'à ', '[', 'ä', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase214() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '[', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '[', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase215() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', '[', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', '[', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase216() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase217() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase218() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', 'K', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', 'k', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase219() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '[', 'K', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', '[', 'k', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase220() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase221() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'k', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase222() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'k', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase223() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'k', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase224() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'k', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase225() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K', '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'k', '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase226() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'k', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase227() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'k', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase228() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'k', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase229() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'k', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase230() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'k', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase231() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K', 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'k', 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase232() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K', 'K', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'k', 'k', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase233() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase234() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase235() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase236() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase237() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase238() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase239() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase240() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '\u0000', '[', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '\u0000', '[', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase241() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase242() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase243() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase244() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '[', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '[', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase245() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase246() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '[', '\u001b', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '[', '\u001b', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase247() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '[', 'ä', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '[', 'ä', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase248() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '[', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '[', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase249() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', '[', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', '[', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase250() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase251() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', 'K', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', 'k', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase252() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', 'K', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', 'k', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase253() throws Exception {
    char[] marg0 = { '\u0000', '[', '\u0000', 'K', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '\u0000', 'k', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase254() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase255() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '[', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase256() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '[', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase257() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', '\u0000', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '[', '\u0000', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase258() throws Exception {
    char[] marg0 = { '\u0000', '`', '\u001c', '\u0000', '\u001b', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '`', '\u001c', '\u0000', '\u001b', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase259() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', '\u0000', 'ä', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '[', '\u0000', 'ä', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase260() throws Exception {
    char[] marg0 = { '\u0000', '`', 'È', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '`', 'È', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase261() throws Exception {
    char[] marg0 = { '\u0000', '`', 'È', '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '`', 'È', '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase262() throws Exception {
    char[] marg0 = { '\u0000', '[', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase263() throws Exception {
    char[] marg0 = { '\u0000', '`', '\u001b', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '`', '\u001b', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase264() throws Exception {
    char[] marg0 = { '\u0000', '`', 'Ð', '[', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '`', 'Ð', '[', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase265() throws Exception {
    char[] marg0 = { '\u0000', '`', '\u001b', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '`', '\u001b', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase266() throws Exception {
    char[] marg0 = { '\u0000', '`', '\u001b', '[', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '`', '\u001b', '[', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase267() throws Exception {
    char[] marg0 = { '\u0000', '`', '\u001b', '[', 'K', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '`', '\u001b', '[', 'k', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase268() throws Exception {
    char[] marg0 = { '\u0000', '`', 'È', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '`', 'È', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase269() throws Exception {
    char[] marg0 = { '\u0000', '`', 'È', 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '`', 'È', 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase270() throws Exception {
    char[] marg0 = { '\u0000', '`', '\u001b', 'K', '[', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '`', '\u001b', 'k', '[', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase271() throws Exception {
    char[] marg0 = { '\u0000', '[', 'è', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', 'è', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase272() throws Exception {
    char[] marg0 = { '\u0000', '[', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase273() throws Exception {
    char[] marg0 = { '\u0000', '[', 'K', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', 'k', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase274() throws Exception {
    char[] marg0 = { '\u0000', '[', 'K', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', 'k', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase275() throws Exception {
    char[] marg0 = { '\u0000', '[', 'K', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', 'k', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase276() throws Exception {
    char[] marg0 = { '\u0000', '[', 'K', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', 'k', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase277() throws Exception {
    char[] marg0 = { '\u0000', '[', 'K', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', 'k', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase278() throws Exception {
    char[] marg0 = { '\u0000', '[', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase279() throws Exception {
    char[] marg0 = { '\u0000', '[', 'K', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', 'k', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase280() throws Exception {
    char[] marg0 = { '\u0000', '[', 'K', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', 'k', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase281() throws Exception {
    char[] marg0 = { '\u0000', '[', 'K', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', 'k', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase282() throws Exception {
    char[] marg0 = { '\u0000', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase283() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase284() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '\u0000', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase285() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '\u0000', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase286() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase287() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase288() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000', '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '\u0000', '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase289() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase290() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase291() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '\u0000', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase292() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000', '[', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '\u0000', '[', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase293() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase294() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000', 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '\u0000', 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase295() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000', 'K', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '\u0000', 'k', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase296() throws Exception {
    char[] marg0 = { '\u0000', 'K', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase297() throws Exception {
    char[] marg0 = { '\u0000', 'K', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase298() throws Exception {
    char[] marg0 = { '\u0000', 'P', 'È', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'p', 'È', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase299() throws Exception {
    char[] marg0 = { '\u0000', 'P', 'È', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'p', 'È', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase300() throws Exception {
    char[] marg0 = { '\u0000', 'K', '[', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '[', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase301() throws Exception {
    char[] marg0 = { '\u0000', 'P', 'È', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'p', 'È', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase302() throws Exception {
    char[] marg0 = { '\u0000', 'P', 'È', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'p', 'È', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase303() throws Exception {
    char[] marg0 = { '\u0000', 'P', '\u001b', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'p', '\u001b', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase304() throws Exception {
    char[] marg0 = { '\u0000', 'P', '\u001b', '[', 'K', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'p', '\u001b', '[', 'k', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase305() throws Exception {
    char[] marg0 = { '\u0000', 'K', '[', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', '[', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase306() throws Exception {
    char[] marg0 = { '\u0000', 'P', '\u001b', 'K', '[', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'p', '\u001b', 'k', '[', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b', '\u001b' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase307() throws Exception {
    char[] marg0 = { '\u0000', 'K', 'è', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', 'è', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase308() throws Exception {
    char[] marg0 = { '\u0000', 'K', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase309() throws Exception {
    char[] marg0 = { '\u0000', 'K', 'K', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', 'k', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase310() throws Exception {
    char[] marg0 = { '\u0000', 'K', 'K', '\u0000', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', 'k', '\u0000', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase311() throws Exception {
    char[] marg0 = { '\u0000', 'K', 'K', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', 'k', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase312() throws Exception {
    char[] marg0 = { '\u0000', 'K', 'K', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', 'k', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase313() throws Exception {
    char[] marg0 = { '\u0000', 'K', 'K', '[', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', 'k', '[', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase314() throws Exception {
    char[] marg0 = { '\u0000', 'K', 'K', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', 'k', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase315() throws Exception {
    char[] marg0 = { '\u0000', 'K', 'K', 'K', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u0000', 'k', 'k', 'k', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase316() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase317() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase318() throws Exception {
    char[] marg0 = { '\u001c', '\u0000', '\u0000', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', '\u0000', '\u0000', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase319() throws Exception {
    char[] marg0 = { '\u001c', '\u0000', '\u0000', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', '\u0000', '\u0000', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase320() throws Exception {
    char[] marg0 = { '\u001c', '\u0000', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', '\u0000', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase321() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase322() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '\u0000', '[', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', '\u0000', '[', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase323() throws Exception {
    char[] marg0 = { '\u001c', '\u0000', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', '\u0000', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase324() throws Exception {
    char[] marg0 = { '\u001c', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase325() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase326() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '[', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', '[', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase327() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase328() throws Exception {
    char[] marg0 = { '\u009b', '\u0000', '\u0000', '[', '\u001b', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u009b', '\u0000', '\u0000', '[', '\u001b', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase329() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '[', 'ä', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', '[', 'ä', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase330() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '[', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', '[', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase331() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', '[', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', '[', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase332() throws Exception {
    char[] marg0 = { '\u001c', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase333() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase334() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', 'K', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', 'k', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase335() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u0000', 'K', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u0000', 'k', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase336() throws Exception {
    char[] marg0 = { '\u001c', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase337() throws Exception {
    char[] marg0 = { '[', '\u0000', '[', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '[', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase338() throws Exception {
    char[] marg0 = { '[', '\u0000', '[', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '[', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase339() throws Exception {
    char[] marg0 = { '[', '\u0000', '[', '\u0000', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '[', '\u0000', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase340() throws Exception {
    char[] marg0 = { '\u009b', '\u0000', '\u001c', '\u0000', '\u001b', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u009b', '\u0000', '\u001c', '\u0000', '\u001b', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase341() throws Exception {
    char[] marg0 = { '[', '\u0000', '[', '\u0000', 'ä', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '[', '\u0000', 'ä', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase342() throws Exception {
    char[] marg0 = { '[', '\u0000', 'È', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', 'È', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase343() throws Exception {
    char[] marg0 = { '[', '\u0000', 'È', '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', 'È', '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase344() throws Exception {
    char[] marg0 = { '[', '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase345() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u001b', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u001b', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase346() throws Exception {
    char[] marg0 = { 'È', '\u0000', 'Ð', '[', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'È', '\u0000', 'Ð', '[', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase347() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u001b', '[', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u001b', '[', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase348() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u001b', '[', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u001b', '[', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase349() throws Exception {
    char[] marg0 = { '[', '\u0000', 'È', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', 'È', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase350() throws Exception {
    char[] marg0 = { '[', '\u0000', 'È', 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', 'È', 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase351() throws Exception {
    char[] marg0 = { '[', '\u0000', '\u001b', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', '\u001b', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase352() throws Exception {
    char[] marg0 = { '[', '\u0000', 'è', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', 'è', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase353() throws Exception {
    char[] marg0 = { '\u001c', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase354() throws Exception {
    char[] marg0 = { '[', '\u0000', 'K', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', 'k', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase355() throws Exception {
    char[] marg0 = { '[', '\u0000', 'K', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', 'k', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase356() throws Exception {
    char[] marg0 = { '[', '\u0000', 'K', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', 'k', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase357() throws Exception {
    char[] marg0 = { '[', '\u0000', 'K', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', 'k', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase358() throws Exception {
    char[] marg0 = { '[', '\u0000', 'K', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', 'k', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase359() throws Exception {
    char[] marg0 = { '[', '\u0000', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase360() throws Exception {
    char[] marg0 = { '[', '\u0000', 'K', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', 'k', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase361() throws Exception {
    char[] marg0 = { '[', '\u0000', 'K', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', 'k', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase362() throws Exception {
    char[] marg0 = { '[', '\u0000', 'K', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', 'k', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase363() throws Exception {
    char[] marg0 = { '[', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase364() throws Exception {
    char[] marg0 = { '\u001c', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase365() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '\u0000', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase366() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '\u0000', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase367() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '\u0000', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '\u0000', '\u0000', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase368() throws Exception {
    char[] marg0 = { '\u009b', '[', '\u0000', '\u0000', '\u001b', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u009b', '[', '\u0000', '\u0000', '\u001b', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase369() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '\u0000', 'ä', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '\u0000', '\u0000', 'ä', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase370() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '\u0000', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '\u0000', '\u0000', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase371() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '\u0000', '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase372() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase373() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '\u0000', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase374() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '[', '\u0000', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '\u0000', '[', '\u0000', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase375() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '[', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '\u0000', '[', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase376() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', '[', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '\u0000', '[', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase377() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase378() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '\u0000', 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase379() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '\u0000', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase380() throws Exception {
    char[] marg0 = { '[', '[', '\u0000', 'K', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '\u0000', 'k', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase381() throws Exception {
    char[] marg0 = { '[', '`', 'È', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '`', 'È', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase382() throws Exception {
    char[] marg0 = { '[', '[', '[', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '[', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase383() throws Exception {
    char[] marg0 = { '[', '[', '[', '\u0000', '\u0000', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '[', '\u0000', '\u0000', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase384() throws Exception {
    char[] marg0 = { '[', '[', '[', '\u0000', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '[', '\u0000', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase385() throws Exception {
    char[] marg0 = { '[', '[', '[', '\u0000', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '[', '\u0000', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase386() throws Exception {
    char[] marg0 = { '[', '[', '[', '[', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '[', '[', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase387() throws Exception {
    char[] marg0 = { '[', '`', 'È', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '`', 'È', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase388() throws Exception {
    char[] marg0 = { '[', '`', 'È', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '`', 'È', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase389() throws Exception {
    char[] marg0 = { '[', '[', '[', '[', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '[', '[', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase390() throws Exception {
    char[] marg0 = { '[', '[', '[', 'K', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '[', 'k', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase391() throws Exception {
    char[] marg0 = { '[', '[', '[', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '[', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase392() throws Exception {
    char[] marg0 = { '[', '[', '[', 'K', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', '[', 'k', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase393() throws Exception {
    char[] marg0 = { '[', '[', 'K', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', 'k', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase394() throws Exception {
    char[] marg0 = { '[', '[', 'K', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', 'k', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase395() throws Exception {
    char[] marg0 = { '[', '[', 'K', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', 'k', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase396() throws Exception {
    char[] marg0 = { '[', '[', 'K', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', 'k', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase397() throws Exception {
    char[] marg0 = { '[', '[', 'K', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', 'k', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase398() throws Exception {
    char[] marg0 = { '[', '[', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase399() throws Exception {
    char[] marg0 = { '[', '[', 'K', '[', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', 'k', '[', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase400() throws Exception {
    char[] marg0 = { '[', '[', 'K', 'K', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', '[', 'k', 'k', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase401() throws Exception {
    char[] marg0 = { '\u001c', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '\u001c', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase402() throws Exception {
    char[] marg0 = { '[', 'K', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase403() throws Exception {
    char[] marg0 = { '[', 'K', '\u0000', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '\u0000', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase404() throws Exception {
    char[] marg0 = { '[', 'K', '\u0000', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '\u0000', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase405() throws Exception {
    char[] marg0 = { '[', 'K', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase406() throws Exception {
    char[] marg0 = { '[', 'K', '\u0000', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '\u0000', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase407() throws Exception {
    char[] marg0 = { '[', 'K', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase408() throws Exception {
    char[] marg0 = { '[', 'K', '\u0000', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '\u0000', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase409() throws Exception {
    char[] marg0 = { '[', 'K', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase410() throws Exception {
    char[] marg0 = { '[', 'K', '\u0000', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '\u0000', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase411() throws Exception {
    char[] marg0 = { '[', 'K', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase412() throws Exception {
    char[] marg0 = { '[', 'P', '\u001b', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'p', '\u001b', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase413() throws Exception {
    char[] marg0 = { '[', 'P', '\u001b', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'p', '\u001b', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase414() throws Exception {
    char[] marg0 = { '[', 'K', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase415() throws Exception {
    char[] marg0 = { '[', 'K', '[', '\u0000', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '[', '\u0000', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase416() throws Exception {
    char[] marg0 = { '[', 'K', '[', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '[', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase417() throws Exception {
    char[] marg0 = { '[', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase418() throws Exception {
    char[] marg0 = { '[', 'K', '[', '[', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '[', '[', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase419() throws Exception {
    char[] marg0 = { '[', 'K', '[', 'K', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', '[', 'k', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase420() throws Exception {
    char[] marg0 = { '[', 'K', 'K', '\u0000', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', 'k', '\u0000', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase421() throws Exception {
    char[] marg0 = { '[', 'K', 'K', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', 'k', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase422() throws Exception {
    char[] marg0 = { '[', 'K', 'K', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', 'k', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase423() throws Exception {
    char[] marg0 = { '[', 'K', 'K', '[', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', 'k', '[', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase424() throws Exception {
    char[] marg0 = { '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase425() throws Exception {
    char[] marg0 = { '[', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { '[', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase426() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase427() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u0000', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u0000', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase428() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u0000', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u0000', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase429() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase430() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase431() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u0000', '\u0000', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u0000', '\u0000', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase432() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase433() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u0000', '[', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase434() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u0000', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u0000', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase435() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u0000', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u0000', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase436() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase437() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u0000', 'K', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u0000', 'k', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase438() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u0000', 'K', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u0000', 'k', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase439() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase440() throws Exception {
    char[] marg0 = { 'K', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase441() throws Exception {
    char[] marg0 = { 'K', '\u0000', 'È', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', 'È', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase442() throws Exception {
    char[] marg0 = { 'K', '\u0000', 'È', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', 'È', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase443() throws Exception {
    char[] marg0 = { 'K', '\u0000', '[', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '[', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase444() throws Exception {
    char[] marg0 = { 'K', '\u0000', 'È', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', 'È', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase445() throws Exception {
    char[] marg0 = { 'K', '\u0000', 'È', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', 'È', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase446() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u001b', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u001b', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase447() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u001b', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u001b', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase448() throws Exception {
    char[] marg0 = { 'K', '\u0000', '[', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '[', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase449() throws Exception {
    char[] marg0 = { 'K', '\u0000', '\u001b', 'K', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', '\u001b', 'k', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase450() throws Exception {
    char[] marg0 = { 'K', '\u0000', 'è', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', 'è', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase451() throws Exception {
    char[] marg0 = { 'K', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase452() throws Exception {
    char[] marg0 = { 'K', '\u0000', 'K', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', 'k', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase453() throws Exception {
    char[] marg0 = { 'K', '\u0000', 'K', '\u0000', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', 'k', '\u0000', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase454() throws Exception {
    char[] marg0 = { 'K', '\u0000', 'K', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', 'k', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase455() throws Exception {
    char[] marg0 = { 'K', '\u0000', 'K', '[', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', 'k', '[', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase456() throws Exception {
    char[] marg0 = { 'K', '\u0000', 'K', '[', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', 'k', '[', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase457() throws Exception {
    char[] marg0 = { 'K', '\u0000', 'K', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', 'k', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase458() throws Exception {
    char[] marg0 = { 'K', '\u0000', 'K', 'K', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '\u0000', 'k', 'k', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase459() throws Exception {
    char[] marg0 = { 'K', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase460() throws Exception {
    char[] marg0 = { 'K', '[', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '\u0000', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase461() throws Exception {
    char[] marg0 = { 'K', '[', '\u0000', '\u0000', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '\u0000', '\u0000', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase462() throws Exception {
    char[] marg0 = { 'K', '[', '\u0000', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '\u0000', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase463() throws Exception {
    char[] marg0 = { 'K', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase464() throws Exception {
    char[] marg0 = { 'K', '[', '\u0000', '[', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '\u0000', '[', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase465() throws Exception {
    char[] marg0 = { 'K', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase466() throws Exception {
    char[] marg0 = { 'K', '[', '\u0000', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '\u0000', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase467() throws Exception {
    char[] marg0 = { 'K', '[', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase468() throws Exception {
    char[] marg0 = { 'K', '[', '\u0000', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '\u0000', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase469() throws Exception {
    char[] marg0 = { 'K', '[', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase470() throws Exception {
    char[] marg0 = { 'K', '`', '\u001b', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '`', '\u001b', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase471() throws Exception {
    char[] marg0 = { 'K', '`', '\u001b', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '`', '\u001b', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase472() throws Exception {
    char[] marg0 = { 'K', '[', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase473() throws Exception {
    char[] marg0 = { 'K', '[', '[', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '[', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase474() throws Exception {
    char[] marg0 = { 'K', '[', '[', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '[', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase475() throws Exception {
    char[] marg0 = { 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase476() throws Exception {
    char[] marg0 = { 'K', '[', '[', '[', 'K', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '[', '[', 'k', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase477() throws Exception {
    char[] marg0 = { 'K', '[', '[', 'K', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', '[', 'k', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase478() throws Exception {
    char[] marg0 = { 'K', '[', 'K', '\u0000', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', 'k', '\u0000', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase479() throws Exception {
    char[] marg0 = { 'K', '[', 'K', '\u0000', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', 'k', '\u0000', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase480() throws Exception {
    char[] marg0 = { 'K', '[', 'K', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', 'k', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase481() throws Exception {
    char[] marg0 = { 'K', '[', 'K', '[', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', 'k', '[', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase482() throws Exception {
    char[] marg0 = { 'K', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase483() throws Exception {
    char[] marg0 = { 'K', '[', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', '[', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase484() throws Exception {
    char[] marg0 = { 'K', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase485() throws Exception {
    char[] marg0 = { 'K', 'K', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase486() throws Exception {
    char[] marg0 = { 'K', 'K', '\u0000', '\u0000', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', '\u0000', '\u0000', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase487() throws Exception {
    char[] marg0 = { 'K', 'K', '\u0000', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', '\u0000', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase488() throws Exception {
    char[] marg0 = { 'K', 'K', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase489() throws Exception {
    char[] marg0 = { 'K', 'K', '\u0000', '[', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', '\u0000', '[', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase490() throws Exception {
    char[] marg0 = { 'K', 'K', '\u0000', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', '\u0000', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase491() throws Exception {
    char[] marg0 = { 'K', 'K', '\u0000', 'K', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', '\u0000', 'k', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase492() throws Exception {
    char[] marg0 = { 'K', 'K', '[', '\u0000', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', '[', '\u0000', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase493() throws Exception {
    char[] marg0 = { 'K', 'K', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', '[', '\u0000', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase494() throws Exception {
    char[] marg0 = { 'K', 'K', '[', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', '[', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase495() throws Exception {
    char[] marg0 = { 'K', 'K', '[', '[', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', '[', '[', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase496() throws Exception {
    char[] marg0 = { 'K', 'K', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase497() throws Exception {
    char[] marg0 = { 'K', 'K', '[', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', '[', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase498() throws Exception {
    char[] marg0 = { 'K', 'K', 'K', '\u0000', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', 'k', '\u0000', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase499() throws Exception {
    char[] marg0 = { 'K', 'K', 'K', '[', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', 'k', '[', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase500() throws Exception {
    char[] marg0 = { 'K', 'K', 'K', '[' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', 'k', '[' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToLowerCase501() throws Exception {
    char[] marg0 = { 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    char[] retval = StringUtils.toLowerCase(marg0);

    char[] expected = { 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring38() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = 90;
    int marg2 = 99;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring39() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = 0;
    int marg2 = 8;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring40() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = 89;
    int marg2 = 100;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring41() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = -1;
    int marg2 = 79;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testSubstring42() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    int marg1 = -1;
    int marg2 = 36;
    char[] retval = StringUtils.substring(marg0, marg1, marg2);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testIsNumeric29() throws Exception {
    char[] marg0 = { '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2' };
    boolean retval = StringUtils.isNumeric(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testIsNumeric30() throws Exception {
    char[] marg0 = { '2', '2', '2', '2', '2', '2', '2', '2', '2' };
    boolean retval = StringUtils.isNumeric(marg0);

    boolean expected = true;
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testToUpperCase212() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase213() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase214() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase215() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase216() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase217() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '{', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '{', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase218() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '{', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '{', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase219() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '{', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '{', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase220() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase221() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', 'k', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', 'K', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase222() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', 'k', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', 'K', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase223() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase224() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '{', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '{', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase225() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '{', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '{', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase226() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '{', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '{', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase227() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '{', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '{', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase228() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '{', '{', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '{', '{', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase229() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '{', '{', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '{', '{', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase230() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '{', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '{', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase231() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase232() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', 'k', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', 'K', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase233() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', 'k', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', 'K', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase234() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', 'k', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', 'K', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase235() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', 'k', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', 'K', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase236() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase237() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase238() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '{', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '{', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase239() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '{', '\u0000', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '{', '\u0000', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase240() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '{', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '{', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase241() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '{', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '{', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase242() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase243() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '{', '\u0000', '{', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '{', '\u0000', '{', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase244() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '{', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '{', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase245() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '{', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '{', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase246() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '{', '{', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '{', '{', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase247() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '{', '{', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '{', '{', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase248() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '{', '{', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '{', '{', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase249() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase250() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'à ', '{', 'ä', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'à ', '{', 'ä', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase251() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '{', '{', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '{', '{', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase252() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '{', '{', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '{', '{', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase253() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '{', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '{', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase254() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '{', 'k', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '{', 'K', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase255() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '{', 'k', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '{', 'K', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase256() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', '{', 'k', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', '{', 'K', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase257() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase258() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'k', '\u0000', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'K', '\u0000', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase259() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'k', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'K', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase260() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'k', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'K', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase261() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'k', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'K', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase262() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'k', '\u0000', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'K', '\u0000', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase263() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'k', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'K', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase264() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'k', '{', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'K', '{', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase265() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'k', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'K', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase266() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'k', '{', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'K', '{', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase267() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'k', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'K', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase268() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'k', 'k', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'K', 'K', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase269() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'k', 'k', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'K', 'K', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase270() throws Exception {
    char[] marg0 = { '\u0000', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase271() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase272() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase273() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', '\u0000', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', '\u0000', '\u0000', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase274() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', '\u0000', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase275() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', '\u0000', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase276() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', '\u0000', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase277() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', '\u0000', '{', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', '\u0000', '\u0000', '{', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase278() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase279() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase280() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', '{', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', '\u0000', '{', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase281() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', '{', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', '\u0000', '{', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase282() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', '{', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', '\u0000', '{', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase283() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', '\u0000', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase284() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', '{', 'ä', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', '\u0000', '{', 'ä', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase285() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', '{', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', '\u0000', '{', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase286() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', '{', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', '\u0000', '{', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase287() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase288() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', 'k', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', '\u0000', 'K', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase289() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', 'k', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', '\u0000', 'K', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase290() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u0000', 'k', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', '\u0000', 'K', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase291() throws Exception {
    char[] marg0 = { '\u0000', '{', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase292() throws Exception {
    char[] marg0 = { '\u0000', '{', '{', '\u0000', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', '{', '\u0000', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase293() throws Exception {
    char[] marg0 = { '\u0000', '{', '{', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', '{', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase294() throws Exception {
    char[] marg0 = { '\u0000', '{', '{', '\u0000', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', '{', '\u0000', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase295() throws Exception {
    char[] marg0 = { '\u0000', '\u0080', '\u0000', '\u0000', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0080', '\u0000', '\u0000', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase296() throws Exception {
    char[] marg0 = { '\u0000', '{', '\u009b', '\u0000', 'ä', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', '\u009b', '\u0000', 'ä', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase297() throws Exception {
    char[] marg0 = { '\u0000', '\u0080', 'È', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0080', 'È', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase298() throws Exception {
    char[] marg0 = { '\u0000', '\u0080', 'È', '\u0000', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0080', 'È', '\u0000', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase299() throws Exception {
    char[] marg0 = { '\u0000', '{', '{', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', '{', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase300() throws Exception {
    char[] marg0 = { '\u0000', '\u0080', '\u0000', '{', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0080', '\u0000', '{', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase301() throws Exception {
    char[] marg0 = { '\u0000', '\u0080', 'Ð', '{', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0080', 'Ð', '{', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase302() throws Exception {
    char[] marg0 = { '\u0000', '\u0080', '\u0000', '{', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0080', '\u0000', '{', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase303() throws Exception {
    char[] marg0 = { '\u0000', '\u0080', '\u0000', '{', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0080', '\u0000', '{', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase304() throws Exception {
    char[] marg0 = { '\u0000', '\u0080', '\u0000', '{', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0080', '\u0000', '{', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase305() throws Exception {
    char[] marg0 = { '\u0000', '\u0080', 'È', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0080', 'È', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase306() throws Exception {
    char[] marg0 = { '\u0000', '\u0080', 'È', 'k', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0080', 'È', 'K', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase307() throws Exception {
    char[] marg0 = { '\u0000', '\u0080', '\u0000', 'k', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '\u0080', '\u0000', 'K', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase308() throws Exception {
    char[] marg0 = { '\u0000', '{', 'è', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', 'è', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase309() throws Exception {
    char[] marg0 = { '\u0000', '{', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase310() throws Exception {
    char[] marg0 = { '\u0000', '{', 'k', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', 'K', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase311() throws Exception {
    char[] marg0 = { '\u0000', '{', 'k', '\u0000', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', 'K', '\u0000', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase312() throws Exception {
    char[] marg0 = { '\u0000', '{', 'k', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', 'K', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase313() throws Exception {
    char[] marg0 = { '\u0000', '{', 'k', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', 'K', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase314() throws Exception {
    char[] marg0 = { '\u0000', '{', 'k', '{', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', 'K', '{', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase315() throws Exception {
    char[] marg0 = { '\u0000', '{', 'k', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', 'K', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase316() throws Exception {
    char[] marg0 = { '\u0000', '{', 'k', '{', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', 'K', '{', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase317() throws Exception {
    char[] marg0 = { '\u0000', '{', 'k', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', 'K', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase318() throws Exception {
    char[] marg0 = { '\u0000', '{', 'k', 'k', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', 'K', 'K', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase319() throws Exception {
    char[] marg0 = { '\u0000', '{', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', '{', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase320() throws Exception {
    char[] marg0 = { '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase321() throws Exception {
    char[] marg0 = { '\u0000', 'k', '\u0000', '\u0000', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'K', '\u0000', '\u0000', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase322() throws Exception {
    char[] marg0 = { '\u0000', 'k', '\u0000', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'K', '\u0000', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase323() throws Exception {
    char[] marg0 = { '\u0000', 'k', '\u0000', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'K', '\u0000', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase324() throws Exception {
    char[] marg0 = { '\u0000', 'k', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'K', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase325() throws Exception {
    char[] marg0 = { '\u0000', 'k', '\u0000', '\u0000', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'K', '\u0000', '\u0000', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase326() throws Exception {
    char[] marg0 = { '\u0000', 'k', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'K', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase327() throws Exception {
    char[] marg0 = { '\u0000', 'k', '\u0000', '{', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'K', '\u0000', '{', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase328() throws Exception {
    char[] marg0 = { '\u0000', 'k', '\u0000', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'K', '\u0000', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase329() throws Exception {
    char[] marg0 = { '\u0000', 'k', '\u0000', '{', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'K', '\u0000', '{', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase330() throws Exception {
    char[] marg0 = { '\u0000', 'k', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'K', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase331() throws Exception {
    char[] marg0 = { '\u0000', 'k', '\u0000', 'k', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'K', '\u0000', 'K', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase332() throws Exception {
    char[] marg0 = { '\u0000', 'k', '\u0000', 'k', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'K', '\u0000', 'K', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase333() throws Exception {
    char[] marg0 = { '\u0000', 'k', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'K', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase334() throws Exception {
    char[] marg0 = { '\u0000', 'k', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'K', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase335() throws Exception {
    char[] marg0 = { '\u0000', 'p', 'È', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'P', 'È', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase336() throws Exception {
    char[] marg0 = { '\u0000', 'p', 'È', '\u0000', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'P', 'È', '\u0000', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase337() throws Exception {
    char[] marg0 = { '\u0000', 'k', '{', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'K', '{', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase338() throws Exception {
    char[] marg0 = { '\u0000', 'p', 'È', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'P', 'È', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase339() throws Exception {
    char[] marg0 = { '\u0000', 'p', 'È', '{', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'P', 'È', '{', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase340() throws Exception {
    char[] marg0 = { '\u0000', 'p', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'P', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase341() throws Exception {
    char[] marg0 = { '\u0000', 'p', '\u0000', '{', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'P', '\u0000', '{', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase342() throws Exception {
    char[] marg0 = { '\u0000', 'k', '{', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'K', '{', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase343() throws Exception {
    char[] marg0 = { '\u0000', 'p', '\u0000', 'k', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'P', '\u0000', 'K', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase344() throws Exception {
    char[] marg0 = { '\u0000', 'k', 'è', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'K', 'è', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase345() throws Exception {
    char[] marg0 = { '\u0000', 'k', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'K', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase346() throws Exception {
    char[] marg0 = { '\u0000', 'k', 'k', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'K', 'K', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase347() throws Exception {
    char[] marg0 = { '\u0000', 'k', 'k', '\u0000', '{', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'K', 'K', '\u0000', '{', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase348() throws Exception {
    char[] marg0 = { '\u0000', 'k', 'k', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'K', 'K', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase349() throws Exception {
    char[] marg0 = { '\u0000', 'k', 'k', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'K', 'K', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase350() throws Exception {
    char[] marg0 = { '\u0000', 'k', 'k', '{', '{', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'K', 'K', '{', '{', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase351() throws Exception {
    char[] marg0 = { '\u0000', 'k', 'k', '{', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'K', 'K', '{', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase352() throws Exception {
    char[] marg0 = { '\u0000', 'k', 'k', 'k', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '\u0000', 'K', 'K', 'K', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase353() throws Exception {
    char[] marg0 = { '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase354() throws Exception {
    char[] marg0 = { '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase355() throws Exception {
    char[] marg0 = { '{', '\u0000', '\u0000', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', '\u0000', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase356() throws Exception {
    char[] marg0 = { '{', '\u0000', '\u0000', '\u0000', '{', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', '\u0000', '\u0000', '{', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase357() throws Exception {
    char[] marg0 = { '{', '\u0000', '\u0000', '{', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', '\u0000', '{', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase358() throws Exception {
    char[] marg0 = { '{', '\u0000', '\u0000', '{', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', '\u0000', '{', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase359() throws Exception {
    char[] marg0 = { '{', '\u0000', '\u0000', '{', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', '\u0000', '{', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase360() throws Exception {
    char[] marg0 = { 'Â»', '\u0000', '\u0000', '{', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'Â»', '\u0000', '\u0000', '{', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase361() throws Exception {
    char[] marg0 = { '{', '\u0000', '\u0000', '{', 'ä', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', '\u0000', '{', 'ä', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase362() throws Exception {
    char[] marg0 = { '{', '\u0000', '\u0000', '{', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', '\u0000', '{', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase363() throws Exception {
    char[] marg0 = { '{', '\u0000', '\u0000', '{', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', '\u0000', '{', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase364() throws Exception {
    char[] marg0 = { '{', '\u0000', '\u0000', 'k', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', '\u0000', 'K', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase365() throws Exception {
    char[] marg0 = { '{', '\u0000', '\u0000', 'k', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', '\u0000', 'K', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase366() throws Exception {
    char[] marg0 = { '{', '\u0000', '\u0000', 'k', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', '\u0000', 'K', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase367() throws Exception {
    char[] marg0 = { '{', '\u0000', '{', '\u0000', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', '{', '\u0000', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase368() throws Exception {
    char[] marg0 = { '{', '\u0000', '{', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', '{', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase369() throws Exception {
    char[] marg0 = { '{', '\u0000', '{', '\u0000', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', '{', '\u0000', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase370() throws Exception {
    char[] marg0 = { 'Â»', '\u0000', '\u0000', '\u0000', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'Â»', '\u0000', '\u0000', '\u0000', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase371() throws Exception {
    char[] marg0 = { '{', '\u0000', '\u009b', '\u0000', 'ä', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', '\u009b', '\u0000', 'ä', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase372() throws Exception {
    char[] marg0 = { '{', '\u0000', 'È', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', 'È', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase373() throws Exception {
    char[] marg0 = { '{', '\u0000', 'È', '\u0000', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', 'È', '\u0000', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase374() throws Exception {
    char[] marg0 = { '{', '\u0000', '{', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', '{', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase375() throws Exception {
    char[] marg0 = { '{', '\u0000', '\u0000', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', '\u0000', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase376() throws Exception {
    char[] marg0 = { '{', '\u0000', 'Ð', '{', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', 'Ð', '{', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase377() throws Exception {
    char[] marg0 = { '{', '\u0000', '\u0000', '{', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', '\u0000', '{', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase378() throws Exception {
    char[] marg0 = { '{', '\u0000', '\u0000', '{', 'k', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', '\u0000', '{', 'K', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase379() throws Exception {
    char[] marg0 = { '{', '\u0000', 'È', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', 'È', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase380() throws Exception {
    char[] marg0 = { '{', '\u0000', 'È', 'k', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', 'È', 'K', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase381() throws Exception {
    char[] marg0 = { '{', '\u0000', 'è', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', 'è', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase382() throws Exception {
    char[] marg0 = { '{', '\u0000', 'k', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', 'K', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase383() throws Exception {
    char[] marg0 = { '{', '\u0000', 'k', '\u0000', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', 'K', '\u0000', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase384() throws Exception {
    char[] marg0 = { '{', '\u0000', 'k', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', 'K', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase385() throws Exception {
    char[] marg0 = { '{', '\u0000', 'k', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', 'K', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase386() throws Exception {
    char[] marg0 = { '{', '\u0000', 'k', '{', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', 'K', '{', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase387() throws Exception {
    char[] marg0 = { '{', '\u0000', 'k', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', 'K', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase388() throws Exception {
    char[] marg0 = { '{', '\u0000', 'k', '{', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', 'K', '{', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase389() throws Exception {
    char[] marg0 = { '{', '\u0000', 'k', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', 'K', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase390() throws Exception {
    char[] marg0 = { '{', '\u0000', 'k', 'k', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', 'K', 'K', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase391() throws Exception {
    char[] marg0 = { '{', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase392() throws Exception {
    char[] marg0 = { '{', '{', '\u0000', '\u0000', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '{', '\u0000', '\u0000', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase393() throws Exception {
    char[] marg0 = { '{', '{', '\u0000', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '{', '\u0000', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase394() throws Exception {
    char[] marg0 = { '{', '{', '\u0000', '\u0000', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '{', '\u0000', '\u0000', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase395() throws Exception {
    char[] marg0 = { 'Â»', '{', '\u0000', '\u0000', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'Â»', '{', '\u0000', '\u0000', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase396() throws Exception {
    char[] marg0 = { '{', '{', '\u0000', '\u0000', 'ä', 'k', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '{', '\u0000', '\u0000', 'ä', 'K', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase397() throws Exception {
    char[] marg0 = { '{', '{', '\u0000', '\u0000', 'k', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '{', '\u0000', '\u0000', 'K', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase398() throws Exception {
    char[] marg0 = { '{', '{', '\u0000', '\u0000', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '{', '\u0000', '\u0000', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase399() throws Exception {
    char[] marg0 = { '{', '{', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '{', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase400() throws Exception {
    char[] marg0 = { '{', '{', '\u0000', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '{', '\u0000', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase401() throws Exception {
    char[] marg0 = { '{', '{', '\u0000', '{', '\u0000', 'k', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '{', '\u0000', '{', '\u0000', 'K', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase402() throws Exception {
    char[] marg0 = { '{', '{', '\u0000', '{', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '{', '\u0000', '{', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase403() throws Exception {
    char[] marg0 = { '{', '{', '\u0000', '{', 'k', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '{', '\u0000', '{', 'K', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase404() throws Exception {
    char[] marg0 = { '{', '{', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '{', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase405() throws Exception {
    char[] marg0 = { '{', '{', '\u0000', 'k', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '{', '\u0000', 'K', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase406() throws Exception {
    char[] marg0 = { '{', '{', '\u0000', 'k', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '{', '\u0000', 'K', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase407() throws Exception {
    char[] marg0 = { '{', '{', '\u0000', 'k', 'k', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '{', '\u0000', 'K', 'K', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase408() throws Exception {
    char[] marg0 = { '{', '\u0080', 'È', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0080', 'È', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase409() throws Exception {
    char[] marg0 = { '{', '{', '{', '\u0000', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '{', '{', '\u0000', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase410() throws Exception {
    char[] marg0 = { '{', '{', '{', '\u0000', '\u0000', 'k', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '{', '{', '\u0000', '\u0000', 'K', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase411() throws Exception {
    char[] marg0 = { '{', '{', '{', '\u0000', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '{', '{', '\u0000', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase412() throws Exception {
    char[] marg0 = { '{', '{', '{', '\u0000', 'k', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '{', '{', '\u0000', 'K', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase413() throws Exception {
    char[] marg0 = { '{', '{', '{', '{', '\u0000', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '{', '{', '{', '\u0000', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase414() throws Exception {
    char[] marg0 = { '{', '\u0080', 'È', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0080', 'È', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase415() throws Exception {
    char[] marg0 = { '{', '\u0080', 'È', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '\u0080', 'È', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase416() throws Exception {
    char[] marg0 = { '{', '{', '{', '{', 'k', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '{', '{', '{', 'K', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase417() throws Exception {
    char[] marg0 = { '{', '{', '{', 'k', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '{', '{', 'K', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase418() throws Exception {
    char[] marg0 = { '{', '{', '{', 'k', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '{', '{', 'K', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase419() throws Exception {
    char[] marg0 = { '{', '{', '{', 'k', 'k', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '{', '{', 'K', 'K', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase420() throws Exception {
    char[] marg0 = { '{', '{', 'k', '\u0000', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '{', 'K', '\u0000', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase421() throws Exception {
    char[] marg0 = { '{', '{', 'k', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '{', 'K', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase422() throws Exception {
    char[] marg0 = { '{', '{', 'k', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '{', 'K', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase423() throws Exception {
    char[] marg0 = { '{', '{', 'k', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '{', 'K', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase424() throws Exception {
    char[] marg0 = { '{', '{', 'k', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '{', 'K', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase425() throws Exception {
    char[] marg0 = { '{', '{', 'k', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '{', 'K', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase426() throws Exception {
    char[] marg0 = { '{', '{', 'k', '{', 'k', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '{', 'K', '{', 'K', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase427() throws Exception {
    char[] marg0 = { '{', '{', 'k', 'k', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', '{', 'K', 'K', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase428() throws Exception {
    char[] marg0 = { '{', 'k', '\u0000', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', 'K', '\u0000', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase429() throws Exception {
    char[] marg0 = { '{', 'k', '\u0000', '\u0000', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', 'K', '\u0000', '\u0000', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase430() throws Exception {
    char[] marg0 = { '{', 'k', '\u0000', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', 'K', '\u0000', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase431() throws Exception {
    char[] marg0 = { '{', 'k', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', 'K', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase432() throws Exception {
    char[] marg0 = { '{', 'k', '\u0000', '{', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', 'K', '\u0000', '{', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase433() throws Exception {
    char[] marg0 = { '{', 'k', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', 'K', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase434() throws Exception {
    char[] marg0 = { '{', 'k', '\u0000', '{', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', 'K', '\u0000', '{', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase435() throws Exception {
    char[] marg0 = { '{', 'k', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', 'K', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase436() throws Exception {
    char[] marg0 = { '{', 'k', '\u0000', 'k', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', 'K', '\u0000', 'K', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase437() throws Exception {
    char[] marg0 = { '{', 'k', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', 'K', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase438() throws Exception {
    char[] marg0 = { '{', 'p', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', 'P', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase439() throws Exception {
    char[] marg0 = { '{', 'p', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', 'P', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase440() throws Exception {
    char[] marg0 = { '{', 'k', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', 'K', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase441() throws Exception {
    char[] marg0 = { '{', 'k', '{', '\u0000', 'k', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', 'K', '{', '\u0000', 'K', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase442() throws Exception {
    char[] marg0 = { '{', 'k', '{', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', 'K', '{', '{', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase443() throws Exception {
    char[] marg0 = { '{', 'k', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', 'K', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase444() throws Exception {
    char[] marg0 = { '{', 'k', '{', '{', 'k', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', 'K', '{', '{', 'K', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase445() throws Exception {
    char[] marg0 = { '{', 'k', '{', 'k', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', 'K', '{', 'K', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase446() throws Exception {
    char[] marg0 = { '{', 'k', 'k', '\u0000', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', 'K', 'K', '\u0000', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase447() throws Exception {
    char[] marg0 = { '{', 'k', 'k', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', 'K', 'K', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase448() throws Exception {
    char[] marg0 = { '{', 'k', 'k', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', 'K', 'K', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase449() throws Exception {
    char[] marg0 = { '{', 'k', 'k', '{', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', 'K', 'K', '{', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase450() throws Exception {
    char[] marg0 = { '{', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase451() throws Exception {
    char[] marg0 = { '{', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { '{', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase452() throws Exception {
    char[] marg0 = { 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase453() throws Exception {
    char[] marg0 = { 'k', '\u0000', '\u0000', '\u0000', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', '\u0000', '\u0000', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase454() throws Exception {
    char[] marg0 = { 'k', '\u0000', '\u0000', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', '\u0000', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase455() throws Exception {
    char[] marg0 = { 'k', '\u0000', '\u0000', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', '\u0000', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase456() throws Exception {
    char[] marg0 = { 'k', '\u0000', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase457() throws Exception {
    char[] marg0 = { 'k', '\u0000', '\u0000', '\u0000', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', '\u0000', '\u0000', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase458() throws Exception {
    char[] marg0 = { 'k', '\u0000', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase459() throws Exception {
    char[] marg0 = { 'k', '\u0000', '\u0000', '{', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', '\u0000', '{', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase460() throws Exception {
    char[] marg0 = { 'k', '\u0000', '\u0000', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', '\u0000', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase461() throws Exception {
    char[] marg0 = { 'k', '\u0000', '\u0000', '{', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', '\u0000', '{', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase462() throws Exception {
    char[] marg0 = { 'k', '\u0000', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase463() throws Exception {
    char[] marg0 = { 'k', '\u0000', '\u0000', 'k', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', '\u0000', 'K', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase464() throws Exception {
    char[] marg0 = { 'k', '\u0000', '\u0000', 'k', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', '\u0000', 'K', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase465() throws Exception {
    char[] marg0 = { 'k', '\u0000', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase466() throws Exception {
    char[] marg0 = { 'k', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase467() throws Exception {
    char[] marg0 = { 'k', '\u0000', 'È', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', 'È', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase468() throws Exception {
    char[] marg0 = { 'k', '\u0000', 'È', '\u0000', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', 'È', '\u0000', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase469() throws Exception {
    char[] marg0 = { 'k', '\u0000', '{', '\u0000', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', '{', '\u0000', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase470() throws Exception {
    char[] marg0 = { 'k', '\u0000', 'È', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', 'È', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase471() throws Exception {
    char[] marg0 = { 'k', '\u0000', 'È', '{', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', 'È', '{', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase472() throws Exception {
    char[] marg0 = { 'k', '\u0000', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', '\u0000', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{', '{' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase473() throws Exception {
    char[] marg0 = { 'k', '\u0000', '{', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', '{', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase474() throws Exception {
    char[] marg0 = { 'k', '\u0000', '\u0000', 'k', '{', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', '\u0000', 'K', '{', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase475() throws Exception {
    char[] marg0 = { 'k', '\u0000', 'è', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', 'è', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K', 'K' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase476() throws Exception {
    char[] marg0 = { 'k', '\u0000', 'k', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', 'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }

  @Test
  public void testToUpperCase477() throws Exception {
    char[] marg0 = { 'k', '\u0000', 'k', '\u0000', '\u0000' };
    char[] retval = StringUtils.toUpperCase(marg0);

    char[] expected = { 'K', '\u0000', 'K', '\u0000', '\u0000' };
    Assertions.assertArrayEquals(expected, retval);
  }
}
