// Auto-generated by MAZE
package nl.uu.tests.maze.generated.benchmarks;

import java.lang.Exception;
import nl.uu.maze.benchmarks.TriangleClassifier;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class TriangleClassifierTest {
  @Test
  public void testClassifyInt1() throws Exception {
    int marg0 = 0;
    int marg1 = 0;
    int marg2 = 0;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyInt(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("INVALID");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyFloat1() throws Exception {
    float marg0 = -0.0F;
    float marg1 = 0.0F;
    float marg2 = 0.0F;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyFloat(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("INVALID");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyInt2() throws Exception {
    int marg0 = 1;
    int marg1 = 0;
    int marg2 = 0;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyInt(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("INVALID");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyDouble1() throws Exception {
    double marg0 = -0.0;
    double marg1 = 0.0;
    double marg2 = 0.0;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyDouble(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("INVALID");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyInt3() throws Exception {
    int marg0 = 1;
    int marg1 = 1;
    int marg2 = 0;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyInt(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("INVALID");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyFloat2() throws Exception {
    float marg0 = 1.1800861E-38F;
    float marg1 = -0.0F;
    float marg2 = 0.0F;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyFloat(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("INVALID");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyDouble2() throws Exception {
    double marg0 = 2.2946074165855514E-308;
    double marg1 = -0.0;
    double marg2 = 0.0;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyDouble(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("INVALID");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyInt4() throws Exception {
    int marg0 = 1073741826;
    int marg1 = 1073741825;
    int marg2 = 2;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyInt(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("INVALID");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyFloat3() throws Exception {
    float marg0 = 9.440689E-38F;
    float marg1 = 1.1011428E-19F;
    float marg2 = 0.0F;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyFloat(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("INVALID");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyDouble3() throws Exception {
    double marg0 = 4.778309726771247E-299;
    double marg1 = 2.2250738585719596E-308;
    double marg2 = 0.0;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyDouble(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("INVALID");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyInt5() throws Exception {
    int marg0 = 1073741825;
    int marg1 = 2;
    int marg2 = 1073741826;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyInt(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("INVALID");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyFloat4() throws Exception {
    float marg0 = 524287.0F;
    float marg1 = 1.0019531F;
    float marg2 = 7748759.0F;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyFloat(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("INVALID");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyInt6() throws Exception {
    int marg0 = 2;
    int marg1 = 1073741826;
    int marg2 = 1073741825;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyInt(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("INVALID");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyDouble4() throws Exception {
    double marg0 = 1.029830813416993;
    double marg1 = 0.999755859375;
    double marg2 = 3.468765839312777E38;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyDouble(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("INVALID");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyInt7() throws Exception {
    int marg0 = 1;
    int marg1 = 1;
    int marg2 = 1;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyInt(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("EQUILATERAL");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyFloat5() throws Exception {
    float marg0 = 2.62E-43F;
    float marg1 = Float.POSITIVE_INFINITY;
    float marg2 = 4.16153E-40F;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyFloat(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("INVALID");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyInt8() throws Exception {
    int marg0 = 1;
    int marg1 = 5;
    int marg2 = 5;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyInt(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("ISOSCELES");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyInt9() throws Exception {
    int marg0 = 2;
    int marg1 = 2;
    int marg2 = 1;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyInt(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("ISOSCELES");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyDouble5() throws Exception {
    double marg0 = 6.366246407E-314;
    double marg1 = 5.1176699201563165E-307;
    double marg2 = 2.1863866467E-314;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyDouble(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("INVALID");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyInt10() throws Exception {
    int marg0 = 32770;
    int marg1 = 32768;
    int marg2 = 3;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyInt(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("SCALENE");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyInt11() throws Exception {
    int marg0 = 5;
    int marg1 = 1;
    int marg2 = 5;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyInt(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("ISOSCELES");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyFloat6() throws Exception {
    float marg0 = Float.POSITIVE_INFINITY;
    float marg1 = 1.0000014F;
    float marg2 = 6.7762636E-20F;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyFloat(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("INVALID");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyDouble6() throws Exception {
    double marg0 = 2.688435678E-315;
    double marg1 = 5.949657E-318;
    double marg2 = 8.095E-320;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyDouble(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("INVALID");
    Assertions.assertEquals(expected, retval);
  }
}
