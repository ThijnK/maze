// Auto-generated by MAZE
package nl.uu.tests.maze.generated.benchmarks;

import java.lang.Exception;
import nl.uu.maze.benchmarks.TriangleClassifier;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class TriangleClassifierTest {
  @Test
  public void testClassifyInt1() throws Exception {
    int marg0 = 0;
    int marg1 = 0;
    int marg2 = 0;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyInt(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("INVALID");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyFloat1() throws Exception {
    float marg0 = -0.0F;
    float marg1 = 0.0F;
    float marg2 = 0.0F;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyFloat(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("INVALID");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyDouble1() throws Exception {
    double marg0 = -2.225073858507202E-308;
    double marg1 = 0.0;
    double marg2 = 0.0;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyDouble(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("INVALID");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyInt2() throws Exception {
    int marg0 = 1;
    int marg1 = 0;
    int marg2 = 0;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyInt(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("INVALID");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyInt3() throws Exception {
    int marg0 = 1;
    int marg1 = 1;
    int marg2 = 0;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyInt(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("INVALID");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyFloat2() throws Exception {
    float marg0 = 1.1800861E-38F;
    float marg1 = -0.0F;
    float marg2 = 0.0F;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyFloat(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("INVALID");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyDouble2() throws Exception {
    double marg0 = 2.2946074165855514E-308;
    double marg1 = -2.225073858507202E-308;
    double marg2 = 0.0;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyDouble(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("INVALID");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyInt4() throws Exception {
    int marg0 = 1073741826;
    int marg1 = 1073741825;
    int marg2 = 2;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyInt(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("INVALID");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyFloat3() throws Exception {
    float marg0 = 1.0884373E-19F;
    float marg1 = 2.387723E-38F;
    float marg2 = 0.0F;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyFloat(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("INVALID");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyDouble3() throws Exception {
    double marg0 = 2.565335500811485E-289;
    double marg1 = 2.2250738585719596E-308;
    double marg2 = 0.0;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyDouble(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("INVALID");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyInt5() throws Exception {
    int marg0 = 1073741825;
    int marg1 = 2;
    int marg2 = 1073741826;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyInt(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("INVALID");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyFloat4() throws Exception {
    float marg0 = 1.93054E-40F;
    float marg1 = 2.43156E-40F;
    float marg2 = 4.706569E-38F;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyFloat(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("INVALID");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyDouble4() throws Exception {
    double marg0 = 0.001159675031445373;
    double marg1 = 1.0000000018627304;
    double marg2 = 1.0025024505719176;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyDouble(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("INVALID");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyInt6() throws Exception {
    int marg0 = 2;
    int marg1 = 1073741826;
    int marg2 = 1073741825;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyInt(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("INVALID");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyInt7() throws Exception {
    int marg0 = 1;
    int marg1 = 1;
    int marg2 = 1;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyInt(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("EQUILATERAL");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyFloat5() throws Exception {
    float marg0 = 1.4E-45F;
    float marg1 = 1.0000305F;
    float marg2 = 5.906173E-39F;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyFloat(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("INVALID");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyDouble5() throws Exception {
    double marg0 = 1.000000000003638;
    double marg1 = 1.8014400255361024E16;
    double marg2 = 1.75;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyDouble(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("INVALID");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyInt8() throws Exception {
    int marg0 = 1;
    int marg1 = 5;
    int marg2 = 5;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyInt(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("ISOSCELES");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyInt9() throws Exception {
    int marg0 = 2;
    int marg1 = 2;
    int marg2 = 1;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyInt(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("ISOSCELES");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyInt10() throws Exception {
    int marg0 = 65538;
    int marg1 = 65536;
    int marg2 = 3;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyInt(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("SCALENE");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyInt11() throws Exception {
    int marg0 = 5;
    int marg1 = 1;
    int marg2 = 5;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyInt(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("ISOSCELES");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyFloat6() throws Exception {
    float marg0 = Float.POSITIVE_INFINITY;
    float marg1 = 1.015625F;
    float marg2 = Float.POSITIVE_INFINITY;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyFloat(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("INVALID");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyDouble6() throws Exception {
    double marg0 = Double.POSITIVE_INFINITY;
    double marg1 = Double.POSITIVE_INFINITY;
    double marg2 = 3.6602923434976877E-308;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyDouble(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("INVALID");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyFloat7() throws Exception {
    float marg0 = 1.1754946E-37F;
    float marg1 = 1.1754946E-37F;
    float marg2 = 1.1754946E-37F;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyFloat(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("EQUILATERAL");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyDouble7() throws Exception {
    double marg0 = 1.1125369292536007E-308;
    double marg1 = 1.1125369292536007E-308;
    double marg2 = 1.1125369292536007E-308;
    TriangleClassifier.TriangleType retval = TriangleClassifier.classifyDouble(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("EQUILATERAL");
    Assertions.assertEquals(expected, retval);
  }
}
