// Auto-generated by Maze
package tests;

import java.lang.Exception;
import nl.uu.maze.example.TriangleClassifier;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class TriangleClassifierTest {
  @Test
  public void testClassifyTriangle1() throws Exception {
    TriangleClassifier cut = new TriangleClassifier();

    int marg0 = 0;
    int marg1 = 1249608833;
    int marg2 = 1155164028;
    TriangleClassifier.TriangleType retval = cut.classifyTriangle(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("INVALID");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyTriangle2() throws Exception {
    TriangleClassifier cut = new TriangleClassifier();

    int marg0 = 1;
    int marg1 = 0;
    int marg2 = 71843734;
    TriangleClassifier.TriangleType retval = cut.classifyTriangle(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("INVALID");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyTriangle3() throws Exception {
    TriangleClassifier cut = new TriangleClassifier();

    int marg0 = 1073741826;
    int marg1 = 1073741825;
    int marg2 = 2;
    TriangleClassifier.TriangleType retval = cut.classifyTriangle(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("INVALID");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyTriangle4() throws Exception {
    TriangleClassifier cut = new TriangleClassifier();

    int marg0 = 1073741825;
    int marg1 = 2;
    int marg2 = 1073741826;
    TriangleClassifier.TriangleType retval = cut.classifyTriangle(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("INVALID");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyTriangle5() throws Exception {
    TriangleClassifier cut = new TriangleClassifier();

    int marg0 = 1;
    int marg1 = 5;
    int marg2 = 5;
    TriangleClassifier.TriangleType retval = cut.classifyTriangle(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("ISOSCELES");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyTriangle6() throws Exception {
    TriangleClassifier cut = new TriangleClassifier();

    int marg0 = 65538;
    int marg1 = 65536;
    int marg2 = 3;
    TriangleClassifier.TriangleType retval = cut.classifyTriangle(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("SCALENE");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyTriangle7() throws Exception {
    TriangleClassifier cut = new TriangleClassifier();

    int marg0 = 5;
    int marg1 = 1;
    int marg2 = 5;
    TriangleClassifier.TriangleType retval = cut.classifyTriangle(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("ISOSCELES");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyTriangle8() throws Exception {
    TriangleClassifier cut = new TriangleClassifier();

    int marg0 = 2;
    int marg1 = 2;
    int marg2 = 1;
    TriangleClassifier.TriangleType retval = cut.classifyTriangle(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("ISOSCELES");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyTriangle9() throws Exception {
    TriangleClassifier cut = new TriangleClassifier();

    int marg0 = 1;
    int marg1 = 1;
    int marg2 = 1;
    TriangleClassifier.TriangleType retval = cut.classifyTriangle(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("EQUILATERAL");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyTriangle10() throws Exception {
    TriangleClassifier cut = new TriangleClassifier();

    int marg0 = 2;
    int marg1 = 1073741826;
    int marg2 = 1073741825;
    TriangleClassifier.TriangleType retval = cut.classifyTriangle(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("INVALID");
    Assertions.assertEquals(expected, retval);
  }

  @Test
  public void testClassifyTriangle11() throws Exception {
    TriangleClassifier cut = new TriangleClassifier();

    int marg0 = 1;
    int marg1 = 1;
    int marg2 = 0;
    TriangleClassifier.TriangleType retval = cut.classifyTriangle(marg0, marg1, marg2);

    TriangleClassifier.TriangleType expected = TriangleClassifier.TriangleType.valueOf("INVALID");
    Assertions.assertEquals(expected, retval);
  }
}
